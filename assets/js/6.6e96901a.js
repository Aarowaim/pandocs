(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{352:function(t,e,a){"use strict";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"pantitle"},[t._v(" Pan Docs")]),t._v(" "),a("div",{staticClass:"pansubtitle"},[t._v("Game Boy technical reference")]),t._v(" "),a("h3",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),a("ul",[a("li",[t._v("Overview\n"),a("ul",[a("li",[a("a",{attrs:{href:"#foreword"}},[t._v("Foreword")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#authors"}},[t._v("Authors")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#specifications"}},[t._v("Specifications")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#memory-map"}},[t._v("Memory Map")])])])]),t._v(" "),a("li",[t._v("I/O Ports\n"),a("ul",[a("li",[a("a",{attrs:{href:"#video-display"}},[t._v("Video Display")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#sound-controller"}},[t._v("Sound Controller")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#joypad-input"}},[t._v("Joypad Input")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#serial-data-transfer"}},[t._v("Serial Data Transfer (Link Cable)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#timer-and-divider-registers"}},[t._v("Timer and Divider Registers")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#interrupts"}},[t._v("Interrupts")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#cgb-registers"}},[t._v("CGB Registers")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#sgb-functions"}},[t._v("SGB Functions")])])])]),t._v(" "),a("li",[t._v("CPU Specifications\n"),a("ul",[a("li",[a("a",{attrs:{href:"#registers-and-flags"}},[t._v("Registers and Flags")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#instruction-set"}},[t._v("Instruction Set")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#comparison-with-other-cpus"}},[t._v("Comparison with other CPUs")])])])]),t._v(" "),a("li",[t._v("Cartridges\n"),a("ul",[a("li",[a("a",{attrs:{href:"#the-cartridge-header"}},[t._v("Cartridge header")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mbc1"}},[t._v("MBC1")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mbc2"}},[t._v("MBC2")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mbc3"}},[t._v("MBC3")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mbc5"}},[t._v("MBC5")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mbc6"}},[t._v("MBC6")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mbc7"}},[t._v("MBC7")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#huc1"}},[t._v("HuC1")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#other-mbcs"}},[t._v("Other MBCs")])])])]),t._v(" "),a("li",[t._v("Accessories\n"),a("ul",[a("li",[a("a",{attrs:{href:"#game-boy-printer"}},[t._v("Game Boy Printer")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#game-boy-camera"}},[t._v("Game Boy Camera")])]),t._v(" "),a("li",[t._v("Gamegenie/Shark Cheats")])])]),t._v(" "),a("li",[t._v("Other\n"),a("ul",[a("li",[a("a",{attrs:{href:"#power-up-sequence"}},[t._v("Power Up Sequence")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#reducing-power-consumption"}},[t._v("Reducing Power Consumption")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#sprite-ram-bug"}},[t._v("Sprite RAM Bug")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#external-connectors"}},[t._v("External Connectors")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#gbc-approval-process"}},[t._v("GBC Approval Process")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#references"}},[t._v("References")])])]),t._v(" "),a("br"),t._v(" "),a("hr"),t._v(" "),a("h1",{attrs:{id:"foreword"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreword"}},[t._v("#")]),t._v(" Foreword")]),t._v(" "),a("p",[t._v("This document, started in early 1995, is considered the single most comprehensive technical reference to Game Boy available to the public.")]),t._v(" "),a("p",[t._v("You are reading a new version of it, mantained in the Markdown format and enjoying renewed community attention, correcting and updating it with recent findings. To learn more about the legacy and the mission of this initiative, check "),a("a",{attrs:{href:"https://github.com/gbdev/pandocs#history",target:"_blank",rel:"noopener noreferrer"}},[t._v("HISTORY"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("This project is open source, released under the "),a("a",{attrs:{href:"https://raw.githubusercontent.com/gbdev/pandocs/develop/LICENSE",target:"_blank",rel:"noopener noreferrer"}},[t._v("CC0 license"),a("OutboundLink")],1),t._v(". Everyone is welcome to contribute, provide feedback and propose additions or improvements. The git repository is hosted at "),a("a",{attrs:{href:"https://github.com/gbdev/pandocs",target:"_blank",rel:"noopener noreferrer"}},[t._v("github.com/gbdev/pandocs"),a("OutboundLink")],1),t._v(", where you can submit Issues or send Pull Requests. There is also a "),a("a",{attrs:{href:"https://gbdev.io/chat",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discord chat"),a("OutboundLink")],1),t._v(" dedicated to the gbdev community.")]),t._v(" "),a("p",[t._v("Finally, you can also contact us and send patches via email: "),a("code",[t._v("pandocs (at) gbdev.io")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("SCOPE")]),t._v(" "),a("p",[t._v("The information here is targeted at homebrew development.\nEmulator developers may be also interested in the "),a("a",{attrs:{href:"https://gekkio.fi/files/gb-docs/gbctr.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Game Boy: Complete Technical Reference"),a("OutboundLink")],1),t._v(" document.")])]),t._v(" "),a("p",[t._v("This document version was produced from git commit "),a("a",{attrs:{href:"https://github.com/gbdev/pandocs/tree/eefe2f53616b66fb9cfc34c163687deaaa567957",target:"_blank",rel:"noopener noreferrer"}},[t._v("eefe2f5"),a("OutboundLink")],1),t._v(" (2021-03-15 21:14:55 +0100).")]),t._v(" "),a("h2",{attrs:{id:"authors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authors"}},[t._v("#")]),t._v(" Authors")]),t._v(" "),a("p",[t._v('Antonio Niño Díaz, Antonio Vivace, Beannaich, Cory Sandlin, Eldred "ISSOtm" Habert, Elizafox, Furrtek, Gekkio, Jeff Frohwein, John Harrison, Lior "LIJI32" Halphon, Mantidactyle, Marat Fayzullin, Martin "nocash" Korth, Pan of ATX, Pascal Felber, Pascal Felber, Paul Robson, T4g1, TechFalcon, endrift, exezin, jrra, kOOPa, mattcurrie, nitro2k01, pinobatch, Pat Fagan.')]),t._v(" "),a("h5",{attrs:{id:"special-thanks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special-thanks"}},[t._v("#")]),t._v(" Special thanks")]),t._v(" "),a("p",[t._v("FrankenGraphics, zeta0134.")]),t._v(" "),a("h1",{attrs:{id:"specifications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specifications"}},[t._v("#")]),t._v(" Specifications")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("Game Boy")]),t._v(" "),a("th",[t._v("Game Boy Pocket")]),t._v(" "),a("th",[t._v("Game Boy Color")]),t._v(" "),a("th",[t._v("Super Game Boy")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CPU")]),t._v(" "),a("td",[t._v("8-bit Sharp LR35902")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Clock")]),t._v(" "),a("td",[t._v("4.194304 MHz")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("8.388608 MHz")]),t._v(" "),a("td",[t._v("4.295454MHz (SGB1, NTSC)")])]),t._v(" "),a("tr",[a("td",[t._v("Work RAM")]),t._v(" "),a("td",[t._v("8 KB")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("32 KB")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Video RAM")]),t._v(" "),a("td",[t._v("8 KB")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("16 KB")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Screen Size")]),t._v(" "),a("td",[t._v("LCD 4,7 x 4,3 cm")]),t._v(" "),a("td",[t._v("LCD 4,8 x 4,4 cm")]),t._v(" "),a("td",[t._v("TFT 4,4 x 4 cm")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Resolution")]),t._v(" "),a("td",[t._v("160x144")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("256x224 (including border)")])]),t._v(" "),a("tr",[a("td",[t._v("Sprites")]),t._v(" "),a("td",[t._v("Max 40 per screen, 10 per line")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Palettes")]),t._v(" "),a("td",[t._v("1x4 BG, 2x3 OBJ")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("8x4 BG, 8x3 OBJ")]),t._v(" "),a("td",[t._v("1+4x3, 4x15 (border)")])]),t._v(" "),a("tr",[a("td",[t._v("Colors")]),t._v(" "),a("td",[t._v("4 grayshades")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("32768 colors")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Horizontal Sync")]),t._v(" "),a("td",[t._v("9.198 KHz")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("9.41986 KHz")])]),t._v(" "),a("tr",[a("td",[t._v("Vertical Sync")]),t._v(" "),a("td",[t._v("59.73 Hz")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("61.1679 Hz")])]),t._v(" "),a("tr",[a("td",[t._v("Sound")]),t._v(" "),a("td",[t._v("4 channels with stereo sound")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Power")]),t._v(" "),a("td",[t._v("DC6V 0.7W")]),t._v(" "),a("td",[t._v("DC3V 0.7W")]),t._v(" "),a("td",[t._v("DC3V 0.6W")]),t._v(" "),a("td")])])]),t._v(" "),a("h1",{attrs:{id:"memory-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-map"}},[t._v("#")]),t._v(" Memory Map")]),t._v(" "),a("p",[t._v("The Game Boy has a 16-bit address bus, which is used to address ROM, RAM, and I/O.")]),t._v(" "),a("h2",{attrs:{id:"general-memory-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-memory-map"}},[t._v("#")]),t._v(" General Memory Map")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("Start")])]),t._v(" "),a("th",[a("strong",[t._v("End")])]),t._v(" "),a("th",[a("strong",[t._v("Description")])]),t._v(" "),a("th",[a("strong",[t._v("Notes")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0000")]),t._v(" "),a("td",[t._v("3FFF")]),t._v(" "),a("td",[t._v("16 KiB ROM bank 00")]),t._v(" "),a("td",[t._v("From cartridge, usually a fixed bank")])]),t._v(" "),a("tr",[a("td",[t._v("4000")]),t._v(" "),a("td",[t._v("7FFF")]),t._v(" "),a("td",[t._v("16 KiB ROM Bank 01~NN")]),t._v(" "),a("td",[t._v("From cartridge, switchable bank via "),a("a",{attrs:{href:"#memory-bank-controllers"}},[t._v("mapper")]),t._v(" (if any)")])]),t._v(" "),a("tr",[a("td",[t._v("8000")]),t._v(" "),a("td",[t._v("9FFF")]),t._v(" "),a("td",[t._v("8 KiB Video RAM (VRAM)")]),t._v(" "),a("td",[t._v("In CGB mode, switchable bank 0/1")])]),t._v(" "),a("tr",[a("td",[t._v("A000")]),t._v(" "),a("td",[t._v("BFFF")]),t._v(" "),a("td",[t._v("8 KiB External RAM")]),t._v(" "),a("td",[t._v("From cartridge, switchable bank if any")])]),t._v(" "),a("tr",[a("td",[t._v("C000")]),t._v(" "),a("td",[t._v("CFFF")]),t._v(" "),a("td",[t._v("4 KiB Work RAM (WRAM)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("D000")]),t._v(" "),a("td",[t._v("DFFF")]),t._v(" "),a("td",[t._v("4 KiB Work RAM (WRAM)")]),t._v(" "),a("td",[t._v("In CGB mode, switchable bank 1~7")])]),t._v(" "),a("tr",[a("td",[t._v("E000")]),t._v(" "),a("td",[t._v("FDFF")]),t._v(" "),a("td",[t._v("Mirror of C000~DDFF (ECHO RAM)")]),t._v(" "),a("td",[t._v("Nintendo says use of this area is prohibited.")])]),t._v(" "),a("tr",[a("td",[t._v("FE00")]),t._v(" "),a("td",[t._v("FE9F")]),t._v(" "),a("td",[t._v("Sprite attribute table ("),a("a",{attrs:{href:"#vram-sprite-attribute-table-oam"}},[t._v("OAM")]),t._v(")")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("FEA0")]),t._v(" "),a("td",[t._v("FEFF")]),t._v(" "),a("td",[t._v("Not Usable")]),t._v(" "),a("td",[t._v("Nintendo says use of this area is prohibited")])]),t._v(" "),a("tr",[a("td",[t._v("FF00")]),t._v(" "),a("td",[t._v("FF7F")]),t._v(" "),a("td",[t._v("I/O Registers")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("FF80")]),t._v(" "),a("td",[t._v("FFFE")]),t._v(" "),a("td",[t._v("High RAM (HRAM)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("FFFF")]),t._v(" "),a("td",[t._v("FFFF")]),t._v(" "),a("td",[a("a",{attrs:{href:"#interrupts"}},[t._v("Interrupts")]),t._v(" Enable Register (IE)")]),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"jump-vectors-in-first-rom-bank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jump-vectors-in-first-rom-bank"}},[t._v("#")]),t._v(" Jump Vectors in first ROM bank")]),t._v(" "),a("p",[t._v("The following addresses are supposed to be used as jump vectors:")]),t._v(" "),a("ul",[a("li",[t._v("RST instructions: 0000, 0008, 0010, 0018, 0020, 0028, 0030, 0038")]),t._v(" "),a("li",[t._v("Interrupts: 0040, 0048, 0050, 0058, 0060")])]),t._v(" "),a("p",[t._v("However, this memory area (0000-00FF) may be used for any other purpose in case that your\nprogram doesn't use any (or only some) RST instructions or interrupts. RST\nis a 1-byte instruction that works similarly to the 3-byte CALL instruction, except\nthat the destination address is restricted. Since it is 1-byte sized,\nit is also slightly faster.")]),t._v(" "),a("h2",{attrs:{id:"cartridge-header-in-first-rom-bank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cartridge-header-in-first-rom-bank"}},[t._v("#")]),t._v(" Cartridge Header in first ROM bank")]),t._v(" "),a("p",[t._v("The memory area at 0100-014F contains the "),a("a",{attrs:{href:"#the-cartridge-header"}},[t._v("cartridge\nheader")]),t._v(". This area contains information\nabout the program, its entry point, checksums, information about the\nused MBC chip, the ROM and RAM sizes, etc. Most of the bytes in this\narea are required to be specified correctly.")]),t._v(" "),a("h2",{attrs:{id:"external-memory-and-hardware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-memory-and-hardware"}},[t._v("#")]),t._v(" External Memory and Hardware")]),t._v(" "),a("p",[t._v("The areas from 0000-7FFF and A000-BFFF address external hardware on\nthe cartridge, which is essentially an expansion board.  Typically this\nis a ROM and SRAM or, more often, a "),a("a",{attrs:{href:"#memory-bank-controllers"}},[t._v("Memory Bank Controller\n(MBC)")]),t._v(". The RAM area can be read\nfrom and written to normally; writes to the ROM area control the MBC.\nSome MBCs allow mapping of other hardware into the RAM area in this\nway.")]),t._v(" "),a("p",[t._v("Cartridge RAM is often battery buffered to hold saved game positions,\nhigh score tables, and other information when the Game Boy is turned\noff.  For specific information read the chapter about Memory Bank\nControllers.")]),t._v(" "),a("h2",{attrs:{id:"echo-ram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#echo-ram"}},[t._v("#")]),t._v(" Echo RAM")]),t._v(" "),a("p",[t._v("The range E000-FDFF is mapped to WRAM, but only the lower 13 bits of\nthe address lines are connected, with the upper bits on the upper bank\nset internally in the memory controller by a bank swap register.  This\ncauses the address to effectively wrap around.  All reads and writes to\nthis range have the same effect as reads and writes to C000-DDFF.")]),t._v(" "),a("p",[t._v("Nintendo prohibits developers from using this memory range.  The\nbehavior is confirmed on all official hardware. Some emulators (such as\nVisualBoyAdvance <1.8) don't emulate Echo RAM.  In some flash cartridges,\necho RAM interferes with SRAM normally at A000-BFFF. Software can check if\nEcho RAM is properly emulated by writing to RAM (avoid values 00 and\nFF) and checking if said value is mirrored in Echo RAM and not cart SRAM.")]),t._v(" "),a("h2",{attrs:{id:"i-o-ranges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o-ranges"}},[t._v("#")]),t._v(" I/O Ranges")]),t._v(" "),a("p",[t._v("The Game Boy uses the following I/O ranges:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("Start")])]),t._v(" "),a("th",[a("strong",[t._v("End")])]),t._v(" "),a("th",[a("strong",[t._v("Revision")])]),t._v(" "),a("th",[a("strong",[t._v("Purpose")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$FF00")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("Controller")])]),t._v(" "),a("tr",[a("td",[t._v("$FF01")]),t._v(" "),a("td",[t._v("$FF02")]),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("Communication")])]),t._v(" "),a("tr",[a("td",[t._v("$FF04")]),t._v(" "),a("td",[t._v("$FF07")]),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("Divider and Timer")])]),t._v(" "),a("tr",[a("td",[t._v("$FF10")]),t._v(" "),a("td",[t._v("$FF26")]),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("Sound")])]),t._v(" "),a("tr",[a("td",[t._v("$FF30")]),t._v(" "),a("td",[t._v("$FF3F")]),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("Waveform RAM")])]),t._v(" "),a("tr",[a("td",[t._v("$FF40")]),t._v(" "),a("td",[t._v("$FF4B")]),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("LCD")])]),t._v(" "),a("tr",[a("td",[t._v("$FF4F")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("CGB")]),t._v(" "),a("td",[t._v("VRAM Bank Select")])]),t._v(" "),a("tr",[a("td",[t._v("$FF50")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("DMG")]),t._v(" "),a("td",[t._v("Set to non-zero to disable boot ROM")])]),t._v(" "),a("tr",[a("td",[t._v("$FF51")]),t._v(" "),a("td",[t._v("$FF55")]),t._v(" "),a("td",[t._v("CGB")]),t._v(" "),a("td",[t._v("HDMA")])]),t._v(" "),a("tr",[a("td",[t._v("$FF68")]),t._v(" "),a("td",[t._v("$FF69")]),t._v(" "),a("td",[t._v("CGB")]),t._v(" "),a("td",[t._v("BCP/OCP")])]),t._v(" "),a("tr",[a("td",[t._v("$FF70")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("CGB")]),t._v(" "),a("td",[t._v("WRAM Bank Select")])])])]),t._v(" "),a("h2",{attrs:{id:"fea0-feff-range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fea0-feff-range"}},[t._v("#")]),t._v(" FEA0-FEFF range")]),t._v(" "),a("p",[t._v("Nintendo indicates use of this area is prohibited.  This area returns\nFF when OAM is blocked, and otherwise the behavior depends on the\nhardware revision.")]),t._v(" "),a("p",[t._v("On DMG, MGB, SGB, and SGB2, reads during OAM block trigger the sprite\nbug. Reads otherwise return 00.")]),t._v(" "),a("p",[t._v("On CGB revisions 0-D, this area is a unique RAM area, but is masked\nwith a revision-specific value.")]),t._v(" "),a("p",[t._v("On CGB revision E, AGB, AGS, and GBP, it returns the high nibble of the\nlower address byte twice, e.g. FFAx returns AA, FFBx returns BB, and so\nforth.")]),t._v(" "),a("h1",{attrs:{id:"video-display"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#video-display"}},[t._v("#")]),t._v(" Video Display")]),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("The Game Boy outputs graphics to a 160x144 pixel LCD, using a quite complex\nmechanism to facilitate rendering.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Sprites/graphics terminology can vary a lot among different platforms, consoles,\nusers and communities. You may be familiar with slightly different definitions.\nKeep also in mind that some of the definitions refers to lower (hardware) tools\nand some others to higher abstractions concepts.")])]),t._v(" "),a("h3",{attrs:{id:"tiles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiles"}},[t._v("#")]),t._v(" Tiles")]),t._v(" "),a("p",[t._v("Similarly to other retro systems, pixels are not manipulated\nindividually, as this would be expensive CPU-wise. Instead, pixels are grouped\nin 8x8 squares, called "),a("em",[t._v("tiles")]),t._v(' (or sometimes "patterns"), often considered as\nthe base unit in Game Boy graphics.')]),t._v(" "),a("p",[t._v("A tile does not encode color information. Instead, a tile assigns a\n"),a("em",[t._v("color ID")]),t._v(" to each of its pixels, ranging from 0 to 3. For this reason,\nGame Boy graphics are also called "),a("em",[t._v("2bpp")]),t._v(" (2 bits per pixel). When a tile is used\nin the Background or Window, these color IDs are associated with a "),a("em",[t._v("palette")]),t._v(". When\na tile is used in a OBJ, the IDs 1 to 3 are associated with a palette, but\nID 0 means transparent.")]),t._v(" "),a("h3",{attrs:{id:"palettes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#palettes"}},[t._v("#")]),t._v(" Palettes")]),t._v(" "),a("p",[t._v("A palette consists in a array of colors, 4 in the Game Boy's case.\nPalettes are stored differently in monochrome and color versions of the console.")]),t._v(" "),a("p",[t._v('Modifying palettes enables graphical effects such as quickly flashing some graphics (damage,\ninvulnerability, thunderstorm, etc.), fading the screen, "palette swaps", and more.')]),t._v(" "),a("h3",{attrs:{id:"layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#layers"}},[t._v("#")]),t._v(" Layers")]),t._v(" "),a("p",[t._v('The Game Boy has three "layers", from back to front: the Background, the Window,\nand the Objects. Some features and behaviors break this abstraction,\nbut it works for the most part.')]),t._v(" "),a("h4",{attrs:{id:"background"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[t._v("#")]),t._v(" Background")]),t._v(" "),a("p",[t._v("The background is composed of a "),a("em",[t._v("tilemap")]),t._v(". A tilemap is a\nlarge grid of tiles. However, tiles aren't directly written to tilemaps,\nthey merely contain references to the tiles.\nThis makes reusing tiles very cheap, both in CPU time and in\nrequired memory space, and it is the main mechanism that helps working around the\npaltry 8 KiB of video RAM.")]),t._v(" "),a("p",[t._v("The background can be made to scroll as a whole, writing to two\nhardware registers. This makes scrolling very cheap.")]),t._v(" "),a("h4",{attrs:{id:"window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window"}},[t._v("#")]),t._v(" Window")]),t._v(" "),a("p",[t._v("The window is sort of a second background layer on top of the background.\nIt is fairly limited: it has no transparency, it's always a\nrectangle and only the position of the top-left pixel can be controlled.")]),t._v(" "),a("p",[t._v("Possible usage include a fixed status bar in an otherwise scrolling game (e.g.\n"),a("em",[t._v("Super Mario Bros. 3")]),t._v(").")]),t._v(" "),a("h4",{attrs:{id:"objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[t._v("#")]),t._v(" Objects")]),t._v(" "),a("p",[t._v("The background layer is useful for elements scrolling as a whole, but\nit's impractical for objects that need to move separately, such as the player.")]),t._v(" "),a("p",[t._v("The "),a("em",[t._v("objects")]),t._v(" layer is designed to fill this gap: "),a("em",[t._v("objects")]),t._v(" are made of 1 or 2 stacked tiles (8x8 or 8x16 pixels)\nand can be displayed anywhere on the screen.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Several objects can be combined (they can be called "),a("em",[t._v("metasprites")]),t._v(') to draw\na larger graphical element, usually called "sprite". Originally, the term "sprites"\nreferred to fixed-sized objects composited together, by hardware, with a background.\nUse of the term has since become more general.')])]),t._v(" "),a("p",[t._v("To summarise:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Tile")]),t._v(", an 8x8-pixel chunk of graphics.")]),t._v(" "),a("li",[a("strong",[t._v("Object")]),t._v(", an entry in object attribute memory, composed of 1 or 2\ntiles. Independent from the background.")])]),t._v(" "),a("h2",{attrs:{id:"lcd-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-control"}},[t._v("#")]),t._v(" LCD Control")]),t._v(" "),a("h4",{attrs:{id:"ff40-lcdc-lcd-control-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff40-lcdc-lcd-control-r-w"}},[t._v("#")]),t._v(" FF40 - LCDC (LCD Control) (R/W)")]),t._v(" "),a("p",[a("strong",[t._v("LCDC")]),t._v(" is the main "),a("strong",[t._v("LCD C")]),t._v("ontrol register. Its bits toggle what\nelements are displayed on the screen, and how.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Bit")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Usage notes")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[t._v("LCD and PPU enable")]),t._v(" "),a("td",[t._v("0=Off, 1=On")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("Window tile map area")]),t._v(" "),a("td",[t._v("0=9800-9BFF, 1=9C00-9FFF")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("Window enable")]),t._v(" "),a("td",[t._v("0=Off, 1=On")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("BG and Window tile data area")]),t._v(" "),a("td",[t._v("0=8800-97FF, 1=8000-8FFF")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("BG tile map area")]),t._v(" "),a("td",[t._v("0=9800-9BFF, 1=9C00-9FFF")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("OBJ size")]),t._v(" "),a("td",[t._v("0=8x8, 1=8x16")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("OBJ enable")]),t._v(" "),a("td",[t._v("0=Off, 1=On")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("BG and Window enable/priority")]),t._v(" "),a("td",[t._v("0=Off, 1=On")])])])]),t._v(" "),a("h5",{attrs:{id:"lcdc-7-lcd-enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-7-lcd-enable"}},[t._v("#")]),t._v(" LCDC.7 - LCD enable")]),t._v(" "),a("p",[t._v("This bit controls whether the LCD is on and the PPU is active. Setting\nit to 0 turns both off, which grants immediate and full access to VRAM,\nOAM, etc.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Stopping LCD operation (Bit 7 from 1 to 0) may be performed\nduring VBlank ONLY, disabling the display outside\nof the VBlank period may damage the hardware by burning in a black\nhorizontal line similar to that which appears when the GB is turned off.\nThis appears to be a serious issue. Nintendo is reported to reject any\ngames not following this rule.")])]),t._v(" "),a("p",[t._v('When the display is disabled the screen is blank, which on DMG is\ndisplayed as a white "whiter" than color #0.')]),t._v(" "),a("p",[t._v("On SGB, the screen doesn't turn white, it appears that the previous\npicture sticks to the screen. (TODO: research this more.)")]),t._v(" "),a("p",[t._v("When re-enabling the LCD, the PPU will immediately start drawing again,\nbut the screen will stay blank during the first frame.")]),t._v(" "),a("h5",{attrs:{id:"lcdc-6-window-tile-map-area"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-6-window-tile-map-area"}},[t._v("#")]),t._v(" LCDC.6 - Window tile map area")]),t._v(" "),a("p",[t._v("This bit controls which background map the Window uses for rendering.\nWhen it's reset, the $9800 tilemap is used, otherwise it's the $9C00\none.")]),t._v(" "),a("h5",{attrs:{id:"lcdc-5-window-enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-5-window-enable"}},[t._v("#")]),t._v(" LCDC.5 - Window enable")]),t._v(" "),a("p",[t._v("This bit controls whether the window shall be displayed or not. (TODO:\nwhat happens when toggling this mid-scanline ?) This bit is overridden\non DMG by "),a("a",{attrs:{href:"#lcdc-0-bg-and-window-enable-priority"}},[t._v("bit 0")]),t._v("\nif that bit is reset.")]),t._v(" "),a("p",[t._v("Note that on CGB models, setting this bit to 0 then back to 1 mid-frame\nmay cause the second write to be ignored. (TODO: test this.)")]),t._v(" "),a("h5",{attrs:{id:"lcdc-4-bg-and-window-tile-data-area"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-4-bg-and-window-tile-data-area"}},[t._v("#")]),t._v(" LCDC.4 - BG and Window tile data area")]),t._v(" "),a("p",[t._v("This bit controls which "),a("a",{attrs:{href:"#vram-tile-data"}},[t._v("addressing\nmode")]),t._v(" the BG and Window use to\npick tiles.")]),t._v(" "),a("p",[t._v("Sprites aren't affected by this, and will always use $8000 addressing\nmode.")]),t._v(" "),a("h5",{attrs:{id:"lcdc-3-bg-tile-map-area"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-3-bg-tile-map-area"}},[t._v("#")]),t._v(" LCDC.3 - BG tile map area")]),t._v(" "),a("p",[t._v("This bit works similarly to LCDC-6: if the bit is\nreset, the BG uses tilemap $9800, otherwise tilemap $9C00.")]),t._v(" "),a("h5",{attrs:{id:"lcdc-2-obj-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-2-obj-size"}},[t._v("#")]),t._v(" LCDC.2 - OBJ size")]),t._v(" "),a("p",[t._v("This bit controls the sprite size (1 tile or 2 stacked vertically).")]),t._v(" "),a("p",[t._v('Be cautious when changing this mid-frame from 8x8 to 8x16: "remnants"\nof the sprites intended for 8x8 could "leak" into the 8x16 zone and\ncause artifacts.')]),t._v(" "),a("h5",{attrs:{id:"lcdc-1-obj-enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-1-obj-enable"}},[t._v("#")]),t._v(" LCDC.1 - OBJ enable")]),t._v(" "),a("p",[t._v("This bit toggles whether sprites are displayed or not.")]),t._v(" "),a("p",[t._v("This can be toggled mid-frame, for example to avoid sprites being\ndisplayed on top of a status bar or text box.")]),t._v(" "),a("p",[t._v("(Note: toggling mid-scanline might have funky results on DMG?\nInvestigation needed.)")]),t._v(" "),a("h5",{attrs:{id:"lcdc-0-bg-and-window-enable-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-0-bg-and-window-enable-priority"}},[t._v("#")]),t._v(" LCDC.0 - BG and Window enable/priority")]),t._v(" "),a("p",[t._v("LCDC.0 has different meanings depending on Game Boy type and Mode:")]),t._v(" "),a("h4",{attrs:{id:"dmg-sgb-and-cgb-in-non-cgb-mode-bg-and-window-display"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dmg-sgb-and-cgb-in-non-cgb-mode-bg-and-window-display"}},[t._v("#")]),t._v(" DMG, SGB and CGB in Non-CGB Mode: BG and Window Display")]),t._v(" "),a("p",[t._v("When Bit 0 is cleared, both background and window become blank (white),\nand the "),a("a",{attrs:{href:"#lcdc-5-window-enable"}},[t._v("Window Display Bit")]),t._v("\nis ignored in that case. Only Sprites may still be displayed (if enabled\nin Bit 1).")]),t._v(" "),a("h4",{attrs:{id:"cgb-in-cgb-mode-bg-and-window-master-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgb-in-cgb-mode-bg-and-window-master-priority"}},[t._v("#")]),t._v(" CGB in CGB Mode: BG and Window Master Priority")]),t._v(" "),a("p",[t._v("When Bit 0 is cleared, the background and window lose their priority -\nthe sprites will be always displayed on top of background and window,\nindependently of the priority flags in OAM and BG Map attributes.")]),t._v(" "),a("h3",{attrs:{id:"using-lcdc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-lcdc"}},[t._v("#")]),t._v(" Using LCDC")]),t._v(" "),a("p",[t._v("LCDC is a powerful tool: each bit controls a lot of behavior, and can be\nmodified at any time during the frame.")]),t._v(" "),a("p",[t._v("One of the important aspects of LCDC is that unlike VRAM, the PPU never\nlocks it. It's thus possible to modify it mid-scanline!")]),t._v(" "),a("h3",{attrs:{id:"faux-layer-textbox-status-bar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faux-layer-textbox-status-bar"}},[t._v("#")]),t._v(" Faux-layer textbox/status bar")]),t._v(" "),a("p",[t._v('A problem often seen especially in NES games is sprites rendering on top\nof the textbox/status bar. It\'s possible to prevent this using LCDC if\nthe textbox/status bar is "alone" on its scanlines:')]),t._v(" "),a("ul",[a("li",[t._v("Set LCDC.1 to 1 for gameplay scanlines")]),t._v(" "),a("li",[t._v("Set LCDC.1 to 0 for textbox/status bar scanlines")])]),t._v(" "),a("p",[t._v("Usually, these bars are either at the top or bottom of the screen, so\nthe bit can be set by the VBlank handler.")]),t._v(" "),a("h2",{attrs:{id:"lcd-status-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-status-register"}},[t._v("#")]),t._v(" LCD Status Register")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TERMINOLOGY")]),t._v(" "),a("p",[t._v("A "),a("em",[t._v("dot")]),t._v(" is the shortest period over which the PPU can output one pixel: is it equivalent to 1 T-state on DMG or on CGB single-speed mode or 2 T-states on CGB double-speed mode. On each dot during mode 3, either the PPU outputs a pixel or the fetcher is stalling the "),a("a",{attrs:{href:"#pixel-fifo"}},[t._v("FIFOs")]),t._v(".")])]),t._v(" "),a("h4",{attrs:{id:"ff41-stat-lcd-status-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff41-stat-lcd-status-r-w"}},[t._v("#")]),t._v(" FF41 - STAT (LCD Status) (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 6 - LYC=LY Interrupt             (1=Enable) (Read/Write)\nBit 5 - Mode 2 OAM Interrupt         (1=Enable) (Read/Write)\nBit 4 - Mode 1 VBlank Interrupt      (1=Enable) (Read/Write)\nBit 3 - Mode 0 HBlank Interrupt      (1=Enable) (Read/Write)\nBit 2 - LYC=LY Flag      (0=Different, 1=Equal) (Read Only)\nBit 1-0 - Mode Flag       (Mode 0-3, see below) (Read Only)\n          0: In HBlank\n          1: In VBlank\n          2: Searching OAM\n          3: Transferring Data to LCD Controller\n")])])]),a("p",[t._v("The two lower STAT bits show the current status of the PPU.")]),t._v(" "),a("p",[t._v("The LCD controller operates on a 2^22 Hz = 4.194 MHz dot clock. An\nentire frame is 154 scanlines, 70224 dots, or 16.74 ms. On scanlines 0\nthrough 143, the PPU cycles through modes 2, 3, and 0 once\nevery 456 dots. Scanlines 144 through 153 are mode 1.")]),t._v(" "),a("p",[t._v("The following sequence is typical when the display is enabled:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Mode 2  2_____2_____2_____2_____2_____2___________________2____\nMode 3  _33____33____33____33____33____33__________________3___\nMode 0  ___000___000___000___000___000___000________________000\nMode 1  ____________________________________11111111111111_____\n")])])]),a("p",[t._v("When the PPU is reading a particular part of video memory,\nthat memory is inaccessible to the CPU.")]),t._v(" "),a("ul",[a("li",[t._v("During modes 2 and 3, the CPU cannot access OAM (FE00h-FE9Fh).")]),t._v(" "),a("li",[t._v("During mode 3, the CPU cannot access VRAM or CGB Palette Data\n(FF69,FF6B).")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mode")]),t._v(" "),a("th",[t._v("Action")]),t._v(" "),a("th",[t._v("Duration")]),t._v(" "),a("th",[t._v("Accessible video memory")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Searching OAM for OBJs whose (X,Y) coordinates overlap this line")]),t._v(" "),a("td",[t._v("80 dots (19 us)")]),t._v(" "),a("td",[t._v("VRAM, CGB palettes")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Reading OAM and VRAM to generate the picture")]),t._v(" "),a("td",[t._v("168 to 291 dots (40 to 60 us) depending on sprite count")]),t._v(" "),a("td",[t._v("None")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("Horizontal blanking")]),t._v(" "),a("td",[t._v("85 to 208 dots (20 to 49 us) depending on previous mode 3 duration")]),t._v(" "),a("td",[t._v("VRAM, OAM, CGB palettes")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Vertical blanking")]),t._v(" "),a("td",[t._v("4560 dots (1087 us, 10 scanlines)")]),t._v(" "),a("td",[t._v("VRAM, OAM, CGB palettes")])])])]),t._v(" "),a("h4",{attrs:{id:"properties-of-stat-modes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties-of-stat-modes"}},[t._v("#")]),t._v(" Properties of STAT modes")]),t._v(" "),a("p",[t._v("Unlike most game consoles, the Game Boy can pause the dot clock briefly,\nadding dots to mode 3's duration. It routinely takes a 6 to 11 dot\nbreak to fetch sprite patterns between background tile pattern fetches.\nOn DMG and GBC in DMG mode, mid-scanline writes to "),a("code",[t._v("BGP")]),t._v(" allow observing\nthis behavior, as a sprite delay shifts the effect of a write to the\nleft by that many dots.")]),t._v(" "),a("p",[t._v("Three things are known to pause the dot clock:")]),t._v(" "),a("ul",[a("li",[t._v("Background scrolling: If "),a("code",[t._v("SCX mod 8")]),t._v(" is not zero at the start of the scanline, rendering is paused for that many dots while the shifter discards that many pixels from the leftmost tile.")]),t._v(" "),a("li",[t._v("Window: An active window pauses for at least 6 dots, as the background fetching mechanism starts over at the left side of the window.")]),t._v(" "),a("li",[t._v("Sprites: Each sprite usually pauses for "),a("code",[t._v("11 - min(5, (x + SCX) mod 8)")]),t._v(" dots. Because sprite fetch waits for background fetch to finish, a sprite's cost depends on its position relative to the left side of the background tile under it. It's greater if a sprite is directly aligned over the background tile, less if the sprite is to the right. If the sprite's left side is over the window, use "),a("code",[t._v("255 - WX")]),t._v(" for "),a("code",[t._v("SCX")]),t._v(" in this formula.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("TO BE VERIFIED")]),t._v(" "),a("p",[t._v("The exact pause duration for window start is\nnot confirmed; it may have the same background fetch finish delay as a\nsprite. If two sprites' left sides are over the same background or\nwindow tile, the second may pause for fewer dots.")])]),t._v(" "),a("p",[t._v("A hardware quirk in the monochrome Game Boy makes the LCD interrupt\nsometimes trigger when writing to STAT (including writing $00) during\nOAM scan, HBlank, VBlank, or LY=LYC. It behaves as if $FF were\nwritten for one cycle, and then the written value were written the next\ncycle. Because the GBC in DMG mode does not have this quirk, two games\nthat depend on this quirk (Ocean's "),a("em",[t._v("Road Rash")]),t._v(" and Vic Tokai's "),a("em",[t._v("Xerd\nno Densetsu")]),t._v(") will not run on a GBC.")]),t._v(" "),a("h2",{attrs:{id:"lcd-interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-interrupts"}},[t._v("#")]),t._v(" LCD Interrupts")]),t._v(" "),a("h4",{attrs:{id:"int-40-vblank-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-40-vblank-interrupt"}},[t._v("#")]),t._v(" INT 40 - VBlank Interrupt")]),t._v(" "),a("p",[t._v("The VBlank interrupt occurs ca. 59.7 times a second on a handheld Game\nBoy (DMG or CGB) or Game Boy Player and ca. 61.1 times a second on a\nSuper Game Boy (SGB). This interrupt occurs at the beginning of the\nVBlank period (LY=144). During this period video hardware is not using\nVRAM so it may be freely accessed. This period lasts approximately 1.1\nmilliseconds.")]),t._v(" "),a("h4",{attrs:{id:"int-48-stat-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-48-stat-interrupt"}},[t._v("#")]),t._v(" INT 48 - STAT Interrupt")]),t._v(" "),a("p",[t._v("There are various reasons for this interrupt to occur as described by\nthe STAT register ($FF41). One very popular reason is to indicate to\nthe user when the video hardware is about to redraw a given LCD line.\nThis can be useful for dynamically controlling the SCX/SCY registers\n($FF43/$FF42) to perform special video effects.")]),t._v(" "),a("p",[t._v("Example application: set LYC to WY, enable LY=LYC interrupt, and have\nthe handler disable sprites. This can be used if you use the window for\na text box (at the bottom of the screen), and you want sprites to be\nhidden by the text box.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("As mentioned in the description of the STAT register, the PPU cycles\nthrough the different modes in a fixed order. If we set the STAT bits\nin a way that they would interrupt the CPU at two\nconsecutive modes, then the second interrupt will not trigger. So for example,\nif we enable the interrupts for Mode 0 and Mode 1,\nthe Mode 1 interrupt will not trigger.")])]),t._v(" "),a("h2",{attrs:{id:"lcd-position-and-scrolling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-position-and-scrolling"}},[t._v("#")]),t._v(" LCD Position and Scrolling")]),t._v(" "),a("p",[t._v("These registers can be accessed even during Mode 3, but they have no\neffect until the end of the current scanline.")]),t._v(" "),a("h4",{attrs:{id:"ff42-scy-scroll-y-r-w-ff43-scx-scroll-x-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff42-scy-scroll-y-r-w-ff43-scx-scroll-x-r-w"}},[t._v("#")]),t._v(" FF42 - SCY (Scroll Y) (R/W), FF43 - SCX (Scroll X) (R/W)")]),t._v(" "),a("p",[t._v("Specify the top-left coordinates of the visible 160x144 pixel area within the\n256x256 pixels BG map. Values in the range 0-255 may be used.")]),t._v(" "),a("h4",{attrs:{id:"ff44-ly-lcdc-y-coordinate-r"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff44-ly-lcdc-y-coordinate-r"}},[t._v("#")]),t._v(" FF44 - LY (LCDC Y-Coordinate) (R)")]),t._v(" "),a("p",[t._v("LY indicates the current horizontal line, which might be about to be drawn,\nbeing drawn, or just been drawn. LY can hold any value from 0 to 153.\nThe values from 144 to 153 indicate the VBlank period.")]),t._v(" "),a("h4",{attrs:{id:"ff45-lyc-ly-compare-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff45-lyc-ly-compare-r-w"}},[t._v("#")]),t._v(" FF45 - LYC (LY Compare) (R/W)")]),t._v(" "),a("p",[t._v('The Game Boy permanently compares the value of the LYC and LY registers.\nWhen both values are identical, the "LYC=LY" flag in the STAT register\nis set, and (if enabled) a STAT interrupt is requested.')]),t._v(" "),a("h4",{attrs:{id:"ff4a-wy-window-y-position-r-w-ff4b-wx-window-x-position-7-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff4a-wy-window-y-position-r-w-ff4b-wx-window-x-position-7-r-w"}},[t._v("#")]),t._v(" FF4A - WY (Window Y Position) (R/W), FF4B - WX (Window X Position + 7) (R/W)")]),t._v(" "),a("p",[t._v("Specify the top-left coordinates of the Window. (The Window is an\nalternate background area which can be displayed above of the normal\nbackground. OBJs (sprites) may be still displayed above or behind the\nWindow, just as for normal BG.)")]),t._v(" "),a("p",[t._v("The Window is visible (if enabled) when both coordinates are in the ranges\nWX=0..166, WY=0..143 respectively. Values WX=7, WY=0 place the Window at the\ntop left of the screen, completely covering the background.")]),t._v(" "),a("p",[t._v('WX values 0-6 and 166 are unreliable due to hardware bugs. If WX is set\nto 0, the window will "stutter" horizontally when SCX changes.\n(Depending on SCX modulo 8, behavior is a little complicated so you\nshould try it yourself.)')]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("MID-FRAME QUIRKS")]),t._v(" "),a("p",[t._v("While the Windows should work as just mentioned, writing to WX, WY etc. mid-frame shows a more articulated behavior.")]),t._v(" "),a("p",[t._v("For the window to be displayed on a scanline:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("WY condition was triggered")]),t._v(": i.e. at some point in this frame the value of WY was equal to LY (checked at the start of Mode 2 only)")]),t._v(" "),a("li",[a("strong",[t._v("WX condition was triggered")]),t._v(": i.e. the current X coordinate being rendered + 7 was equal to WX")]),t._v(" "),a("li",[t._v("Window enable bit in LCDC is set")])]),t._v(" "),a("p",[t._v("If the WY condition has already been triggered and at the the start of a row the window enable bit was set\nthen resetting that bit before the WX condition gets triggered on that row yields a nice window glitch pixel where the window would have been activated.")])]),t._v(" "),a("h2",{attrs:{id:"lcd-monochrome-palettes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-monochrome-palettes"}},[t._v("#")]),t._v(" LCD Monochrome Palettes")]),t._v(" "),a("h4",{attrs:{id:"ff47-bgp-bg-palette-data-r-w-non-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff47-bgp-bg-palette-data-r-w-non-cgb-mode-only"}},[t._v("#")]),t._v(" FF47 - BGP (BG Palette Data) (R/W) - Non CGB Mode Only")]),t._v(" "),a("p",[t._v("This register assigns gray shades to the color indexes of the BG and\nWindow tiles.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7-6 - Color for index 3\nBit 5-4 - Color for index 2\nBit 3-2 - Color for index 1\nBit 1-0 - Color for index 0\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Value")]),t._v(" "),a("th",[t._v("Color")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("White")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Light gray")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Dark gray")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Black")])])])]),t._v(" "),a("p",[t._v("In CGB Mode the Color Palettes are taken from CGB Palette Memory\ninstead.")]),t._v(" "),a("h4",{attrs:{id:"ff48-obp0-object-palette-0-data-r-w-non-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff48-obp0-object-palette-0-data-r-w-non-cgb-mode-only"}},[t._v("#")]),t._v(" FF48 - OBP0 (Object Palette 0 Data) (R/W) - Non CGB Mode Only")]),t._v(" "),a("p",[t._v("This register assigns gray shades to the color indexes of the OBJs that use this palette. It works exactly\nlike BGP (FF47), except that the lower two bits are ignored because\nsprite index 00 means transparent.")]),t._v(" "),a("h4",{attrs:{id:"ff49-obp1-object-palette-1-data-r-w-non-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff49-obp1-object-palette-1-data-r-w-non-cgb-mode-only"}},[t._v("#")]),t._v(" FF49 - OBP1 (Object Palette 1 Data) (R/W) - Non CGB Mode Only")]),t._v(" "),a("p",[t._v("This register assigns gray shades to the color indexes of the OBJs that use this palette. It works exactly\nlike BGP (FF47), except that the lower two bits are ignored because\nsprite index 00 means transparent.")]),t._v(" "),a("h2",{attrs:{id:"lcd-color-palettes-cgb-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-color-palettes-cgb-only"}},[t._v("#")]),t._v(" LCD Color Palettes (CGB only)")]),t._v(" "),a("h4",{attrs:{id:"ff68-bcps-bgpi-background-color-palette-specification-or-background-palette-index-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff68-bcps-bgpi-background-color-palette-specification-or-background-palette-index-cgb-mode-only"}},[t._v("#")]),t._v(" FF68 - BCPS/BGPI (Background Color Palette Specification or Background Palette Index) - CGB Mode Only")]),t._v(" "),a("p",[t._v("This register is used to address a byte in the CGBs Background Palette\nMemory. Each two byte in that memory define a color value. The first 8\nbytes define Color 0-3 of Palette 0 (BGP0), and so on for BGP1-7.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\nBit 5-0   Index (00-3F)\n")])])]),a("p",[t._v("Data can be read/written to/from the specified index address through\nRegister FF69. When the Auto Increment bit is set then the index is\nautomatically incremented after each "),a("strong",[t._v("write")]),t._v(" to FF69. Auto Increment has\nno effect when "),a("strong",[t._v("reading")]),t._v(" from FF69, so the index must be manually\nincremented in that case. Writing to FF69 during rendering still causes\nauto-increment to occur.")]),t._v(" "),a("p",[t._v("Unlike the following, this register can be accessed outside VBlank and\nHBlank.")]),t._v(" "),a("h4",{attrs:{id:"ff69-bcpd-bgpd-background-color-palette-data-or-background-palette-data-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff69-bcpd-bgpd-background-color-palette-data-or-background-palette-data-cgb-mode-only"}},[t._v("#")]),t._v(" FF69 - BCPD/BGPD (Background Color Palette Data or Background Palette Data) - CGB Mode Only")]),t._v(" "),a("p",[t._v("This register allows to read/write data to the CGBs Background Palette\nMemory, addressed through Register FF68. Each color is defined by two\nbytes (Bit 0-7 in first byte).")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 0-4   Red Intensity   (00-1F)\nBit 5-9   Green Intensity (00-1F)\nBit 10-14 Blue Intensity  (00-1F)\n")])])]),a("p",[t._v("Much like VRAM, data in Palette Memory cannot be read/written during the\ntime when the LCD Controller is reading from it. (That is when the STAT\nregister indicates Mode 3). Note: All background colors are initialized\nas white by the boot ROM, but it's a good idea to initialize at least\none color yourself (for example if you include a soft-reset mechanic).")]),t._v(" "),a("h4",{attrs:{id:"ff6a-ocps-obpi-object-color-palette-specification-or-sprite-palette-index-ff6b-ocpd-obpd-object-color-palette-data-or-sprite-palette-data-both-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff6a-ocps-obpi-object-color-palette-specification-or-sprite-palette-index-ff6b-ocpd-obpd-object-color-palette-data-or-sprite-palette-data-both-cgb-mode-only"}},[t._v("#")]),t._v(" FF6A - OCPS/OBPI (Object Color Palette Specification or Sprite Palette Index), FF6B - OCPD/OBPD (Object Color Palette Data or Sprite Palette Data) - Both CGB Mode Only")]),t._v(" "),a("p",[t._v("These registers are used to initialize the Sprite Palettes OBP0-7,\nidentically as described above for Background Palettes. Note that four\ncolors may be defined for each OBP Palettes - but only Color 1-3 of each\nSprite Palette can be displayed, Color 0 is always transparent, and can\nbe initialized to a don't care value or plain never initialized.")]),t._v(" "),a("p",[t._v("Note: All sprite colors are left uninitialized by the boot ROM, and are\nsomewhat random.")]),t._v(" "),a("h4",{attrs:{id:"rgb-translation-by-cgbs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgb-translation-by-cgbs"}},[t._v("#")]),t._v(" RGB Translation by CGBs")]),t._v(" "),a("p",[a("img",{attrs:{src:"imgs/VGA_versus_CGB.png",alt:"sRGB versus CGB color mixing"}})]),t._v(" "),a("p",[t._v("When developing graphics on PCs, note that the RGB values will have\ndifferent appearance on CGB displays as on VGA/HDMI monitors calibrated\nto sRGB color. Because the GBC is not lit, the highest intensity will\nproduce Light Gray color rather than White. The intensities are not\nlinear; the values 10h-1Fh will all appear very bright, while medium and\ndarker colors are ranged at 00h-0Fh.")]),t._v(" "),a("p",[t._v("The CGB display's pigments aren't perfectly saturated. This means the\ncolors mix quite oddly; increasing intensity of only one R,G,B color\nwill also influence the other two R,G,B colors. For example, a color\nsetting of 03EFh (Blue=0, Green=1Fh, Red=0Fh) will appear as Neon Green\non VGA displays, but on the CGB it'll produce a decently washed out\nYellow. See image on the right.")]),t._v(" "),a("h4",{attrs:{id:"rgb-translation-by-gbas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgb-translation-by-gbas"}},[t._v("#")]),t._v(" RGB Translation by GBAs")]),t._v(" "),a("p",[t._v("Even though GBA is described to be compatible to CGB games, most CGB\ngames are completely unplayable on older GBAs because most colors are\ninvisible (black). Of course, colors such like Black and White will\nappear the same on both CGB and GBA, but medium intensities are arranged\ncompletely different. Intensities in range 00h..07h are invisible/black\n(unless eventually under best sunlight circumstances, and when gazing at\nthe screen under obscure viewing angles), unfortunately, these\nintensities are regularly used by most existing CGB games for medium and\ndarker colors.")]),t._v(" "),a("p",[t._v("Newer CGB games may avoid this effect by changing palette data when\ndetecting GBA hardware ("),a("a",{attrs:{href:"#detecting-cgb-and-gba-functions"}},[t._v("see\nhow")]),t._v(").\nBased on measurement of GBC and GBA palettes using the "),a("a",{attrs:{href:"https://github.com/pinobatch/240p-test-mini/tree/master/gameboy",target:"_blank",rel:"noopener noreferrer"}},[t._v("144p Test\nSuite"),a("OutboundLink")],1),t._v(" ROM, a fairly close approximation is GBA = GBC * 3/4 + 8h for\neach R,G,B intensity. The result isn't quite perfect, and it may turn\nout that the color mixing is different also; anyways, it'd be still\nways better than no conversion.")]),t._v(" "),a("p",[t._v("This problem with low brightness levels does not affect later GBA SP\nunits and Game Boy Player. Thus ideally, the player should have control\nof this brightness correction.")]),t._v(" "),a("h2",{attrs:{id:"lcd-oam-dma-transfers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-oam-dma-transfers"}},[t._v("#")]),t._v(" LCD OAM DMA Transfers")]),t._v(" "),a("h4",{attrs:{id:"ff46-dma-dma-transfer-and-start-address-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff46-dma-dma-transfer-and-start-address-r-w"}},[t._v("#")]),t._v(" FF46 - DMA (DMA Transfer and Start Address) (R/W)")]),t._v(" "),a("p",[t._v("Writing to this register launches a DMA transfer from ROM or RAM to OAM\n(Object Attribute Memory). The written value specifies the\ntransfer source address divided by $100, that is, source and destination are:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Source:      $XX00-$XX9F   ;XX = $00 to $DF\nDestination: $FE00-$FE9F\n")])])]),a("p",[t._v("The transfer takes 160 machine cycles: 152 microseconds in normal speed\nor 76 microseconds in CGB Double Speed Mode. On DMG, during this time,\nthe CPU can access only HRAM (memory at $FF80-$FFFE); on CGB, the bus used\nby the source area cannot be used (this isn't understood well at the\nmoment; it's recommended to assume same behavior as DMG). For this\nreason, the programmer must copy a short procedure into HRAM, and use\nthis procedure to start the transfer from inside HRAM, and wait until\nthe transfer has finished:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" run_dma:\n  ld a, start address / $100\n  ldh  [$FF46],a ;start DMA transfer (starts right after instruction)\n  ld  a,$28      ;delay...\n wait:           ;total 4x40 cycles, approx 160 μs\n  dec a          ;1 cycle\n  jr  nz,wait    ;3 cycles\n  ret\n")])])]),a("p",[t._v("Because sprites are not displayed while an OAM DMA transfer is in progress, most\nprograms execute this procedure from inside their VBlank\nhandler. But it is also possible to execute it during display redraw (Modes 2 and 3),\nallowing to display more than 40 sprites on the screen (that is, for\nexample 40 sprites in the top half, and other 40 sprites in the bottom half of\nthe screen), at the cost of a couple lines that lack sprites due to the fact that\nduring those couple lines the PPU reads OAM as $FF. Besides, graphic glitches may\nhappen if an OAM DMA transfer is started during Mode 3.")]),t._v(" "),a("p",[t._v("A more compact procedure is")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" run_dma:  ; This part is in ROM\n  ld a, start address / $100\n  ld bc, $2946  ; B: wait time; C: OAM trigger\n  jp run_dma_hrampart\n\n run_dma_hrampart:\n  ldh [$FF00+c], a\n wait:\n  dec b\n  jr nz,wait\n  ret\n")])])]),a("p",[t._v("which should be called with a = start address / $100, bc = $2946. This\nsaves 5 bytes of HRAM, but is slightly slower in most cases due to\nthe jump into the HRAM part.")]),t._v(" "),a("h2",{attrs:{id:"lcd-vram-dma-transfers-cgb-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-vram-dma-transfers-cgb-only"}},[t._v("#")]),t._v(" LCD VRAM DMA Transfers (CGB only)")]),t._v(" "),a("h4",{attrs:{id:"ff51-hdma1-new-dma-source-high-w-ff52-hdma2-new-dma-source-low-w-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff51-hdma1-new-dma-source-high-w-ff52-hdma2-new-dma-source-low-w-cgb-mode-only"}},[t._v("#")]),t._v(" FF51 - HDMA1 (New DMA Source, High) (W), FF52 - HDMA2 (New DMA Source, Low) (W) - CGB Mode Only")]),t._v(" "),a("p",[t._v("These two registers specify the address at which the transfer will read\ndata from. Normally, this should be either in ROM, SRAM or WRAM, thus\neither in range 0000-7FF0 or A000-DFF0. [Note: this has yet to be\ntested on Echo RAM, OAM, FEXX, IO and HRAM]. Trying to specify a source\naddress in VRAM will cause garbage to be copied.")]),t._v(" "),a("p",[t._v("The four lower bits of this address will be ignored and treated as 0.")]),t._v(" "),a("h4",{attrs:{id:"ff53-hdma3-new-dma-destination-high-w-ff54-hdma4-new-dma-destination-low-w-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff53-hdma3-new-dma-destination-high-w-ff54-hdma4-new-dma-destination-low-w-cgb-mode-only"}},[t._v("#")]),t._v(" FF53 - HDMA3 (New DMA Destination, High) (W), FF54 - HDMA4 (New DMA Destination, Low) (W) - CGB Mode Only")]),t._v(" "),a("p",[t._v("These two registers specify the address within 8000-9FF0 to which the\ndata will be copied. Only bits 12-4 are respected; others are ignored.\nThe four lower bits of this address will be ignored and treated as 0.")]),t._v(" "),a("h4",{attrs:{id:"ff55-hdma5-new-dma-length-mode-start-w-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff55-hdma5-new-dma-length-mode-start-w-cgb-mode-only"}},[t._v("#")]),t._v(" FF55 - HDMA5 (New DMA Length/Mode/Start) (W) - CGB Mode Only")]),t._v(" "),a("p",[t._v("These registers are used to initiate a DMA transfer from ROM or RAM to\nVRAM. The Source Start Address may be located at 0000-7FF0 or A000-DFF0,\nthe lower four bits of the address are ignored (treated as zero). The\nDestination Start Address may be located at 8000-9FF0, the lower four\nbits of the address are ignored (treated as zero), the upper 3 bits are\nignored either (destination is always in VRAM).")]),t._v(" "),a("p",[t._v("Writing to this register starts the transfer, the lower 7 bits of which\nspecify the Transfer Length (divided by 10h, minus 1), that is, lengths of\n10h-800h bytes can be defined by the values 00h-7Fh. The upper bit\nindicates the Transfer Mode:")]),t._v(" "),a("h5",{attrs:{id:"bit-7-0-general-purpose-dma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bit-7-0-general-purpose-dma"}},[t._v("#")]),t._v(" Bit 7 = 0 - General Purpose DMA")]),t._v(" "),a("p",[t._v("When using this transfer method,\nall data is transferred at once. The execution of the program is halted\nuntil the transfer has completed. Note that the General Purpose DMA\nblindly attempts to copy the data, even if the LCD controller is\ncurrently accessing VRAM. So General Purpose DMA should be used only if\nthe Display is disabled, or during VBlank, or (for rather short blocks)\nduring HBlank. The execution of the program continues when the transfer\nhas been completed, and FF55 then contains a value of FFh.")]),t._v(" "),a("h5",{attrs:{id:"bit-7-1-hblank-dma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bit-7-1-hblank-dma"}},[t._v("#")]),t._v(" Bit 7 = 1 - HBlank DMA")]),t._v(" "),a("p",[t._v('The HBlank DMA transfers 10h bytes of\ndata during each HBlank, that is, at LY=0-143, no data is transferred during\nVBlank (LY=144-153), but the transfer will then continue at LY=00. The\nexecution of the program is halted during the separate transfers, but\nthe program execution continues during the "spaces" between each data\nblock. Note that the program should not change the Destination VRAM bank\n(FF4F), or the Source ROM/RAM bank (in case data is transferred from\nbankable memory) until the transfer has completed! (The transfer should\nbe paused as described below while the banks are switched)')]),t._v(" "),a("p",[t._v('Reading from Register FF55 returns the remaining length (divided by 10h,\nminus 1), a value of 0FFh indicates that the transfer has completed. It\nis also possible to terminate an active HBlank transfer by writing zero\nto Bit 7 of FF55. In that case reading from FF55 will return how many\n$10 "blocks" remained (minus 1) in the lower 7 bits, but Bit 7 will\nbe read as "1". Stopping the transfer doesn\'t set HDMA1-4 to $FF.')]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("HBlank DMA should not be started (write to FF55) during a HBlank\nperiod (STAT mode 0).")]),t._v(" "),a("p",[t._v("If the transfer's destination address overflows, the transfer stops\nprematurely. [Note: what's the state of the registers if this happens\n?]")])]),t._v(" "),a("h4",{attrs:{id:"confirming-if-the-dma-transfer-is-active"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#confirming-if-the-dma-transfer-is-active"}},[t._v("#")]),t._v(" Confirming if the DMA Transfer is Active")]),t._v(" "),a("p",[t._v("Reading Bit 7 of FF55 can be used to confirm if the DMA transfer is\nactive (1=Not Active, 0=Active). This works under any circumstances -\nafter completion of General Purpose, or HBlank Transfer, and after\nmanually terminating a HBlank Transfer.")]),t._v(" "),a("h4",{attrs:{id:"transfer-timings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-timings"}},[t._v("#")]),t._v(" Transfer Timings")]),t._v(" "),a("p",[t._v('In both Normal Speed and Double Speed Mode it takes about 8 μs to\ntransfer a block of 10h bytes. That are 8 tstates in Normal Speed Mode,\nand 16 "fast" tstates in Double Speed Mode. Older MBC controllers\n(like MBC1-4) and slower ROMs are not guaranteed to support General\nPurpose or HBlank DMA, that\'s because there are always 2 bytes\ntransferred per microsecond (even if the itself program runs it Normal\nSpeed Mode).')]),t._v(" "),a("h2",{attrs:{id:"vram-tile-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-tile-data"}},[t._v("#")]),t._v(" VRAM Tile Data")]),t._v(" "),a("p",[t._v("Tile data is stored in VRAM in the memory area at $8000-$97FF; with each tile\ntaking 16 bytes, this area defines data for 384 tiles. In CGB Mode,\nthis is doubled (768 tiles) because of the two VRAM banks.")]),t._v(" "),a("p",[t._v("Each tile has 8x8 pixels and has a color depth of 4 colors/gray\nshades. Tiles can be displayed as part of the Background/Window maps,\nand/or as OBJ tiles (foreground sprites). Note that OBJs\ndon't use color 0 - it's transparent instead.")]),t._v(" "),a("p",[t._v('There are three "blocks" of 128 tiles each:')]),t._v(" "),a("ul",[a("li",[t._v("Block 0 is $8000-$87FF")]),t._v(" "),a("li",[t._v("Block 1 is $8800-$8FFF")]),t._v(" "),a("li",[t._v("Block 2 is $9000-$97FF")])]),t._v(" "),a("p",[t._v('Tiles are always indexed using a 8-bit integer, but the addressing\nmethod may differ. The "$8000 method" uses $8000 as its base pointer\nand uses an unsigned addressing, meaning that tiles 0-127 are in block\n0, and tiles 128-255 are in block 1. The "$8800 method" uses $9000 as\nits base pointer and uses a signed addressing, meaning that tiles 0-127\nare in block 2, and tiles -128 to -1 are in block 1, or to put it differently,\n"$8800 addressing" takes tiles 0-127 from block 2\nand tiles 128-255 from block 1. (You can notice that block 1 is shared\nby both addressing methods)')]),t._v(" "),a("p",[t._v('Sprites always use "$8000 addressing", but the BG and Window can use either\nmode, controlled by '),a("a",{attrs:{href:"#lcdc-4-bg-and-window-tile-data-area"}},[t._v("LCDC bit\n4")]),t._v(".")]),t._v(" "),a("p",[t._v("Each tile occupies 16 bytes, where each line is represented by 2 bytes:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Byte 0-1  Topmost Line (Top 8 pixels)\nByte 2-3  Second Line\netc.\n")])])]),a("p",[t._v("For each line, the first byte specifies the least significant bit of the\ncolor ID of each pixel, and the second byte specifies the most significant bit.\nIn both bytes, bit 7 represents the leftmost pixel, and\nbit 0 the rightmost. For example: let's say you have $57 $36 (in\nthis order in memory), which in binary are 01010111 and 00110110.\nTo obtain the color ID for the leftmost pixel,\nyou take bit 7 of both bytes: 0, and 0. Thus the index is binary 00 = 0. For\nthe second pixel, repeat with bit 6: 1, and 0. Thus the index is binary 01 =\n1 (remember to flip the order of the bits!). If you repeat the\noperation you'll find that the IDs for the eight pixels are 0 1 2 3 0 3\n3 1.")]),t._v(" "),a("p",[t._v("A more visual explanation can be found\n"),a("a",{attrs:{href:"https://www.huderlem.com/demos/gameboy2bpp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("So, each pixel has a color ID of 0 to 3. The color\nnumbers are translated into real colors (or gray shades) depending on\nthe current palettes, except that when the tile is used in a OBJ the\ncolor ID 0 means transparent. The palettes are defined through registers\n"),a("a",{attrs:{href:"#ff47-bgp-bg-palette-data-r-w-non-cgb-mode-only"}},[t._v("BGP")]),t._v(",\n"),a("a",{attrs:{href:"#ff48-obp0-object-palette-0-data-r-w-non-cgb-mode-only"}},[t._v("OBP0")]),t._v("\nand\n"),a("a",{attrs:{href:"#ff49-obp1-object-palette-1-data-r-w-non-cgb-mode-only"}},[t._v("OBP1")]),t._v("\n(Non CGB Mode), and\n"),a("a",{attrs:{href:"#ff68-bcps-bgpi-background-color-palette-specification-or-background-palette-index-cgb-mode-only"}},[t._v("BCPS/BGPI")]),t._v(",\n"),a("a",{attrs:{href:"#ff69-bcpd-bgpd-background-color-palette-data-or-background-palette-data-cgb-mode-only"}},[t._v("BCPD/BGPD")]),t._v(",\n"),a("a",{attrs:{href:"#ff6a-ocps-obpi-object-color-palette-specification-or-sprite-palette-index-ff6b-ocpd-obpd-object-color-palette-data-or-sprite-palette-data-both-cgb-mode-only"}},[t._v("OCPS/OBPI and\nOCPD/OBPD")]),t._v("\n(CGB Mode).")]),t._v(" "),a("h2",{attrs:{id:"vram-background-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-background-maps"}},[t._v("#")]),t._v(" VRAM Background Maps")]),t._v(" "),a("p",[t._v("The Game Boy contains two 32x32 tile maps in VRAM at\naddresses "),a("code",[t._v("$9800-$9BFF")]),t._v(" and "),a("code",[t._v("$9C00-$9FFF")]),t._v(". They are known as background tile maps. Any of these maps can be used to\ndisplay the Background or the Window.")]),t._v(" "),a("h4",{attrs:{id:"bg-map-tile-indexes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bg-map-tile-indexes"}},[t._v("#")]),t._v(" BG Map Tile Indexes")]),t._v(" "),a("p",[t._v("Each background tile map contains the 1-byte indexes of the\ntiles to be displayed.")]),t._v(" "),a("p",[t._v("Tiles are obtained from the Tile Data Table using either of the two\naddressing modes (described "),a("a",{attrs:{href:"#vram-tile-data"}},[t._v("above")]),t._v("), which\ncan be selected via LCDC register.")]),t._v(" "),a("p",[t._v("As one background tile has a size of 8x8 pixels, the BG maps may hold a\npicture of 256x256 pixels, and an area of 160x144 pixels of this picture\ncan be displayed on the LCD screen.")]),t._v(" "),a("h4",{attrs:{id:"bg-map-attributes-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bg-map-attributes-cgb-mode-only"}},[t._v("#")]),t._v(" BG Map Attributes (CGB Mode only)")]),t._v(" "),a("p",[t._v("In CGB Mode, an additional map of 32x32 bytes is stored in VRAM Bank 1\n(each byte defines attributes for the corresponding tile-number map\nentry in VRAM Bank 0, that is, 1:9800 defines the attributes for the tile at\n0:9800):")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7    BG-to-OAM Priority         (0=Use OAM Priority bit, 1=BG Priority)\nBit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\nBit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\nBit 4    Not used\nBit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\nBit 2-0  Background Palette number  (BGP0-7)\n")])])]),a("p",[t._v("When Bit 7 is set, the corresponding BG tile will have priority above\nall OBJs (regardless of the priority bits in OAM memory). There's also\na Master Priority flag in LCDC register Bit 0 which overrides all other\npriority bits when cleared.")]),t._v(" "),a("p",[t._v("Note that, if the map entry at "),a("code",[t._v("0:9800")]),t._v(" is tile $2A, the attribute at\n"),a("code",[t._v("1:9800")]),t._v(" doesn't define properties for ALL tiles $2A on-screen, but only\nthe one at "),a("code",[t._v("0:9800")]),t._v("!")]),t._v(" "),a("h4",{attrs:{id:"background-bg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background-bg"}},[t._v("#")]),t._v(" Background (BG)")]),t._v(" "),a("p",[t._v("The "),a("a",{attrs:{href:"#ff42-scy-scroll-y-r-w-ff43-scx-scroll-x-r-w"}},[t._v("SCY and SCX")]),t._v(" registers can be\nused to scroll the background, allowing to select the origin of the visible\n160x144 pixel area within the total 256x256 pixel background map.\nThe Background visible area wraps around the Background map (that is, when part of\nthe visible area goes beyond the map edge, it starts displaying the opposite side of the map).")]),t._v(" "),a("p",[t._v("Whether the background is displayed can be toggled using\n"),a("a",{attrs:{href:"#lcdc-0-bg-and-window-enable-priority"}},[t._v("LCDC bit 0")]),t._v(", except on CGB in CGB Mode,\nwhere it's always drawn.")]),t._v(" "),a("h4",{attrs:{id:"window-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-2"}},[t._v("#")]),t._v(" Window")]),t._v(" "),a("p",[t._v("Besides the Background, there is also a Window overlaying it.\nThe content of the Window is not scrollable; it is always\ndisplayed starting at the top left tile of its tilemap. The only way to adjust the Window\nis by modifying its position on the screen, which is done via the WX and WY registers. The screen\ncoordinates of the top left corner of the Window are (WX-7,WY). The tiles\nfor the Window are stored in the Tile Data Table. Both the Background\nand the Window share the same Tile Data Table.")]),t._v(" "),a("p",[t._v("Whether the Window is displayed can be toggled using\n"),a("a",{attrs:{href:"#lcdc-5-window-enable"}},[t._v("LCDC bit 5")]),t._v(". Enabling the Window makes\n"),a("a",{attrs:{href:"#lcd-status-register"}},[t._v("Mode 3")]),t._v(" slightly longer on scanlines where it's visible.\n(See "),a("a",{attrs:{href:"#ff4a-wy-window-y-position-r-w-ff4b-wx-window-x-position-7-r-w"}},[t._v("above")]),t._v('\nfor the definition of "Window visibility".)')]),t._v(" "),a("h2",{attrs:{id:"vram-banks-cgb-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-banks-cgb-only"}},[t._v("#")]),t._v(" VRAM Banks (CGB only)")]),t._v(" "),a("p",[t._v("The CGB has twice the VRAM of the DMG, but it is banked and either bank\nhas a different purpose.")]),t._v(" "),a("h4",{attrs:{id:"ff4f-vbk-cgb-mode-only-vram-bank-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff4f-vbk-cgb-mode-only-vram-bank-r-w"}},[t._v("#")]),t._v(" FF4F - VBK - CGB Mode Only - VRAM Bank (R/W)")]),t._v(" "),a("p",[t._v("This register can be written to to change VRAM banks. Only bit 0\nmatters, all other bits are ignored.")]),t._v(" "),a("h4",{attrs:{id:"vram-bank-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-bank-1"}},[t._v("#")]),t._v(" VRAM bank 1")]),t._v(" "),a("p",[t._v("VRAM bank 1 is split like VRAM bank 0 ; 8000-97FF also stores tiles\n(just like in bank 0), which can be accessed the same way as (and at the\nsame time as) bank 0 tiles. 9800-9FFF contains the attributes for the\ncorresponding Tile Maps.")]),t._v(" "),a("p",[t._v("Reading from this register will return the number of the currently\nloaded VRAM bank in bit 0, and all other bits will be set to 1.")]),t._v(" "),a("h2",{attrs:{id:"vram-sprite-attribute-table-oam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-sprite-attribute-table-oam"}},[t._v("#")]),t._v(" VRAM Sprite Attribute Table (OAM)")]),t._v(" "),a("p",[t._v("The Game Boy PPU can display up to 40 sprites either in 8x8 or\nin 8x16 pixels. Because of a limitation of hardware, only ten sprites\ncan be displayed per scan line. Sprite tiles have the same format as\nBG tiles, but they are taken from the Sprite Tiles Table located at\n$8000-8FFF and have unsigned numbering.")]),t._v(" "),a("p",[t._v("Sprite attributes reside in the Sprite Attribute Table (OAM - Object\nAttribute Memory) at $FE00-FE9F. Each of the 40 entries consists of\nfour bytes with the following meanings:")]),t._v(" "),a("h4",{attrs:{id:"byte0-y-position"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte0-y-position"}},[t._v("#")]),t._v(" Byte0 - Y Position")]),t._v(" "),a("p",[t._v("Y = Sprite's vertical position on the screen + 16. So for example,\nY=0 hides a sprite,\nY=2 hides a 8x8 sprite but displays the last two rows of a 8x16 sprite,\nY=16 displays a sprite at the top of the screen,\nY=144 displays a 8x16 sprite aligned with the bottom of the screen,\nY=152 displays a 8x8 sprite aligned with the bottom of the screen,\nY=154 displays the first six rows of a sprite at the bottom of the screen,\nY=160 hides a sprite.")]),t._v(" "),a("h4",{attrs:{id:"byte1-x-position"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte1-x-position"}},[t._v("#")]),t._v(" Byte1 - X Position")]),t._v(" "),a("p",[t._v("X = Sprite's horizontal position on the screen + 8. This works similarly\nto the examples above, except that the width of a sprite is always 8. An\noff-screen value (X=0 or X>=168) hides the sprite, but the sprite still\naffects the priority ordering, thus other sprites with lower priority may be\nleft out due to the ten sprites limit per scan-line.\nA better way to hide a sprite is to set its Y-coordinate off-screen.")]),t._v(" "),a("h4",{attrs:{id:"byte-2-tile-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte-2-tile-index"}},[t._v("#")]),t._v(" Byte 2 - Tile Index")]),t._v(" "),a("p",[t._v('In 8x8 mode (LCDC bit 2 = 0), this byte specifies the sprite\'s only tile index ($00-$FF).\nThis unsigned value selects a tile from the memory area at $8000-$8FFF.\nIn CGB Mode this could be either in\nVRAM bank 0 or 1, depending on bit 3 of the following byte.\nIn 8x16 mode (LCDC bit 2 = 1), the memory area at $8000-$8FFF is still interpreted\nas a series of 8x8 tiles, where every 2 tiles form a sprite. In this mode, this byte\nspecifies the index of the first (top) tile of the sprite. This is enforced by the\nhardware: the least significant bit of the tile index is ignored; that is, the top 8x8\ntile is "NN & $FE", and the bottom 8x8 tile is "NN | $01".')]),t._v(" "),a("h4",{attrs:{id:"byte3-attributes-flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte3-attributes-flags"}},[t._v("#")]),t._v(" Byte3 - Attributes/Flags:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit7   BG and Window over OBJ (0=No, 1=BG and Window colors 1-3 over the OBJ)\n Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n")])])]),a("h4",{attrs:{id:"sprite-priorities-and-conflicts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprite-priorities-and-conflicts"}},[t._v("#")]),t._v(" Sprite Priorities and Conflicts")]),t._v(" "),a("p",[t._v("During each scanline's OAM scan, the PPU compares LY to each\nsprite's Y position to find the 10 sprites on that line that appear\nfirst in OAM ($FE00-$FE03 being the first). It discards the rest,\ndisplaying only those 10 sprites on that line.\nTo keep unused sprites from affecting onscreen sprites, set their Y\ncoordinate to Y = 0 or Y >= 160 (144 + 16) (Note: Y <= 8 also works\nif sprite size is set to 8x8). Just setting the X coordinate to X = 0 or\nX >= 168 (160 + 8) on a sprite will hide it, but it will still count\ntowards the 10 sprite limit per scanline, possibly causing another sprite\nthat appears later in OAM to be left undisplayed.")]),t._v(" "),a("p",[t._v("If using BGB, in the VRAM viewer - OAM tab, hover your\nmouse over the small screen to highlight the sprites on a line. Sprites\nhidden due to the limitation will be highlighted in red.")]),t._v(" "),a("p",[t._v("When these 10 sprites overlap, the highest priority one will appear\nabove all others, etc. (Thus, no Z-fighting.) In Non-CGB mode, the smaller the X\ncoordinate, the higher the priority. When X coordinates are the same, sprites located\nfirst in OAM have a higher priority. In CGB mode, only the sprite's location in OAM\ndetermines its priority.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v('Priority among opaque pixels that overlap is determined using the rules explained\nabove. After the pixel with the highest priority has been determined,\nthe "BG and Window over OBJ" attribute of '),a("em",[t._v("only")]),t._v(' that pixel is honored (or disregarded if\nthis is a transparent pixel, i.e. a pixel with color ID zero). Thus if a sprite with a\nhigher priority but with "BG and Window over OBJ" toggled on\noverlaps a sprite with a lower priority and a nonzero background\npixel, the background pixel is displayed regardless of the\nlower-priority sprite\'s "BG and Window over OBJ" attribute.')])]),t._v(" "),a("h4",{attrs:{id:"writing-data-to-oam-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-data-to-oam-memory"}},[t._v("#")]),t._v(" Writing Data to OAM Memory")]),t._v(" "),a("p",[t._v("The recommended method is to write the data to normal RAM first, and to\ncopy that RAM to OAM by using the DMA transfer function, initiated\nthrough DMA register (FF46). Besides, it is also possible to\nwrite data directly to the OAM area by using normal LD instructions, but this\nworks only during the HBlank and VBlank periods. The current state of\nthe LCD controller can be read out from the STAT register (FF41).")]),t._v(" "),a("h2",{attrs:{id:"accessing-vram-and-oam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessing-vram-and-oam"}},[t._v("#")]),t._v(" Accessing VRAM and OAM")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("When the PPU is drawing the screen it is directly reading\nfrom Video Memory (VRAM) and from the Sprite Attribute Table (OAM).\nDuring these periods the Game Boy CPU may not access VRAM and OAM.\nThat means that any attempts to write to VRAM or OAM are ignored (data\nremains unchanged). And any attempts to read from VRAM or OAM will return\nundefined data (typically $FF).")]),t._v(" "),a("p",[t._v("For this reason the program should verify if VRAM/OAM is accessible\nbefore actually reading or writing to it. This is usually done by\nreading the Mode bits from the STAT Register (FF41). When doing this (as\ndescribed in the examples below) you should take care that no interrupts\noccur between the wait loops and the following memory access - the\nmemory is guaranteed to be accessible only for a few cycles just\nafter the wait loops have completed.")])]),t._v(" "),a("h4",{attrs:{id:"vram-memory-area-at-8000-9fff-is-accessible-during-modes-0-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-memory-area-at-8000-9fff-is-accessible-during-modes-0-2"}},[t._v("#")]),t._v(" VRAM (memory area at $8000-$9FFF) is accessible during Modes 0-2")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Mode 0 - HBlank Period,\nMode 1 - VBlank Period, and\nMode 2 - Searching OAM Period\n")])])]),a("p",[t._v("A typical procedure that waits for accessibility of VRAM would be:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ld   hl,$FF41     ;-STAT Register\n.wait:           ;\nbit  1,[hl]       ; Wait until Mode is 0 or 1\njr   nz,.wait    ;\n")])])]),a("p",[t._v("Even if the procedure gets executed at the "),a("em",[t._v("end")]),t._v(" of Mode 0 or 1, it is\nstill safe to assume that VRAM can be accessed for a few more cycles\nbecause in either case the following period is Mode 2, which allows\naccess to VRAM also. However, be careful about STAT interrupts or\nother interrupts that could cause the PPU to be back in Mode 3 by the\ntime it returns. In CGB Mode an alternate method to write data to VRAM\nis to use the HDMA Function (FF51-FF55).")]),t._v(" "),a("p",[t._v("If you do not require any STAT interrupts, another way to synchronize to the\nstart of Mode 0 is to disable all the individual STAT interrupts except Mode 0\n(STAT bit 3), enable STAT interrupts (IE bit 1), disable IME (by executing "),a("code",[t._v("di")]),t._v("),\nand use the "),a("code",[t._v("halt")]),t._v(" instruction. This allows\nuse of the entire Mode 0 on one line and Mode 2 on the following line,\nwhich sum to 165 to 288 dots. For comparison, at single speed (4 dots\nper machine cycle), a copy from stack that takes\n9 cycles per 2 bytes can push 8 bytes (half a tile) in 144 dots, which\nfits within the worst case timing for mode 0+2.")]),t._v(" "),a("h4",{attrs:{id:"oam-memory-area-at-fe00-fe9f-is-accessible-during-modes-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oam-memory-area-at-fe00-fe9f-is-accessible-during-modes-0-1"}},[t._v("#")]),t._v(" OAM (memory area at $FE00-$FE9F) is accessible during Modes 0-1")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Mode 0 - HBlank Period\nMode 1 - VBlank Period\n")])])]),a("p",[t._v("During those modes, OAM can be accessed directly or by doing a DMA\ntransfer (FF46). Outside those modes, DMA out-prioritizes the PPU in\naccessing OAM, and the PPU will read $FF from OAM during that time.")]),t._v(" "),a("p",[t._v("A typical\nprocedure that waits for accessibility of OAM would be:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" ld   hl,0FF41h    ; STAT Register\n@@wait1:           ;\n bit  1,[hl]       ; Wait until Mode is -NOT- 0 or 1\n jr   z,@@wait1    ;\n@@wait2:           ;\n bit  1,[hl]       ; Wait until Mode 0 or 1 -BEGINS- (but we know that Mode 0 is what will begin)\n jr   nz,@@wait2   ;\n")])])]),a("p",[t._v("The two wait loops ensure that Mode 0 (and Mode 1 if we are at the end\nof a frame) will last for a few clock\ncycles after completion of the procedure. If we need to wait for the VBlank period, it would be\nbetter to skip the whole procedure, and use a STAT interrupt instead. In any case,\ndoing a DMA transfer is more efficient than writing to OAM directly.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("While the display is disabled, both VRAM and OAM are accessible.\nThe downside is that the screen is blank (white) during this\nperiod, so disabling the display would be recommended only during\ninitialization.")])]),t._v(" "),a("h2",{attrs:{id:"pixel-fifo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pixel-fifo"}},[t._v("#")]),t._v(" Pixel FIFO")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TERMINOLOGY")]),t._v(" "),a("p",[t._v("All references to a cycle are meant as T-cycles (4.19 MHz) and cycle\ncounts are doubled on CGB in double speed mode. When it is stated that a\ncertain action "),a("em",[t._v("lengthens mode 3")]),t._v(" it means that mode 0 (hblank) is\nshortened to make up for the additional time in mode 3, as shown in the following diagram.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"imgs/game-boy-lcd-refresh-diagram-2.svg",alt:"",title:"imgs/game-boy-lcd-refresh-diagram-2.svg"}})]),t._v(" "),a("h3",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v("FIFO stands for "),a("em",[t._v("First In, First Out")]),t._v(". The first pixel to be pushed to the\nFIFO is the first pixel to be popped off. In theory that sounds great,\nin practice there are a lot of intricacies.")]),t._v(" "),a("p",[t._v("There are two pixel FIFOs. One for background pixels and one for OAM\n(sprite) pixels. These two FIFOs are not shared. They are independent\nof each other. The two FIFOs are mixed only when popping items. Sprites\ntake priority unless they're transparent (color 0) which will be\nexplained in detail later. Each FIFO can hold up to 16 pixels. The FIFO\nand Pixel Fetcher work together to ensure that the FIFO always contains\nat least 8 pixels at any given time, as 8 pixels are required for the\nPixel Rendering operation to take place. Each FIFO is manipulated only\nduring mode 3 (pixel transfer).")]),t._v(" "),a("p",[t._v("Each pixel in the FIFO has four properties:")]),t._v(" "),a("ul",[a("li",[t._v("Color: a value between 0 and 3")]),t._v(" "),a("li",[t._v("Palette: on CGB a value between 0 and 7 and on DMG this only applies to sprites")]),t._v(" "),a("li",[t._v("Sprite Priority: on CGB this is the OAM index for the sprite and on DMG this doesn't exist")]),t._v(" "),a("li",[t._v("Background Priority: holds the value of the "),a("a",{attrs:{href:"#vram-sprite-attribute-table-oam"}},[t._v("OBJ-to-BG Priority")]),t._v(" bit")])]),t._v(" "),a("h3",{attrs:{id:"fifo-pixel-fetcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fifo-pixel-fetcher"}},[t._v("#")]),t._v(" FIFO Pixel Fetcher")]),t._v(" "),a("p",[t._v("The fetcher fetches a row of 8 background or window pixels and queues\nthem up to be mixed with sprite pixels. The pixel fetcher has 5 steps.\nThe first four steps take 2 cycles each and the fifth step is attempted\nevery cycle until it succeeds. The order of the steps are as follows:")]),t._v(" "),a("ul",[a("li",[t._v("Get tile")]),t._v(" "),a("li",[t._v("Get tile data low")]),t._v(" "),a("li",[t._v("Get tile data high")]),t._v(" "),a("li",[t._v("Sleep")]),t._v(" "),a("li",[t._v("Push")])]),t._v(" "),a("h4",{attrs:{id:"get-tile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tile"}},[t._v("#")]),t._v(" Get Tile")]),t._v(" "),a("p",[t._v("This step determines which background/window tile to fetch pixels from.\nBy default the tilemap used is the one at $9800 but certain conditions\ncan change that.")]),t._v(" "),a("p",[t._v("When LCDC.3 is enabled and the X coordinate of the current scanline is\nnot inside the window then tilemap $9C00 is used.")]),t._v(" "),a("p",[t._v("When LCDC.6 is enabled and the X coordinate of the current scanline is\ninside the window then tilemap $9C00 is used.")]),t._v(" "),a("p",[t._v("The fetcher keeps track of which X and Y coordinate of the tile it's on:")]),t._v(" "),a("p",[t._v("If the current tile is a window tile, the X coordinate for the window\ntile is used, otherwise the following formula is used to calculate\nthe X coordinate: ((SCX / 8) + fetcher's X coordinate) & $1F. Because of\nthis formula, fetcherX can be between 0 and 31.")]),t._v(" "),a("p",[t._v("If the current tile is a window tile, the Y coordinate for the window\ntile is used, otherwise the following formula is used to calculate\nthe Y coordinate: (currentScanline + SCY) & 255. Because of this formula,\nfetcherY can be between 0 and 159.")]),t._v(" "),a("p",[t._v("The fetcher's X and Y coordinate can then be used to get the tile from\nVRAM. However, if the PPU's access to VRAM is "),a("a",{attrs:{href:"#vram-access"}},[t._v("blocked")]),t._v("\nthen the value for the tile is read as $FF.")]),t._v(" "),a("p",[t._v("CGB can access both tile index and the attributes in the same clock\ncycle.")]),t._v(" "),a("h4",{attrs:{id:"get-tile-data-low"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tile-data-low"}},[t._v("#")]),t._v(" Get Tile Data Low")]),t._v(" "),a("p",[t._v("Check LCDC.4 for which tilemap to use. At this step CGB also needs to\ncheck which VRAM bank to use and check if the tile is flipped vertically.\nOnce the tilemap, VRAM and vertical flip is calculated the tile data\nis retrieved from VRAM. However, if the PPU's access to VRAM is\n"),a("a",{attrs:{href:"#vram-access"}},[t._v("blocked")]),t._v(" then the tile data is read as $FF.")]),t._v(" "),a("p",[t._v("The tile data retrieved in this step will be used in the push steps.")]),t._v(" "),a("h4",{attrs:{id:"get-tile-data-high"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tile-data-high"}},[t._v("#")]),t._v(" Get Tile Data High")]),t._v(" "),a("p",[t._v("Same as Get Tile Data Low except the tile address is incremented by 1.")]),t._v(" "),a("p",[t._v("The tile data retrieved in this step will be used in the push steps.")]),t._v(" "),a("p",[t._v("This also pushes a row of background/window pixels to the FIFO. This\nextra push is not part of the 8 steps, meaning there's 3 total chances to\npush pixels to the background FIFO every time the complete fetcher steps\nare performed.")]),t._v(" "),a("h4",{attrs:{id:"push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" Push")]),t._v(" "),a("p",[t._v('Pushes a row of background/window pixels to the FIFO. Since tiles are 8\npixels wide, a "row" of pixels is 8 pixels from the tile to be rendered\nbased on the X and Y coordinates calculated in the previous steps.')]),t._v(" "),a("p",[t._v("Pixels are only pushed to the background FIFO if it's empty.")]),t._v(" "),a("p",[t._v("This is where the tile data retrieved in the two Tile Data steps will\ncome in handy. Depending on if the tile is flipped horizontally the\npixels will be pushed to the background FIFO differently. If the tile\nis flipped horizontally the pixels will be pushed LSB first. Otherwise\nthey will be pushed MSB first.")]),t._v(" "),a("h4",{attrs:{id:"sleep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleep"}},[t._v("#")]),t._v(" Sleep")]),t._v(" "),a("p",[t._v("Do nothing.")]),t._v(" "),a("h4",{attrs:{id:"vram-access"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-access"}},[t._v("#")]),t._v(" VRAM Access")]),t._v(" "),a("p",[t._v("At various times during PPU operation read access to VRAM is blocked and\nthe value read is $FF:")]),t._v(" "),a("ul",[a("li",[t._v("LCD turning off")]),t._v(" "),a("li",[t._v("At scanline 0 on CGB when not in double speed mode")]),t._v(" "),a("li",[t._v("When switching from mode 3 to mode 0")]),t._v(" "),a("li",[t._v("On CGB when searching OAM and index 37 is reached")])]),t._v(" "),a("p",[t._v("At various times during PPU operation read access to VRAM is restored:")]),t._v(" "),a("ul",[a("li",[t._v("At scanline 0 on DMG and CGB when in double speed mode")]),t._v(" "),a("li",[t._v("On DMG when searching OAM and index 37 is reached")]),t._v(" "),a("li",[t._v("After switching from mode 2 (oam search) to mode 3 (pixel transfer)")])]),t._v(" "),a("p",[t._v("NOTE: These conditions are checked only when entering STOP mode and the\nPPU's access to VRAM is always restored upon leaving STOP mode.")]),t._v(" "),a("h3",{attrs:{id:"mode-3-operation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mode-3-operation"}},[t._v("#")]),t._v(" Mode 3 Operation")]),t._v(" "),a("p",[t._v("As stated before the pixel FIFO only operates during mode 3 (pixel\ntransfer). At the beginning of mode 3 both the background and OAM FIFOs\nare cleared.")]),t._v(" "),a("h4",{attrs:{id:"the-window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-window"}},[t._v("#")]),t._v(" The Window")]),t._v(" "),a("p",[t._v("When rendering the window the background FIFO is cleared and the fetcher\nis reset to step 1. When WX is 0 and the SCX & 7 > 0 mode 3 is shortened\nby 1 cycle.")]),t._v(" "),a("p",[t._v("When the window has already started rendering there is a bug that occurs\nwhen WX is changed mid-scanline. When the value of WX changes after the\nwindow has started rendering and the new value of WX is reached again,\na pixel with color value of 0 and the lowest priority is pushed onto the\nbackground FIFO.")]),t._v(" "),a("h4",{attrs:{id:"sprites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprites"}},[t._v("#")]),t._v(" Sprites")]),t._v(" "),a("p",[t._v("The following is performed for each sprite on the current scanline if\nLCDC.1 is enabled (this condition is ignored on CGB) and the X coordinate\nof the current scanline has a sprite on it. If those conditions are not\nmet then sprite fetching is "),a("a",{attrs:{href:"#sprite-fetch-abortion"}},[t._v("aborted")]),t._v(".")]),t._v(" "),a("p",[t._v("At this point the "),a("a",{attrs:{href:"#fifo-pixel-fetcher"}},[t._v("fetcher")]),t._v(" is advanced one step\nuntil it's at step 5 or until the background FIFO is not empty. Advancing\nthe fetcher one step here lengthens mode 3 by 1 cycle. This process may\nbe "),a("a",{attrs:{href:"#sprite-fetch-abortion"}},[t._v("aborted")]),t._v(" after the fetcher has advanced a\nstep.")]),t._v(" "),a("p",[t._v("When SCX & 7 > 0 and there is a sprite at X coordinate 0 of the current\nscanline then mode 3 is lengthened. The amount of cycles this lengthens\nmode 3 by is whatever the lower 3 bits of SCX are. After this penalty is\napplied object fetching may be aborted. Note that the timing of the\npenalty is not confirmed. It may happen before or after waiting for the\nfetcher. More research needs to be done.")]),t._v(" "),a("p",[t._v("After checking for sprites at X coordinate 0 the fetcher is advanced two\nsteps. The first advancement lengthens mode 3 by 1 cycle and the second\nadvancement lengthens mode 3 by 3 cycles. After each fetcher advancement\nthere is a chance for a sprite fetch abortion to occur.")]),t._v(" "),a("p",[t._v("The lower address for the row of pixels of the target object tile is now\nretrieved and lengthens mode 3 by 1 cycle. Once the address is retrieved\nthis is the last chance for sprite fetch abortion to occur. Exiting\nobject fetch lengthens mode 3 by 1 cycle. The upper address for the\ntarget object tile is now retrieved and does not shorten mode 3.")]),t._v(" "),a("p",[t._v("At this point "),a("a",{attrs:{href:"#vram-access"}},[t._v("VRAM Access")]),t._v(" is checked for the lower and\nupper addresses for the target object. Before any mixing is done, if the\nOAM FIFO doesn't have at least 8 pixels in it then transparent pixels\nwith the lowest priority are pushed onto the OAM FIFO. Once this is done\neach pixel of the target object row is checked. On CGB, horizontal flip\nis checked here. If the target object pixel is not white and the pixel in\nthe OAM FIFO "),a("em",[t._v("is")]),t._v(" white, or if the pixel in the OAM FIFO has higher\npriority than the target object's pixel, then the pixel in the OAM FIFO\nis replaced with the target object's properties.")]),t._v(" "),a("p",[t._v("Now it's time to "),a("a",{attrs:{href:"#pixel-rendering"}},[t._v("render a pixel")]),t._v("! The same process\ndescribed in Sprite Fetch Abortion is performed: a pixel is rendered and\nthe fetcher is advanced one step. This advancement lengthens mode 3 by 1\ncycle if the X coordinate of the current scanline is not 160. If the X\ncoordinate is 160 the PPU stops processing sprites (because they won't be\nvisible).")]),t._v(" "),a("p",[t._v("Everything in this section is repeated for every sprite on the current\nscanline unless it was decided that fetching should be aborted or the\nX coordinate is 160.")]),t._v(" "),a("h4",{attrs:{id:"pixel-rendering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pixel-rendering"}},[t._v("#")]),t._v(" Pixel Rendering")]),t._v(" "),a("p",[t._v("This is where the background FIFO and OAM FIFO are mixed. There are\nconditions where either a background pixel or a sprite pixel will have\ndisplay priority.")]),t._v(" "),a("p",[t._v("If there are pixels in the background and OAM FIFOs then a pixel is\npopped off each. If the OAM pixel is not transparent and LCDC.1 is\nenabled then the OAM pixel's background priority property is used if it's\nthe same or higher priority as the background pixel's background priority.")]),t._v(" "),a("p",[t._v("Pixels won't be pushed to the LCD if there is nothing in the background\nFIFO or the current pixel is pixel 160 or greater.")]),t._v(" "),a("p",[t._v("If LCDC.0 is disabled then the background is disabled on DMG and the\nbackground pixel won't have priority on CGB. When the background pixel\nis disabled the pixel color value will be 0, otherwise the color value\nwill be whatever color pixel was popped off the background FIFO. When the\npixel popped off the background FIFO has a color value other than 0 and\nit has priority then the sprite pixel will be discarded.")]),t._v(" "),a("p",[t._v("At this point, on DMG, the color of the pixel is retrieved from the BGP\nregister and pushed to the LCD. On CGB when "),a("a",{attrs:{href:"#cgb-palette-access"}},[t._v("palette access")]),t._v("\nis blocked a black pixel is pushed to the LCD.")]),t._v(" "),a("p",[t._v("When a sprite pixel has priority the color value is retrieved from the\npopped pixel from the OAM FIFO. On DMG the color for the pixel is\nretrieved from either the OBP1 or OBP0 register depending on the pixel's\npalette property. If the palette property is 1 then OBP1 is used,\notherwise OBP0 is used. The pixel is then pushed to the LCD. On CGB when\npalette access is blocked a black pixel is pushed to the LCD.")]),t._v(" "),a("p",[t._v("The pixel is then finally pushed to the LCD.")]),t._v(" "),a("h4",{attrs:{id:"cgb-palette-access"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgb-palette-access"}},[t._v("#")]),t._v(" CGB Palette Access")]),t._v(" "),a("p",[t._v("At various times during PPU operation read access to the CGB palette is\nblocked and a black pixel pushed to the LCD when rendering pixels:")]),t._v(" "),a("ul",[a("li",[t._v("LCD turning off")]),t._v(" "),a("li",[t._v("First HBlank of the frame")]),t._v(" "),a("li",[t._v("When searching OAM and index 37 is reached")]),t._v(" "),a("li",[t._v("After switching from mode 2 (oam search) to mode 3 (pixel transfer)")]),t._v(" "),a("li",[t._v("When entering HBlank (mode 0) and not in double speed mode, blocked 2 cycles later no matter what")])]),t._v(" "),a("p",[t._v("At various times during PPU operation read access to the CGB palette is\nrestored and pixels are pushed to the LCD normally when rendering pixels:")]),t._v(" "),a("ul",[a("li",[t._v("At the end of mode 2 (oam search)")]),t._v(" "),a("li",[t._v("For only 2 cycles when entering HBlank (mode 0) and in double speed mode")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("These conditions are checked only when entering STOP mode and the\nPPU's access to CGB palettes is always restored upon leaving STOP mode.")])]),t._v(" "),a("h4",{attrs:{id:"sprite-fetch-abortion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprite-fetch-abortion"}},[t._v("#")]),t._v(" Sprite Fetch Abortion")]),t._v(" "),a("p",[t._v("Sprite fetching may be aborted if LCDC.1 is disabled while the PPU is\nfetching an object from OAM. This abortion lengthens mode 3 by the amount\nof cycles the previous instruction took plus the residual cycles left for\nthe PPU to process. When OAM fetching is aborted a pixel is "),a("a",{attrs:{href:"#pixel-rendering"}},[t._v("rendered")]),t._v(",\nthe "),a("a",{attrs:{href:"#fifo-pixel-fetcher"}},[t._v("fetcher")]),t._v(" is advanced one step. This advancement\nlengthens mode 3 by 1 cycle if the current pixel is not 160. If the\ncurrent pixel is 160 the PPU stops processing sprites because they won't\nbe visible.")]),t._v(" "),a("h1",{attrs:{id:"sound-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-controller"}},[t._v("#")]),t._v(" Sound Controller")]),t._v(" "),a("p",[t._v("There are two sound channels connected to the output terminals SO1 and\nSO2. There is also a input terminal Vin connected to the cartridge. It\ncan be routed to either of both output terminals. Game Boy circuitry\nallows producing sound in four different ways:")]),t._v(" "),a("ul",[a("li",[t._v("Quadrangular wave patterns with sweep and envelope functions (CH1)")]),t._v(" "),a("li",[t._v("Quadrangular wave patterns with envelope functions (CH2)")]),t._v(" "),a("li",[t._v("Voluntary wave patterns from wave RAM (CH3)")]),t._v(" "),a("li",[t._v("White noise with an envelope function (CH4)")])]),t._v(" "),a("p",[t._v("These four sounds can be controlled independently and then mixed\nseparately for each of the output terminals.")]),t._v(" "),a("p",[t._v("Sound registers may be set at all times while producing sound.")]),t._v(" "),a("p",[t._v("(Sounds will have a 2.4% higher frequency on Super GB.)")]),t._v(" "),a("h2",{attrs:{id:"sound-channel-1-tone-sweep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-1-tone-sweep"}},[t._v("#")]),t._v(" Sound Channel 1 - Tone & Sweep")]),t._v(" "),a("h4",{attrs:{id:"ff10-nr10-channel-1-sweep-register-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff10-nr10-channel-1-sweep-register-r-w"}},[t._v("#")]),t._v(" FF10 - NR10 - Channel 1 Sweep register (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 6-4 - Sweep Time\n Bit 3   - Sweep Increase/Decrease\n            0: Addition    (frequency increases)\n            1: Subtraction (frequency decreases)\n Bit 2-0 - Number of sweep shift (n: 0-7)\n")])])]),a("p",[t._v("Sweep Time:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Value (binary)")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("000")]),t._v(" "),a("td",[t._v("sweep off - no freq change")])]),t._v(" "),a("tr",[a("td",[t._v("001")]),t._v(" "),a("td",[t._v("7.8 ms  (1/128Hz)")])]),t._v(" "),a("tr",[a("td",[t._v("010")]),t._v(" "),a("td",[t._v("15.6 ms (2/128Hz)")])]),t._v(" "),a("tr",[a("td",[t._v("011")]),t._v(" "),a("td",[t._v("23.4 ms (3/128Hz)")])]),t._v(" "),a("tr",[a("td",[t._v("100")]),t._v(" "),a("td",[t._v("31.3 ms (4/128Hz)")])]),t._v(" "),a("tr",[a("td",[t._v("101")]),t._v(" "),a("td",[t._v("39.1 ms (5/128Hz)")])]),t._v(" "),a("tr",[a("td",[t._v("110")]),t._v(" "),a("td",[t._v("46.9 ms (6/128Hz)")])]),t._v(" "),a("tr",[a("td",[t._v("111")]),t._v(" "),a("td",[t._v("54.7 ms (7/128Hz)")])])])]),t._v(" "),a("p",[t._v("The change of frequency (NR13,NR14) at each shift is calculated by the\nfollowing formula where X(0) is initial freq & X(t-1) is last freq:")]),t._v(" "),a("p",[t._v("X(t) = X(t-1) +/- X(t-1)/2^n`")]),t._v(" "),a("h4",{attrs:{id:"ff11-nr11-channel-1-sound-length-wave-pattern-duty-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff11-nr11-channel-1-sound-length-wave-pattern-duty-r-w"}},[t._v("#")]),t._v(" FF11 - NR11 - Channel 1 Sound length/Wave pattern duty (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7-6 - Wave Pattern Duty (Read/Write)\nBit 5-0 - Sound length data (Write Only) (t1: 0-63)\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Bits 7-6")]),t._v(" "),a("th",[t._v("Wave duty")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("%00")]),t._v(" "),a("td",[t._v("12.5% ("),a("code",[t._v("_-------_-------_-------")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[t._v("%01")]),t._v(" "),a("td",[t._v("25%   ("),a("code",[t._v("__------__------__------")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[t._v("%10")]),t._v(" "),a("td",[t._v("50%   ("),a("code",[t._v("____----____----____----")]),t._v(") (normal)")])]),t._v(" "),a("tr",[a("td",[t._v("%11")]),t._v(" "),a("td",[t._v("75%   ("),a("code",[t._v("______--______--______--")]),t._v(")")])])])]),t._v(" "),a("p",[t._v("Sound Length = (64-t1)*(1/256) seconds. The Length value is used only if\nBit 6 in NR14 is set.")]),t._v(" "),a("h4",{attrs:{id:"ff12-nr12-channel-1-volume-envelope-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff12-nr12-channel-1-volume-envelope-r-w"}},[t._v("#")]),t._v(" FF12 - NR12 - Channel 1 Volume Envelope (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 7-4 - Initial Volume of envelope (0-0Fh) (0=No Sound)\n Bit 3   - Envelope Direction (0=Decrease, 1=Increase)\n Bit 2-0 - Number of envelope sweep (n: 0-7)\n           (If zero, stop envelope operation.)\n")])])]),a("p",[t._v("Length of 1 step = n*(1/64) seconds")]),t._v(" "),a("h4",{attrs:{id:"ff13-nr13-channel-1-frequency-lo-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff13-nr13-channel-1-frequency-lo-write-only"}},[t._v("#")]),t._v(" FF13 - NR13 - Channel 1 Frequency lo (Write Only)")]),t._v(" "),a("p",[t._v("Lower 8 bits of 11 bit frequency (x). Next 3 bit are in NR14 ($FF14)")]),t._v(" "),a("h4",{attrs:{id:"ff14-nr14-channel-1-frequency-hi-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff14-nr14-channel-1-frequency-hi-r-w"}},[t._v("#")]),t._v(" FF14 - NR14 - Channel 1 Frequency hi (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)`\nBit 6   - Counter/consecutive selection (Read/Write)`\n          (1=Stop output when length in NR11 expires)`\nBit 2-0 - Frequency's higher 3 bits (x) (Write Only)`\n")])])]),a("p",[t._v("Frequency = 131072/(2048-x) Hz")]),t._v(" "),a("h2",{attrs:{id:"sound-channel-2-tone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-2-tone"}},[t._v("#")]),t._v(" Sound Channel 2 - Tone")]),t._v(" "),a("p",[t._v("This sound channel works exactly as channel 1, except that it doesn't\nhave a Tone Envelope/Sweep Register.")]),t._v(" "),a("h4",{attrs:{id:"ff16-nr21-channel-2-sound-length-wave-pattern-duty-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff16-nr21-channel-2-sound-length-wave-pattern-duty-r-w"}},[t._v("#")]),t._v(" FF16 - NR21 - Channel 2 Sound Length/Wave Pattern Duty (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7-6 - Wave Pattern Duty (Read/Write)`\nBit 5-0 - Sound length data (Write Only) (t1: 0-63)`\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Bits 7-6")]),t._v(" "),a("th",[t._v("Wave duty")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("%00")]),t._v(" "),a("td",[t._v("12.5% ("),a("code",[t._v("_-------_-------_-------")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[t._v("%01")]),t._v(" "),a("td",[t._v("25%   ("),a("code",[t._v("__------__------__------")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[t._v("%10")]),t._v(" "),a("td",[t._v("50%   ("),a("code",[t._v("____----____----____----")]),t._v(") (normal)")])]),t._v(" "),a("tr",[a("td",[t._v("%11")]),t._v(" "),a("td",[t._v("75%   ("),a("code",[t._v("______--______--______--")]),t._v(")")])])])]),t._v(" "),a("p",[t._v("Sound Length = (64-t1)*(1/256) seconds. The Length value is used only if\nBit 6 in NR24 is set.")]),t._v(" "),a("h4",{attrs:{id:"ff17-nr22-channel-2-volume-envelope-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff17-nr22-channel-2-volume-envelope-r-w"}},[t._v("#")]),t._v(" FF17 - NR22 - Channel 2 Volume Envelope (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7-4 - Initial Volume of envelope (0-0Fh) (0=No Sound)`\nBit 3   - Envelope Direction (0=Decrease, 1=Increase)`\nBit 2-0 - Number of envelope sweep (n: 0-7)`\n          (If zero, stop envelope operation.)`\n")])])]),a("p",[t._v("Length of 1 step = n*(1/64) seconds")]),t._v(" "),a("h4",{attrs:{id:"ff18-nr23-channel-2-frequency-lo-data-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff18-nr23-channel-2-frequency-lo-data-w"}},[t._v("#")]),t._v(" FF18 - NR23 - Channel 2 Frequency lo data (W)")]),t._v(" "),a("p",[t._v("Frequency's lower 8 bits of 11 bit data (x). Next 3 bits are in NR24\n($FF19).")]),t._v(" "),a("h4",{attrs:{id:"ff19-nr24-channel-2-frequency-hi-data-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff19-nr24-channel-2-frequency-hi-data-r-w"}},[t._v("#")]),t._v(" FF19 - NR24 - Channel 2 Frequency hi data (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)`\nBit 6   - Counter/consecutive selection (Read/Write)`\n          (1=Stop output when length in NR21 expires)`\nBit 2-0 - Frequency's higher 3 bits (x) (Write Only)`\n")])])]),a("p",[t._v("Frequency = 131072/(2048-x) Hz")]),t._v(" "),a("h2",{attrs:{id:"sound-channel-3-wave-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-3-wave-output"}},[t._v("#")]),t._v(" Sound Channel 3 - Wave Output")]),t._v(" "),a("p",[t._v("This channel can be used to output digital sound, the length of the\nsample buffer (Wave RAM) is limited to 32 digits. This sound channel can\nbe also used to output normal tones when initializing the Wave RAM by a\nsquare wave. This channel doesn't have a volume envelope register.")]),t._v(" "),a("h4",{attrs:{id:"ff1a-nr30-channel-3-sound-on-off-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1a-nr30-channel-3-sound-on-off-r-w"}},[t._v("#")]),t._v(" FF1A - NR30 - Channel 3 Sound on/off (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7 - Sound Channel 3 Off  (0=Stop, 1=Playback)  (Read/Write)\n")])])]),a("h4",{attrs:{id:"ff1b-nr31-channel-3-sound-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1b-nr31-channel-3-sound-length"}},[t._v("#")]),t._v(" FF1B - NR31 - Channel 3 Sound Length")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7-0 - Sound length (t1: 0 - 255)\n")])])]),a("p",[t._v("Sound Length = (256-t1)*(1/256) seconds This value is used only if Bit\n6 in NR34 is set.")]),t._v(" "),a("h4",{attrs:{id:"ff1c-nr32-channel-3-select-output-level-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1c-nr32-channel-3-select-output-level-r-w"}},[t._v("#")]),t._v(" FF1C - NR32 - Channel 3 Select output level (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bits 6-5 - Select output level (Read/Write)\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Bits 6-5")]),t._v(" "),a("th",[t._v("Output level")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("%00")]),t._v(" "),a("td",[t._v("Mute (No sound)")])]),t._v(" "),a("tr",[a("td",[t._v("%01")]),t._v(" "),a("td",[t._v("100% volume (Produce Wave Pattern RAM Data as it is)")])]),t._v(" "),a("tr",[a("td",[t._v("%10")]),t._v(" "),a("td",[t._v("50% volume (Produce Wave Pattern RAM data shifted once to the right)")])]),t._v(" "),a("tr",[a("td",[t._v("%11")]),t._v(" "),a("td",[t._v("25% volume (Produce Wave Pattern RAM data shifted twice to the right)")])])])]),t._v(" "),a("h4",{attrs:{id:"ff1d-nr33-channel-3-frequency-s-lower-data-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1d-nr33-channel-3-frequency-s-lower-data-w"}},[t._v("#")]),t._v(" FF1D - NR33 - Channel 3 Frequency's lower data (W)")]),t._v(" "),a("p",[t._v("Lower 8 bits of an 11 bit frequency (x).")]),t._v(" "),a("h4",{attrs:{id:"ff1e-nr34-channel-3-frequency-s-higher-data-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1e-nr34-channel-3-frequency-s-higher-data-r-w"}},[t._v("#")]),t._v(" FF1E - NR34 - Channel 3 Frequency's higher data (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)`\nBit 6   - Counter/consecutive selection (Read/Write)`\n          (1=Stop output when length in NR31 expires)`\nBit 2-0 - Frequency's higher 3 bits (x) (Write Only)`\n")])])]),a("p",[t._v("Frequency = 4194304/(64*(2048-x)) Hz = 65536/(2048-x) Hz")]),t._v(" "),a("h4",{attrs:{id:"ff30-ff3f-wave-pattern-ram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff30-ff3f-wave-pattern-ram"}},[t._v("#")]),t._v(" FF30-FF3F - Wave Pattern RAM")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Contents - Waveform storage for arbitrary sound data\n")])])]),a("p",[t._v("This storage area holds 32 4-bit samples that are played back, upper 4\nbits first.")]),t._v(" "),a("p",[t._v("Wave RAM should only be accessed while CH3 is disabled (NR30 bit 7\nreset), otherwise accesses will behave weirdly.")]),t._v(" "),a("p",[t._v("On almost all models, the byte will be written at the offset CH3 is\ncurrently reading. On GBA, the write will simply be ignored.")]),t._v(" "),a("h2",{attrs:{id:"sound-channel-4-noise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-4-noise"}},[t._v("#")]),t._v(" Sound Channel 4 - Noise")]),t._v(" "),a("p",[t._v('This channel is used to output white noise. This is done by randomly\nswitching the amplitude between high and low at a given frequency.\nDepending on the frequency the noise will appear "harder" or\n"softer".')]),t._v(" "),a("p",[t._v("It is also possible to influence the function of the random generator,\nso the that the output becomes more regular, resulting in a limited\nability to output Tone instead of Noise.")]),t._v(" "),a("h4",{attrs:{id:"ff20-nr41-channel-4-sound-length-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff20-nr41-channel-4-sound-length-r-w"}},[t._v("#")]),t._v(" FF20 - NR41 - Channel 4 Sound Length (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 5-0 - Sound length data (t1: 0-63)\n")])])]),a("p",[t._v("Sound Length = (64-t1)*(1/256) seconds The Length value is used only if\nBit 6 in NR44 is set.")]),t._v(" "),a("h4",{attrs:{id:"ff21-nr42-channel-4-volume-envelope-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff21-nr42-channel-4-volume-envelope-r-w"}},[t._v("#")]),t._v(" FF21 - NR42 - Channel 4 Volume Envelope (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 7-4 - Initial Volume of envelope (0-0Fh) (0=No Sound)\n Bit 3   - Envelope Direction (0=Decrease, 1=Increase)\n Bit 2-0 - Number of envelope sweep (n: 0-7)`\n           (If zero, stop envelope operation.)\n")])])]),a("p",[t._v("Length of 1 step = n*(1/64) seconds")]),t._v(" "),a("h4",{attrs:{id:"ff22-nr43-channel-4-polynomial-counter-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff22-nr43-channel-4-polynomial-counter-r-w"}},[t._v("#")]),t._v(" FF22 - NR43 - Channel 4 Polynomial Counter (R/W)")]),t._v(" "),a("p",[t._v('The amplitude is randomly switched between high and low at the given\nfrequency. A higher frequency will make the noise to appear "softer".\nWhen Bit 3 is set, the output will become more regular, and some\nfrequencies will sound more like Tone than Noise.')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7-4 - Shift Clock Frequency (s)\nBit 3   - Counter Step/Width (0=15 bits, 1=7 bits)\nBit 2-0 - Dividing Ratio of Frequencies (r)\n")])])]),a("p",[t._v("Frequency = 524288 Hz / r / 2^(s+1) ;For r=0 assume r=0.5 instead")]),t._v(" "),a("h4",{attrs:{id:"ff23-nr44-channel-4-counter-consecutive-inital-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff23-nr44-channel-4-counter-consecutive-inital-r-w"}},[t._v("#")]),t._v(" FF23 - NR44 - Channel 4 Counter/consecutive; Inital (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)\nBit 6   - Counter/consecutive selection (Read/Write)\n          (1=Stop output when length in NR41 expires)\n")])])]),a("h2",{attrs:{id:"sound-control-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-control-registers"}},[t._v("#")]),t._v(" Sound Control Registers")]),t._v(" "),a("h4",{attrs:{id:"ff24-nr50-channel-control-on-off-volume-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff24-nr50-channel-control-on-off-volume-r-w"}},[t._v("#")]),t._v(" FF24 - NR50 - Channel control / ON-OFF / Volume (R/W)")]),t._v(" "),a("p",[t._v('The volume bits specify the "Master Volume" for Left/Right sound\noutput. SO2 goes to the left headphone, and SO1 goes to the right.')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7   - Output Vin to SO2 terminal (1=Enable)\nBit 6-4 - SO2 output level (volume)  (0-7)\nBit 3   - Output Vin to SO1 terminal (1=Enable)\nBit 2-0 - SO1 output level (volume)  (0-7)\n")])])]),a("p",[t._v("The Vin signal is an analog signal received from the game cartridge bus,\nallowing external hardware in the cartridge to supply a fifth sound\nchannel, additionally to the Game Boy's internal four channels. No\nlicensed games used this feature, and it was omitted from the Game Boy\nAdvance.")]),t._v(" "),a("p",[t._v("(Despite rumors, "),a("em",[t._v("Pocket Music")]),t._v(" does not use Vin. It blocks use on the\nGBA for a different reason: the developer couldn't figure out how to\nsilence buzzing associated with the wave channel's DAC.)")]),t._v(" "),a("h4",{attrs:{id:"ff25-nr51-selection-of-sound-output-terminal-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff25-nr51-selection-of-sound-output-terminal-r-w"}},[t._v("#")]),t._v(" FF25 - NR51 - Selection of Sound output terminal (R/W)")]),t._v(" "),a("p",[t._v("Each channel can be panned hard left, center, or hard right.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7 - Output sound 4 to SO2 terminal\nBit 6 - Output sound 3 to SO2 terminal\nBit 5 - Output sound 2 to SO2 terminal\nBit 4 - Output sound 1 to SO2 terminal\nBit 3 - Output sound 4 to SO1 terminal\nBit 2 - Output sound 3 to SO1 terminal\nBit 1 - Output sound 2 to SO1 terminal\nBit 0 - Output sound 1 to SO1 terminal\n")])])]),a("h4",{attrs:{id:"ff26-nr52-sound-on-off"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff26-nr52-sound-on-off"}},[t._v("#")]),t._v(" FF26 - NR52 - Sound on/off")]),t._v(" "),a("p",[t._v("If your GB programs don't use sound then write 00h to this register to\nsave 16% or more on GB power consumption. Disabeling the sound\ncontroller by clearing Bit 7 destroys the contents of all sound\nregisters. Also, it is not possible to access any sound registers\n(execpt FF26) while the sound controller is disabled.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 7 - All sound on/off  (0: stop all sound circuits) (Read/Write)\n Bit 3 - Sound 4 ON flag (Read Only)\n Bit 2 - Sound 3 ON flag (Read Only)\n Bit 1 - Sound 2 ON flag (Read Only)\n Bit 0 - Sound 1 ON flag (Read Only)\n")])])]),a("p",[t._v("Bits 0-3 of this register are read only status bits, writing to these\nbits does NOT enable/disable sound. The flags get set when sound output\nis restarted by setting the Initial flag (Bit 7 in NR14-NR44), the flag\nremains set until the sound length has expired (if enabled). A volume\nenvelopes which has decreased to zero volume will NOT cause the sound\nflag to go off.")]),t._v(" "),a("h2",{attrs:{id:"pitfalls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pitfalls"}},[t._v("#")]),t._v(" Pitfalls")]),t._v(" "),a("ul",[a("li",[t._v("Enabling or disabling a DAC (resetting NR30 bit 7 or writing %0000\n0XXX to NRx2 for other channels), adding or removing it using NR51,\nor changing the volume in NR50, will cause an audio pop. (This\ncauses a change in DC offset, which is smoothed out by a high-pass\ncircuit over time, but still creates a pop)")]),t._v(" "),a("li",[t._v('The final output goes through a high-pass filter, which is more\naggressive on GBA than on GBC, which is more aggressive than on DMG.\n(What this means is that the output is "pulled" towards 0V with\nvarious degrees of "aggressiveness")')]),t._v(" "),a("li",[t._v("When first starting up a pulse channel, it will "),a("em",[t._v("always")]),t._v(" output a\n(digital) zero.")]),t._v(" "),a("li",[t._v("The pulse channels' \"duty step\" (at which position in the duty\ncycle they are) can't be reset. The exception to this is turning\noff the APU, which causes them to start over from 0 when turning it\non.")]),t._v(" "),a("li",[t._v('Restarting a pulse channel causes its "duty step timer" to reset,\nmeaning that "tickling" a pulse channel regularly enough will\ncause its "duty step" to never advance.')]),t._v(" "),a("li",[t._v("When restarting CH3, it resumes playing the last 4-bit sample it\nread from wave RAM, or 0 if no sample has been read since APU reset.\n(Sample latching is independent of output level control in NR32.)\nAfter the latched sample completes, it starts with the second sample\nin wave RAM (low 4 bits of $FF30). The first sample (high 4 bits of\n$FF30) is played last.")]),t._v(" "),a("li",[t._v("CH3 output level control does not, in fact, alter the output level.\nIt shifts the "),a("strong",[t._v("digital")]),t._v(" value CH3 is outputting (read below), not\nthe analog value.")]),t._v(" "),a("li",[t._v('On GBA, CH3 is inverted. This causes the channel to output a loud\nspike when disabled; it\'s a good idea to "remove" the channel\nusing NR51 before refreshing wave RAM.')])]),t._v(" "),a("h2",{attrs:{id:"apu-technical-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apu-technical-explanation"}},[t._v("#")]),t._v(" APU technical explanation")]),t._v(" "),a("h4",{attrs:{id:"game-boy-game-boy-color"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-game-boy-color"}},[t._v("#")]),t._v(" Game Boy, Game Boy Color")]),t._v(" "),a("p",[t._v('Each of the 4 channels work pretty identically. First, there\'s a\n"generation" circuit, which usually outputs either a 0 or another\nvalue (CH3 differs in that it can output multiple values, but\nregardless). That value is digital, and can range between 0 and 0xF.\nThis is then fed to a\n'),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Digital-to-analog_converter",target:"_blank",rel:"noopener noreferrer"}},[t._v("DAC"),a("OutboundLink")],1),t._v(", which\nmaps this to an analog value; 7 maps to the lowest (negative) voltage, 0\nto the highest (positive) one. Finally, all channels are mixed through\nNR51, scaled through NR50, and sent to the output.")]),t._v(" "),a("p",[t._v("Each DAC is controlled independently from the generation circuit. For\nCH3, the DAC is controlled by NR30 bit 7; for other channels, the DAC is\nturned on unless bits 3-7 of NRx2 are reset, and the envelope will be\nset to "),a("code",[t._v("[NRx2] >> 4")]),t._v(". (Note: the envelope sweep function changes the\nenvelope, but not the value in NRx2! It won't disable the DAC, either.)\nThe generation circuits are turned on by restarting them for the first\ntime, and this is what sets the corresponding bit in NR52. Yes, it's\npossible to turn on a DAC but not the generation circuit. Finally,\ndisabling a DAC also kills the generation circuit.")]),t._v(" "),a("p",[t._v("Note that each DAC has a DC offset, so enabling, disabling, adding to or\nremoving from NR51, will all cause an audio pop; changing the volume in\nNR50 will as well.")]),t._v(" "),a("p",[t._v("Finally, all the output goes through a high-pass filter to remove the DC\noffsets from the DACs.")]),t._v(" "),a("h4",{attrs:{id:"game-boy-advance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-advance"}},[t._v("#")]),t._v(" Game Boy Advance")]),t._v(" "),a("p",[t._v("The APU was reworked pretty heavily for the GBA. Instead of mixing being\ndone analogically, it's instead done digitally; then, sound is\nconverted to an analog signal and an offset is added (see SOUNDBIAS in\n"),a("a",{attrs:{href:"http://problemkaputt.de/gbatek.htm#gbasoundcontrolregisters",target:"_blank",rel:"noopener noreferrer"}},[t._v("GBATEK"),a("OutboundLink")],1),t._v("\nfor more details).")]),t._v(" "),a("p",[t._v("This means that the APU has no DACs, or if modelling the GBA as a GB,\nthey're always on.")]),t._v(" "),a("h1",{attrs:{id:"joypad-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joypad-input"}},[t._v("#")]),t._v(" Joypad Input")]),t._v(" "),a("h4",{attrs:{id:"ff00-p1-joyp-joypad-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff00-p1-joyp-joypad-r-w"}},[t._v("#")]),t._v(" FF00 - P1/JOYP - Joypad (R/W)")]),t._v(" "),a("p",[t._v("The eight Game Boy buttons/direction keys are arranged as a 2x4\nmatrix. Select either button or direction keys by writing to this\nregister, then read out bits 0-3.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7 - Not used\nBit 6 - Not used\nBit 5 - P15 Select Button Keys      (0=Select)\nBit 4 - P14 Select Direction Keys   (0=Select)\nBit 3 - P13 Input Down  or Start    (0=Pressed) (Read Only)\nBit 2 - P12 Input Up    or Select   (0=Pressed) (Read Only)\nBit 1 - P11 Input Left  or Button B (0=Pressed) (Read Only)\nBit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Most programs read from this port several times in a row\n(the first reads are used as a short delay, allowing the inputs to stabilize,\nand only the value from the last read is actually used).")])]),t._v(" "),a("h4",{attrs:{id:"usage-in-sgb-software"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-in-sgb-software"}},[t._v("#")]),t._v(" Usage in SGB software")]),t._v(" "),a("p",[t._v("Beside for normal joypad input, SGB games mis-use the joypad register to\noutput SGB command packets to the SNES, also, SGB programs may read out\ngamepad states from up to four different joypads which can be connected\nto the SNES. See SGB description for details.")]),t._v(" "),a("h4",{attrs:{id:"int-60-joypad-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-60-joypad-interrupt"}},[t._v("#")]),t._v(" INT 60 - Joypad Interrupt")]),t._v(" "),a("p",[t._v("The Joypad interrupt is requested when any of the above Input lines changes\nfrom High to Low. This happens when a key is\npressed (provided that the direction/button key is enabled by\nbit 4/5, respectively), however, because of switch bounce, one or more High to Low\ntransitions are usually produced when pressing and releasing a key.")]),t._v(" "),a("h4",{attrs:{id:"using-the-joypad-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-joypad-interrupt"}},[t._v("#")]),t._v(" Using the Joypad Interrupt")]),t._v(" "),a("p",[t._v("It's practically useless for programmers. Even when selecting both\nbuttons and direction keys simultaneously it still cannot recognize all\nkeystrokes, because in that case a bit might be already held low by a\nbutton key, and pressing the corresponding direction key would thus\nmake no difference. The only meaningful purpose of the Joypad\ninterrupt would be to terminate the STOP (low power) standby state. GBA SP,\nbecause of the different buttons used, seems to not be affected by\nswitch bounce.")]),t._v(" "),a("h1",{attrs:{id:"serial-data-transfer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-data-transfer"}},[t._v("#")]),t._v(" Serial Data Transfer")]),t._v(" "),a("p",[t._v("Communication between two Game Boy systems happens one byte at a time. One\nGame Boy generates a clock signal internally and thus controls when the\nexchange happens. In SPI terms, the Game Boy generating the clock is\ncalled the \"master.\"  The other one uses an external clock (receiving\nit from the other Game Boy) and has no control over when the\ntransfer happens. If it hasn't gotten around to loading up the next\ndata byte at the time the transfer begins, the last one will go out\nagain. Alternately, if it's ready to send the next byte but the last\none hasn't gone out yet, it has no choice but to wait.")]),t._v(" "),a("h4",{attrs:{id:"ff01-sb-serial-transfer-data-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff01-sb-serial-transfer-data-r-w"}},[t._v("#")]),t._v(" FF01 - SB - Serial transfer data (R/W)")]),t._v(" "),a("p",[t._v("Before a transfer, it holds the next byte that will go out.")]),t._v(" "),a("p",[t._v("During a transfer, it has a blend of the outgoing and incoming bytes.\nEach cycle, the leftmost bit is shifted out (and over the wire) and the\nincoming bit is shifted in from the other side:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("o7 o6 o5 o4 o3 o2 o1 o0\no6 o5 o4 o3 o2 o1 o0 i7\no5 o4 o3 o2 o1 o0 i7 i6\no4 o3 o2 o1 o0 i7 i6 i5\no3 o2 o1 o0 i7 i6 i5 i4\no2 o1 o0 i7 i6 i5 i4 i3\no1 o0 i7 i6 i5 i4 i3 i2\no0 i7 i6 i5 i4 i3 i2 i1\ni7 i6 i5 i4 i3 i2 i1 i0\n")])])]),a("h4",{attrs:{id:"ff02-sc-serial-transfer-control-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff02-sc-serial-transfer-control-r-w"}},[t._v("#")]),t._v(" FF02 - SC - Serial Transfer Control (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 7 - Transfer Start Flag (0=No transfer is in progress or requested, 1=Transfer in progress, or requested)\nBit 1 - Clock Speed (0=Normal, 1=Fast) ** CGB Mode Only **\nBit 0 - Shift Clock (0=External Clock, 1=Internal Clock)\n")])])]),a("p",[t._v("The master Game Boy will load up a data byte in SB and then set\nSC to 0x81 (Transfer requested, use internal clock). It will be notified\nthat the transfer is complete in two ways: SC's Bit 7 will be cleared\n(that is, SC will be set up 0x01), and also the Serial Interrupt handler\nwill be called (that is, the CPU will jump to 0x0058).")]),t._v(" "),a("p",[t._v("The other Game Boy will load up a data byte and can optionally set SC's\nBit 7 (that is, SC=0x80). Regardless of whether or not it has done this, if\nand when the master wants to conduct a transfer, it will happen\n(pulling whatever happens to be in SB at that time). The externally clocked\nGame Boy will have its serial interrupt handler called at the end of the\ntransfer, and if it bothered to set SC's Bit 7, it will be cleared.")]),t._v(" "),a("h4",{attrs:{id:"internal-clock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#internal-clock"}},[t._v("#")]),t._v(" Internal Clock")]),t._v(" "),a("p",[t._v("In Non-CGB Mode the Game Boy supplies an internal clock of 8192Hz only\n(allowing to transfer about 1 KByte per second minus overhead for delays).\nIn CGB Mode four internal clock rates are available, depending on Bit 1\nof the SC register, and on whether the CGB Double Speed Mode is used:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Clock freq")]),t._v(" "),a("th",[t._v("Transfer speed")]),t._v(" "),a("th",[t._v("Conditions")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("8192Hz")]),t._v(" "),a("td",[t._v("1KB/s")]),t._v(" "),a("td",[t._v("Bit 1 cleared, Normal speed")])]),t._v(" "),a("tr",[a("td",[t._v("16384Hz")]),t._v(" "),a("td",[t._v("2KB/s")]),t._v(" "),a("td",[t._v("Bit 1 cleared, Double-speed Mode")])]),t._v(" "),a("tr",[a("td",[t._v("262144Hz")]),t._v(" "),a("td",[t._v("32KB/s")]),t._v(" "),a("td",[t._v("Bit 1 set,     Normal speed")])]),t._v(" "),a("tr",[a("td",[t._v("524288Hz")]),t._v(" "),a("td",[t._v("64KB/s")]),t._v(" "),a("td",[t._v("Bit 1 set,     Double-speed Mode")])])])]),t._v(" "),a("h4",{attrs:{id:"external-clock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-clock"}},[t._v("#")]),t._v(" External Clock")]),t._v(" "),a("p",[t._v("The external clock is typically supplied by another Game Boy, but might\nbe supplied by another computer (for example if connected to a PC's\nparallel port), in that case the external clock may have any speed. Even\nthe old/monochrome Game Boy is reported to recognizes external clocks of\nup to 500 kHz. And there is no limitation into the other direction - even\nwhen suppling an external clock speed of \"1 bit per month\", then the\nGame Boy will still eagerly wait for the next bit(s) to be transferred.\nIt isn't required that the clock pulses are sent at an regular interval\neither.")]),t._v(" "),a("h4",{attrs:{id:"timeouts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeouts"}},[t._v("#")]),t._v(" Timeouts")]),t._v(" "),a("p",[t._v("When using external clock then the transfer will not complete until the\nlast bit is received. In case that the second Game Boy isn't supplying a\nclock signal, if it gets turned off, or if there is no second Game Boy\nconnected at all) then transfer will never complete. For this reason the\ntransfer procedure should use a timeout counter, and abort the\ncommunication if no response has been received during the timeout\ninterval.")]),t._v(" "),a("h4",{attrs:{id:"delays-and-synchronization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delays-and-synchronization"}},[t._v("#")]),t._v(" Delays and Synchronization")]),t._v(" "),a("p",[t._v("The master Game Boy should always execute a small\ndelay after each transfer, in order to ensure that the other\nGame Boy has enough time to prepare itself for the next transfer. That is, the\nGame Boy with external clock must have set its transfer start bit before\nthe Game Boy with internal clock starts the transfer. Alternately, the\ntwo Game Boy systems could switch between internal and external clock for each\ntransferred byte to ensure synchronization.")]),t._v(" "),a("p",[t._v("Transfer is initiated when the master Game Boy sets its Transfer\nStart Flag, regardless of the value of this flag on the other device.\nThis bit is automatically set to 0 (on both) at the end of transfer.\nReading this bit can be used to determine if the transfer is still\nactive.")]),t._v(" "),a("h4",{attrs:{id:"int-58-serial-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-58-serial-interrupt"}},[t._v("#")]),t._v(" INT 58 - Serial Interrupt")]),t._v(" "),a("p",[t._v("Once all 8 bits have been sent and received,\nan interrupt is requested by setting Bit 3 of the IF Register\n(FF0F). When that interrupt is enabled, then the Serial Interrupt vector\nat 0058 is called.")]),t._v(" "),a("p",[a("strong",[t._v("XXXXXX...")])]),t._v(" "),a("p",[t._v("Transmitting and receiving serial data is done simultaneously. The\nreceived data is automatically stored in SB.")]),t._v(" "),a("p",[t._v("The serial I/O port on the Game Boy is a very simple setup and is crude\ncompared to standard RS-232 (IBM-PC) or RS-485 (Macintosh) serial ports.\nThere are no start or stop bits.")]),t._v(" "),a("p",[t._v("During a transfer, a byte is shifted in at the same time that a byte is\nshifted out. The rate of the shift is determined by whether the clock\nsource is internal or external. The most significant bit is shifted in\nand out first.")]),t._v(" "),a("p",[t._v("When the internal clock is selected, it drives the clock pin on the game\nlink port and it stays high when not used. During a transfer it will go\nlow eight times to clock in/out each bit.")]),t._v(" "),a("p",[t._v("The state of the last bit shifted out determines the state of the output\nline until another transfer takes place.")]),t._v(" "),a("p",[t._v("If a serial transfer with internal clock is performed and no external\nGame Boy is present, a value of $FF will be received in the transfer.")]),t._v(" "),a("p",[t._v("The following code initiates the process of shifting $75 out the serial\nport and a byte to be shifted into $FF01:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   ld   a,$75\n   ld  ($FF01),a\n   ld   a,$81\n   ld  ($FF02),a\n")])])]),a("p",[t._v("The Game Boy does not support wake-on-LAN. Completion of an externally\nclocked serial transfer does not exit STOP mode.")]),t._v(" "),a("h1",{attrs:{id:"timer-and-divider-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-and-divider-registers"}},[t._v("#")]),t._v(" Timer and Divider Registers")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("The Timer described below is the built-in timer in the gameboy. It has\nnothing to do with the MBC3s battery buffered Real Time Clock - that's\na completely different thing, described in\n"),a("a",{attrs:{href:"#memory-bank-controllers"}},[t._v("Memory Bank Controllers")]),t._v(".")])]),t._v(" "),a("h4",{attrs:{id:"ff04-div-divider-register-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff04-div-divider-register-r-w"}},[t._v("#")]),t._v(" FF04 - DIV - Divider Register (R/W)")]),t._v(" "),a("p",[t._v("This register is incremented at a rate of 16384Hz (~16779Hz on SGB).\nWriting any value to this register resets it to $00.\nAdditionally, this register is reset when executing the "),a("code",[t._v("stop")]),t._v(" instruction, and\nonly begins ticking again once "),a("code",[t._v("stop")]),t._v(" mode ends. This also occurs during a\n"),a("a",{attrs:{href:"#ff4d-key1-cgb-mode-only-prepare-speed-switch"}},[t._v("speed switch")]),t._v(".\n(TODO: how is it affected by the wait after a speed switch?)")]),t._v(" "),a("p",[t._v("Note: The divider is affected by CGB double speed mode, and will\nincrement at 32768Hz in double speed.")]),t._v(" "),a("h4",{attrs:{id:"ff05-tima-timer-counter-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff05-tima-timer-counter-r-w"}},[t._v("#")]),t._v(" FF05 - TIMA - Timer counter (R/W)")]),t._v(" "),a("p",[t._v("This timer is incremented at the clock frequency specified by the TAC\nregister ($FF07). When the value overflows (exceeds $FF)\nit is reset to the value specified in TMA (FF06) and an interrupt\nis requested, as described below.")]),t._v(" "),a("h4",{attrs:{id:"ff06-tma-timer-modulo-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff06-tma-timer-modulo-r-w"}},[t._v("#")]),t._v(" FF06 - TMA - Timer Modulo (R/W)")]),t._v(" "),a("p",[t._v("When TIMA overflows, it is reset to the value in this register and an interrupt is requested.\nExample of use: if TMA is set to $FF, an interrupt is requested at the clock frequency selected in\nTAC (because every increment is an overflow). However, if TMA is set to $FE, an interrupt is\nonly requested every two increments, which effectively divides the selected clock by two. Setting\nTMA to $FD would divide the clock by three, and so on.")]),t._v(" "),a("p",[t._v("If a TMA write is executed on the same cycle as the content of TMA is transferred to TIMA\ndue to a timer overflow, the old value is transferred to TIMA.")]),t._v(" "),a("h4",{attrs:{id:"ff07-tac-timer-control-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff07-tac-timer-control-r-w"}},[t._v("#")]),t._v(" FF07 - TAC - Timer Control (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit  2   - Timer Enable\nBits 1-0 - Input Clock Select\n           00: CPU Clock / 1024 (DMG, SGB2, CGB Single Speed Mode:   4096 Hz, SGB1:   ~4194 Hz, CGB Double Speed Mode:   8192 Hz)\n           01: CPU Clock / 16   (DMG, SGB2, CGB Single Speed Mode: 262144 Hz, SGB1: ~268400 Hz, CGB Double Speed Mode: 524288 Hz)\n           10: CPU Clock / 64   (DMG, SGB2, CGB Single Speed Mode:  65536 Hz, SGB1:  ~67110 Hz, CGB Double Speed Mode: 131072 Hz)\n           11: CPU Clock / 256  (DMG, SGB2, CGB Single Speed Mode:  16384 Hz, SGB1:  ~16780 Hz, CGB Double Speed Mode:  32768 Hz)\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v('The "Timer Enable" bit only affects the timer (TIMA). The divider (DIV) is '),a("strong",[t._v("always")]),t._v(" counting")])]),t._v(" "),a("h4",{attrs:{id:"int-50-timer-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-50-timer-interrupt"}},[t._v("#")]),t._v(" INT 50 - Timer Interrupt")]),t._v(" "),a("p",[t._v("Every time that the timer overflows (that is, when TIMA exceeds $FF),\nan interrupt is requested by setting bit 2 in the IF register\n($FF0F). As soon as that interrupt is enabled, the CPU will execute it by\ncalling the timer interrupt vector at $0050.")]),t._v(" "),a("h2",{attrs:{id:"timer-obscure-behaviour"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-obscure-behaviour"}},[t._v("#")]),t._v(" Timer obscure behaviour")]),t._v(" "),a("h3",{attrs:{id:"timer-global-circuit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-global-circuit"}},[t._v("#")]),t._v(" Timer Global Circuit")]),t._v(" "),a("p",[a("img",{attrs:{src:"imgs/timer_simplified.svg",alt:"",title:"imgs/timer_simplified.svg"}})]),t._v(" "),a("h3",{attrs:{id:"relation-between-timer-and-divider-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#relation-between-timer-and-divider-register"}},[t._v("#")]),t._v(" Relation between Timer and Divider register")]),t._v(" "),a("p",[t._v("This is a schematic of the circuit involving TAC and DIV:")]),t._v(" "),a("p",[a("img",{attrs:{src:"imgs/timer_tac_bug_dmg.svg",alt:"",title:"imgs/timer_tac_bug_dmg.svg"}})]),t._v(" "),a("p",[t._v("Notice how the values that are connected to the inputs of the\nmultiplexer are the values of those bits, not the carry of those bits.\nThis is the reason of a few things:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("When writing to DIV, the whole counter is reset, so the timer is\nalso affected.")])]),t._v(" "),a("li",[a("p",[t._v("When writing to DIV, if the current output is 1 and timer is\nenabled, as the new value after reseting DIV will be 0, the falling\nedge detector will detect a falling edge and TIMA will increase.")])]),t._v(" "),a("li",[a("p",[t._v("When writing to TAC, if the previously selected multiplexer input was\n1 and the new input is 0, TIMA will increase too. This doesnt\nhappen when the timer is disabled, but it also happens when disabling\nthe timer (the same effect as writing to DIV). The following code explains the behaviour in DMG and MGB.")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    clocks_array[4] = {1024, 16, 64, 256}\n\n    old_clocks = clocks_array[old_TAC&3]\n    new_clocks = clocks_array[new_TAC&3]\n\n    old_enable = old_TAC & BIT(2)\n    new_enable = new_TAC & BIT(2)\n\n    sys_clocks = 16 bit system counter\n\n    IF old_enable == 0 THEN\n        glitch = 0 (*)\n    ELSE\n        IF new_enable == 0 THEN\n            glitch = (sys_clocks & (old_clocks/2)) != 0\n        ELSE\n            glitch = ((sys_clocks & (old_clocks/2)) != 0) && ((sys_clocks & (new_clocks/2)) == 0)\n        END IF\n    END IF\n")])])]),a("p",[t._v("The sentence marked with a (*) has a different behaviour in GBC (AGB\nand AGS seem to have strange behaviour even in the other statements).\nWhen enabling the timer and maintaining the same frequency it doesnt\nglitch. When disabling the timer it doesnt glitch either. When another\nchange of value happens (so timer is enabled after the write), the\nbehaviour depends on a race condition, so it cannot be predicted for\nevery device.")]),t._v(" "),a("h3",{attrs:{id:"timer-overflow-behaviour"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-overflow-behaviour"}},[t._v("#")]),t._v(" Timer Overflow Behaviour")]),t._v(" "),a("p",[t._v("When TIMA overflows, the value from TMA is loaded and IF timer flag is\nset to 1, but this doesnt happen immediately. Timer interrupt is\ndelayed 1 cycle (4 clocks) from the TIMA overflow. The TMA reload to\nTIMA is also delayed. For one cycle, after overflowing TIMA, the value\nin TIMA is 00h, not TMA. This happens only when an overflow happens, not\nwhen the upper bit goes from 1 to 0, it cant be done manually writing\nto TIMA, the timer has to increment itself.")]),t._v(" "),a("p",[t._v("For example (SYS is the system internal counter divided by 4 for easier\nunderstanding, each increment of the graph is 1 cycle, not 1 clock):")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Timer overflows:\n\n              [A] [B]\nSYS  FD FE FF |00| 01 02 03\nTIMA FF FF FF |00| 23 23 23\nTMA  23 23 23 |23| 23 23 23\nIF   E0 E0 E0 |E0| E4 E4 E4\n\nTimer doesn't overflow:\n\n              [C]\nSYS  FD FE FF 00 01 02 03\nTIMA 45 45 45 46 46 46 46\nTMA  23 23 23 23 23 23 23\nIF   E0 E0 E0 E0 E0 E0 E0\n")])])]),a("ul",[a("li",[a("p",[t._v("During the strange cycle [A] you can prevent the IF flag from being\nset and prevent the TIMA from being reloaded from TMA by writing a value\nto TIMA. That new value will be the one that stays in the TIMA register\nafter the instruction. Writing to DIV, TAC or other registers wont\nprevent the IF flag from being set or TIMA from being reloaded.")])]),t._v(" "),a("li",[a("p",[t._v("If you write to TIMA during the cycle that TMA is being loaded to it\n[B], the write will be ignored and TMA value will be written to TIMA\ninstead.")])]),t._v(" "),a("li",[a("p",[t._v("If TMA is written the same cycle it is loaded to TIMA [B], TIMA is\nalso loaded with that value.")])]),t._v(" "),a("li",[a("p",[t._v("This is a guessed schematic to explain the priorities with registers\nTIMA and TMA:")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"imgs/timer_tima_tma_detailed.svg",alt:"",title:"imgs/timer_tima_tma_detailed.svg"}})]),t._v(" "),a("p",[t._v("TMA is a latch. As soon as it is written, the output shows that value.\nThat explains that when TMA is written and TIMA is being incremented,\nthe value written to TMA is also written to TIMA. It doesnt affect the\nIF flag, though.")]),t._v(" "),a("h1",{attrs:{id:"interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupts"}},[t._v("#")]),t._v(" Interrupts")]),t._v(" "),a("h4",{attrs:{id:"ime-interrupt-master-enable-flag-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ime-interrupt-master-enable-flag-write-only"}},[t._v("#")]),t._v(" IME - Interrupt Master Enable Flag (Write Only)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0 - Disable all interrupts\n1 - Enable all interrupts that are enabled in the IE register (FFFF)\n")])])]),a("p",[t._v("The IME flag is used to disable all interrupts, overriding any enabled\nbits in the IE register. It isn't possible to access the IME flag by\nusing a I/O address. IME can be modified by\nthe following instructions/events only:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("EI     ;Enables interrupts  (that is, IME=1)\nDI     ;Disables interrupts (that is, IME=0)\nRETI   ;Enables interrupts and returns (same as the instruction sequence EI, RET)\n<INT>  ;Disables interrupts and calls interrupt vector\n")])])]),a("p",[t._v("where <INT> means the operation which is automatically executed by the\nCPU when it executes an interrupt.")]),t._v(" "),a("p",[t._v("The effect of EI is delayed by one instruction. This means that EI\nfollowed immediately by DI does not allow any interrupts between them.")]),t._v(" "),a("h4",{attrs:{id:"ffff-ie-interrupt-enable-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ffff-ie-interrupt-enable-r-w"}},[t._v("#")]),t._v(" FFFF - IE - Interrupt Enable (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 0: VBlank   Interrupt Enable  (INT 40h)  (1=Enable)\nBit 1: LCD STAT Interrupt Enable  (INT 48h)  (1=Enable)\nBit 2: Timer    Interrupt Enable  (INT 50h)  (1=Enable)\nBit 3: Serial   Interrupt Enable  (INT 58h)  (1=Enable)\nBit 4: Joypad   Interrupt Enable  (INT 60h)  (1=Enable)\n")])])]),a("h4",{attrs:{id:"ff0f-if-interrupt-flag-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff0f-if-interrupt-flag-r-w"}},[t._v("#")]),t._v(" FF0F - IF - Interrupt Flag (R/W)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 0: VBlank   Interrupt Request (INT 40h)  (1=Request)\nBit 1: LCD STAT Interrupt Request (INT 48h)  (1=Request)\nBit 2: Timer    Interrupt Request (INT 50h)  (1=Request)\nBit 3: Serial   Interrupt Request (INT 58h)  (1=Request)\nBit 4: Joypad   Interrupt Request (INT 60h)  (1=Request)\n")])])]),a("p",[t._v("When an interrupt signal changes from low to high, the\ncorresponding bit in the IF register becomes set. For example, Bit 0\nbecomes set when the LCD controller enters the VBlank period.")]),t._v(" "),a("h4",{attrs:{id:"interrupt-requests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-requests"}},[t._v("#")]),t._v(" Interrupt Requests")]),t._v(" "),a("p",[t._v("Any set bits in the IF register are only "),a("strong",[t._v("requesting")]),t._v(" an interrupt to be\nexecuted. The actual "),a("strong",[t._v("execution")]),t._v(' happens only if both the IME flag and\nthe corresponding bit in the IE register are set, otherwise the\ninterrupt "waits" until both IME and IE allow its execution.')]),t._v(" "),a("h4",{attrs:{id:"interrupt-execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-execution"}},[t._v("#")]),t._v(" Interrupt Execution")]),t._v(" "),a("p",[t._v("When an interrupt is executed, the corresponding bit in the IF\nregister is automatically reset by the CPU, and the IME flag\nis also reset (disabling any further interrupts until the program\nre-enables the interrupts, typically by using the RETI instruction), and\nthe corresponding Interrupt Vector (which is one of the addresses in the range\n$0040-$0060, as shown in the IE and IF register descriptions "),a("a",{attrs:{href:"#ffff-ie-interrupt-enable-r-w"}},[t._v("above")]),t._v(") is\ncalled.")]),t._v(" "),a("h4",{attrs:{id:"manually-requesting-discarding-interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manually-requesting-discarding-interrupts"}},[t._v("#")]),t._v(" Manually Requesting/Discarding Interrupts")]),t._v(" "),a("p",[t._v("Since the CPU automatically sets and clears the bits in the IF register, it\nis usually not required to write to the IF register. However, the user\nmay still do that in order to manually request (or discard) interrupts.\nLike with real interrupts, a manually requested interrupt isn't executed\nunless/until IME and IE allow its execution.")]),t._v(" "),a("h4",{attrs:{id:"interrupt-priorities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-priorities"}},[t._v("#")]),t._v(" Interrupt Priorities")]),t._v(" "),a("p",[t._v("In the following three situations it might happen that more than one bit in the IF register is set, requesting more than one interrupt at once:")]),t._v(" "),a("ol",[a("li",[t._v("More than one interrupt signal changed from Low to High at the same time.")]),t._v(" "),a("li",[t._v("Several interrupts have been requested during a time in which IME/IE didn't allow these interrupts to be executed directly.")]),t._v(" "),a("li",[t._v('The user has written a value with several "1" bits (for example binary 00011111) to the IF register.')])]),t._v(" "),a("p",[t._v("If IME and IE allow the execution of more than one of the\nrequested interrupts, the interrupt with the highest priority\nis executed first. The priorities follow the same order as the bits in the IE\nand IF registers: Bit 0 (VBlank) having the highest priority, and Bit 4\n(Joypad) having the lowest priority.")]),t._v(" "),a("h4",{attrs:{id:"nested-interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nested-interrupts"}},[t._v("#")]),t._v(" Nested Interrupts")]),t._v(" "),a("p",[t._v("The CPU automatically disables all the other interrupts by setting IME=0\nwhen it executes an interrupt. Usually IME remains zero until the\ninterrupt handler returns (and sets IME=1 by means of the RETI instruction).\nHowever, if you want any other interrupts (of any priority)\nto be allowed to be executed from inside the interrupt\nhandler, then you can use the EI instruction in the interrupt\nhandler.")]),t._v(" "),a("h4",{attrs:{id:"interrupt-service-routine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-service-routine"}},[t._v("#")]),t._v(" Interrupt Service Routine")]),t._v(" "),a("p",[t._v("According to Z80 datasheets, the following occurs when control is being\ntransferred to an interrupt handler:")]),t._v(" "),a("ol",[a("li",[t._v("Two wait states are executed (2 machine cycles pass while nothing\noccurs, presumably the CPU is executing NOPs during this time).")]),t._v(" "),a("li",[t._v("The current PC is pushed onto the stack, this process consumes 2 more\nmachine cycles.")]),t._v(" "),a("li",[t._v("The high byte of the PC is set to 0, the low byte is set to the\naddress of the handler ($40,$48,$50,$58,$60). This consumes one\nlast machine cycle.")])]),t._v(" "),a("p",[t._v("The entire ISR "),a("strong",[t._v("should")]),t._v(" consume a total of 5 machine cycles. This has\nyet to be tested, but is what the Z80 datasheet implies.")]),t._v(" "),a("h1",{attrs:{id:"cgb-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgb-registers"}},[t._v("#")]),t._v(" CGB Registers")]),t._v(" "),a("p",[t._v("This chapter describes only Game Boy Color (GBC or CGB) registers that didn't\nfit into normal categories - most CGB registers are described in the\nchapter about Video Display (Color Palettes, VRAM Bank, VRAM DMA\nTransfers, and changed meaning of Bit 0 of LCDC Control register). Also,\na changed bit is noted in the chapter about the Serial/Link port.")]),t._v(" "),a("h2",{attrs:{id:"unlocking-cgb-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unlocking-cgb-functions"}},[t._v("#")]),t._v(" Unlocking CGB functions")]),t._v(" "),a("p",[t._v('When using any CGB registers (including those in the Video/Link\nchapters), you must first unlock CGB features by changing byte 0143h in\nthe cartridge header. Typically use a value of 80h for games which\nsupport both CGB and monochrome Game Boy systems, and C0h for games which work\non CGBs only. Otherwise, the CGB will operate in monochrome "Non CGB"\ncompatibility mode.')]),t._v(" "),a("h2",{attrs:{id:"detecting-cgb-and-gba-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detecting-cgb-and-gba-functions"}},[t._v("#")]),t._v(" Detecting CGB (and GBA) functions")]),t._v(" "),a("p",[t._v('CGB hardware can be detected by examing the CPU accumulator (A-register)\ndirectly after startup. A value of 11h indicates CGB (or GBA) hardware,\nif so, CGB functions can be used (if unlocked, see above). When A=11h,\nyou may also examine Bit 0 of the CPUs B-Register to separate between\nCGB (bit cleared) and GBA (bit set), by that detection it is possible to\nuse "repaired" color palette data matching for GBA displays.')]),t._v(" "),a("h2",{attrs:{id:"documented-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#documented-registers"}},[t._v("#")]),t._v(" Documented registers")]),t._v(" "),a("h4",{attrs:{id:"ff4d-key1-cgb-mode-only-prepare-speed-switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff4d-key1-cgb-mode-only-prepare-speed-switch"}},[t._v("#")]),t._v(" FF4D - KEY1 - CGB Mode Only - Prepare Speed Switch")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 7: Current Speed     (0=Normal, 1=Double) (Read Only)\n Bit 0: Prepare Speed Switch (0=No, 1=Prepare) (Read/Write)\n")])])]),a("p",[t._v("This register is used to prepare the Game Boy to switch between CGB\nDouble Speed Mode and Normal Speed Mode. The actual speed switch is\nperformed by executing a "),a("code",[t._v("stop")]),t._v(' instruction after Bit 0 has been set. After\nthat, Bit 0 will be cleared automatically, and the Game Boy will operate\nat the "other" speed. The recommended speed switching procedure in\npseudo code would be:')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("IF KEY1_BIT7 != DESIRED_SPEED THEN\n   IE = $00       ; (FFFF) = $00\n   JOYP = $30     ; (FF00) = $30\n   KEY1 = $01     ; (FF4D) = $01\n   STOP\nENDIF\n")])])]),a("p",[t._v("The CGB is operating in Normal Speed Mode when it is first turned on. Note\nthat using the Double Speed Mode increases the power consumption; therefore, it\nwould be recommended to use Single Speed whenever possible.")]),t._v(" "),a("p",[t._v("In Double Speed Mode the following will operate twice as fast as normal:")]),t._v(" "),a("ul",[a("li",[t._v("The CPU (2.10 MHz, so 1 cycle = approx. 0.5 µs)")]),t._v(" "),a("li",[t._v("Timer and Divider Registers")]),t._v(" "),a("li",[t._v("Serial Port (Link Cable)")]),t._v(" "),a("li",[t._v("DMA Transfer to OAM")])]),t._v(" "),a("p",[t._v("And the following will keep operating as usual:")]),t._v(" "),a("ul",[a("li",[t._v("LCD Video Controller")]),t._v(" "),a("li",[t._v("HDMA Transfer to VRAM")]),t._v(" "),a("li",[t._v("All Sound Timings and Frequencies")])]),t._v(" "),a("p",[t._v("The CPU stops for 2050 cycles (= 8200 clocks) after the "),a("code",[t._v("stop")]),t._v(" instruction is\nexecuted. During this time, the CPU is in a strange state. "),a("code",[t._v("DIV")]),t._v(" does not tick, so\n"),a("em",[t._v("some")]),t._v(' audio events are not processed. Additionally, VRAM/OAM/... locking is "frozen", yielding\ndifferent results depending on the '),a("a",{attrs:{href:"#lcd-status-register"}},[t._v("STAT mode")]),t._v(" it's started in:")]),t._v(" "),a("ul",[a("li",[t._v("HBlank / VBlank (Mode 0 / Mode 1): The PPU cannot access any videomemory, and produces black pixels")]),t._v(" "),a("li",[t._v("OAM scan (Mode 2): The PPU can access VRAM just fine, but not OAM, leading to rendering background, but not sprites")]),t._v(" "),a("li",[t._v("Rendering (Mode 3): The PPU can access everything correctly, and so rendering is not affected")])]),t._v(" "),a("p",[t._v("TODO: confirm whether interrupts can occur (just the joypad one?) during the pause, and consequences if so")]),t._v(" "),a("h4",{attrs:{id:"ff56-rp-cgb-mode-only-infrared-communications-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff56-rp-cgb-mode-only-infrared-communications-port"}},[t._v("#")]),t._v(" FF56 - RP - CGB Mode Only - Infrared Communications Port")]),t._v(" "),a("p",[t._v("This register allows to input and output data through the CGBs built-in\nInfrared Port. When reading data, bit 6 and 7 must be set (and obviously\nBit 0 must be cleared - if you don't want to receive your own Game Boy's\nIR signal). After sending or receiving data you should reset the\nregister to 00h to reduce battery power consumption again.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 0:   Write Data   (0=LED Off, 1=LED On)             (Read/Write)\n Bit 1:   Read Data    (0=Receiving IR Signal, 1=Normal) (Read Only)\n Bit 6-7: Data Read Enable (0=Disable, 3=Enable)         (Read/Write)\n")])])]),a("p",[t._v("Note that the receiver will adapt itself to the normal level of IR\npollution in the air, so if you would send a LED ON signal for a longer\nperiod, then the receiver would treat that as normal (=OFF) after a\nwhile. For example, a Philips TV Remote Control sends a series of 32 LED\nON/OFF pulses (length 10us ON, 17.5us OFF each) instead of a permanent\n880us LED ON signal. Even though being generally CGB compatible, the GBA\ndoes not include an infra-red port.")]),t._v(" "),a("h4",{attrs:{id:"ff6c-opri-cgb-mode-only-object-priority-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff6c-opri-cgb-mode-only-object-priority-mode"}},[t._v("#")]),t._v(" FF6C - OPRI - CGB Mode Only - Object Priority Mode")]),t._v(" "),a("p",[t._v("This register serves as a flag for which object priority mode to use. While\nthe DMG prioritizes objects by x-coordinate, the CGB prioritizes them by\nlocation in OAM. This flag is set by the CGB bios after checking the game's CGB compatibility.")]),t._v(" "),a("p",[t._v("OPRI has an effect if a PGB value ("),a("code",[t._v("0xX8")]),t._v(", "),a("code",[t._v("0xXC")]),t._v(") is written to KEY0 but STOP hasn't been executed yet, and the write takes effect instantly.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("TO BE VERIFIED")]),t._v(" "),a("p",[t._v("It does not have an effect, at least not an instant effect, if written to during CGB or DMG mode after the boot ROM has been unmapped.\nIt is not known if triggering a PSM NMI, which remaps the boot ROM, has an effect on this register's behavior.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Bit 0: OBJ Priority Mode (0=OAM Priority, 1=Coordinate Priority) (Read/Write)\n")])])]),a("h4",{attrs:{id:"ff70-svbk-cgb-mode-only-wram-bank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff70-svbk-cgb-mode-only-wram-bank"}},[t._v("#")]),t._v(" FF70 - SVBK - CGB Mode Only - WRAM Bank")]),t._v(" "),a("p",[t._v("In CGB Mode 32 KBytes internal RAM are available. This memory is divided\ninto 8 banks of 4 KBytes each. Bank 0 is always available in memory at\nC000-CFFF, Bank 1-7 can be selected into the address space at D000-DFFF.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Bit 0-2  Select WRAM Bank (Read/Write)\n")])])]),a("p",[t._v("Writing a value of 01h-07h will select Bank 1-7, writing a value of 00h\nwill select Bank 1 too.")]),t._v(" "),a("h2",{attrs:{id:"undocumented-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undocumented-registers"}},[t._v("#")]),t._v(" Undocumented registers")]),t._v(" "),a("p",[t._v("These are undocumented CGB Registers. The purpose of these registers is\nunknown (if any). It isn't recommended to use them in your software,\nbut you could, for example, use them to check if you are running on an\nemulator or on DMG hardware.")]),t._v(" "),a("h4",{attrs:{id:"ff72-bits-0-7-read-write-ff73-bits-0-7-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff72-bits-0-7-read-write-ff73-bits-0-7-read-write"}},[t._v("#")]),t._v(" FF72 - Bits 0-7 (Read/Write), FF73 - Bits 0-7 (Read/Write)")]),t._v(" "),a("p",[t._v("Both of these registers are fully read/write. Their initial value is\n$00.")]),t._v(" "),a("h4",{attrs:{id:"ff74-bits-0-7-read-write-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff74-bits-0-7-read-write-cgb-mode-only"}},[t._v("#")]),t._v(" FF74 - Bits 0-7 (Read/Write) - CGB Mode Only")]),t._v(" "),a("p",[t._v("In CGB mode, this register is fully readable and writable. Its initial\nvalue is $00.")]),t._v(" "),a("p",[t._v("Otherwise, this register is read-only, and locked at value $FF.")]),t._v(" "),a("h4",{attrs:{id:"ff75-bits-4-6-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff75-bits-4-6-read-write"}},[t._v("#")]),t._v(" FF75 - Bits 4-6 (Read/Write)")]),t._v(" "),a("p",[t._v("Only bits 4, 5 and 6 of this register are read/write enabled. Their\ninitial value is 0.")]),t._v(" "),a("h4",{attrs:{id:"ff76-pcm12-pcm-amplitudes-1-2-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff76-pcm12-pcm-amplitudes-1-2-read-only"}},[t._v("#")]),t._v(" FF76 - PCM12 - PCM amplitudes 1 & 2 (Read Only)")]),t._v(" "),a("p",[t._v("This register is read-only. The low nibble is a copy of sound channel\n#1's PCM amplitude, the high nibble a copy of sound channel #2's.")]),t._v(" "),a("h4",{attrs:{id:"ff77-pcm34-pcm-amplitudes-3-4-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff77-pcm34-pcm-amplitudes-3-4-read-only"}},[t._v("#")]),t._v(" FF77 - PCM34 - PCM amplitudes 3 & 4 (Read Only)")]),t._v(" "),a("p",[t._v("Same, but with channels 3 and 4.")]),t._v(" "),a("h1",{attrs:{id:"sgb-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-functions"}},[t._v("#")]),t._v(" SGB Functions")]),t._v(" "),a("h2",{attrs:{id:"sgb-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-description"}},[t._v("#")]),t._v(" SGB Description")]),t._v(" "),a("h4",{attrs:{id:"general-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-description"}},[t._v("#")]),t._v(" General Description")]),t._v(" "),a("p",[t._v("Basically, the SGB (Super Game Boy) is an adapter cartridge that allows\nto play Game Boy games on a SNES (Super Nintendo Entertainment System)\ngaming console. In detail, you plug the Game Boy cartridge into the SGB\ncartridge, then plug the SGB cartridge into the SNES, and then connect\nthe SNES to your TV Set. In result, games can be played and viewed on\nthe TV Set, and are controlled by using the SNES joypad(s).")]),t._v(" "),a("h4",{attrs:{id:"more-technical-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-technical-description"}},[t._v("#")]),t._v(" More Technical Description")]),t._v(" "),a("p",[t._v("The SGB cartridge just contains a normal Game Boy CPU and normal Game Boy\nvideo controller. Normally the video signal from this controller would\nbe sent to the LCD screen, however, in this special case the SNES read\nout the video signal and displays it on the TV set by using a special\nSNES BIOS ROM which is located in the SGB cartridge. Also, normal\nGame Boy sound output is forwared to the SNES and output to the TV Set,\nvice versa, joypad input is forwared from the SNES controller(s) to the\nGame Boy joypad inputs.")]),t._v(" "),a("h4",{attrs:{id:"normal-monochrome-games"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normal-monochrome-games"}},[t._v("#")]),t._v(" Normal Monochrome Games")]),t._v(" "),a("p",[t._v("Any Game Boy games which have been designed for monochrome handheld\nGame Boy systems will work with the SGB hardware as well. The SGB will\napply a four color palette to these games by replacing the normal four\ngrayshades. The 160x144 pixel gamescreen is displayed in the middle of\nthe 256x224 pixel SNES screen (the unused area is filled by a screen\nborder bitmap). The user may access built-in menues, allowing to change\ncolor palette data, to select between several pre-defined borders, etc.")]),t._v(" "),a("p",[t._v("Games that have been designed to support SGB functions may also access\nthe following additional features:")]),t._v(" "),a("h4",{attrs:{id:"colorized-game-screen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#colorized-game-screen"}},[t._v("#")]),t._v(" Colorized Game Screen")]),t._v(" "),a("p",[t._v("There's limited ability to colorize the gamescreen by assigning custom\ncolor palettes to each 20x18 display characters, however, this works\nmainly for static display data such like title screens or status bars,\nthe 20x18 color attribute map is non-scrollable, and it is not possible\nto assign separate colors to moveable foreground sprites (OBJs), so that\nanimated screen regions will be typically restricted to using a single\npalette of four colors only.")]),t._v(" "),a("h4",{attrs:{id:"snes-foreground-sprites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snes-foreground-sprites"}},[t._v("#")]),t._v(" SNES Foreground Sprites")]),t._v(" "),a("p",[t._v("Up to 24 foreground sprites (OBJs) of 8x8 or 16x16 pixels, 16 colors can\nbe displayed. When replacing (or just overlaying) the normal Game Boy\nOBJs by SNES OBJs it'd be thus possible to display OBJs with other\ncolors than normal background area. This method doesn't appear to be\nvery popular, even though it appears to be quite easy to implement,\nhowever, the bottommost character line of the gamescreen will be masked\nout because this area is used to transfer OAM data to the SNES.")]),t._v(" "),a("h4",{attrs:{id:"the-sgb-border"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-sgb-border"}},[t._v("#")]),t._v(" The SGB Border")]),t._v(" "),a("p",[t._v("The possibly most popular and most impressive feature is to replace the\ndefault SGB screen border by a custom bitmap which is stored in the game\ncartridge.")]),t._v(" "),a("h4",{attrs:{id:"multiple-joypads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-joypads"}},[t._v("#")]),t._v(" Multiple Joypads")]),t._v(" "),a("p",[t._v("Up to four joypads can be conected to the SNES, and SGB software may\nread-out each of these joypads separately, allowing up to four players\nto play the same game simultaneously. Unlike for multiplayer handheld\ngames, this requires only one game cartridge and only one SGB/SNES, and\nno link cables are required, the downside is that all players must share\nthe same display screen.")]),t._v(" "),a("h4",{attrs:{id:"sound-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-functions"}},[t._v("#")]),t._v(" Sound Functions")]),t._v(" "),a("p",[t._v("Beside for normal Game Boy sound, a number of digital sound effects is\npre-defined in the SNES BIOS, these effects may be accessed quite\neasily. Programmers whom are familiar with SNES sounds may also access\nthe SNES sound chip, or use the SNES MIDI engine directly in order to\nproduce other sound effects or music.")]),t._v(" "),a("h4",{attrs:{id:"taking-control-of-the-snes-cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taking-control-of-the-snes-cpu"}},[t._v("#")]),t._v(" Taking Control of the SNES CPU")]),t._v(" "),a("p",[t._v("Finally, it is possible to write program code or data into SNES memory,\nand to execute such program code by using the SNES CPU.")]),t._v(" "),a("h4",{attrs:{id:"sgb-system-clock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-system-clock"}},[t._v("#")]),t._v(" SGB System Clock")]),t._v(" "),a("p",[t._v('Because the SGB is synchronized to the SNES CPU, the Game Boy system\nclock is directly chained to the SNES system clock. In result, the\nGame Boy CPU, video controller, timers, and sound frequencies will be all\noperated approx 2.4% faster than handheld systems. Basically, this\nshould be no problem, and the game will just run a little bit faster.\nHowever sensitive musicians may notice that sound frequencies are a bit\ntoo high, programs that support SGB functions may avoid this effect by\nreducing frequencies of Game Boy sounds when having detected SGB\nhardware. Also, "PAL version" SNES models which use a\n50Hz display refresh rate (rather than 60Hz) result in\nrespectively slower Game Boy timings.')]),t._v(" "),a("ul",[a("li",[t._v("NTSC SGB: 21.477 MHz master clock, 4.2955 MHz GB clock, 2.41% fast")]),t._v(" "),a("li",[t._v("PAL SGB: 21.281 MHz master clock, 4.2563 MHz GB clock, 1.48% fast")]),t._v(" "),a("li",[t._v("NTSC SGB2: Separate 20.972 MHz crystal, correct speed")])]),t._v(" "),a("h2",{attrs:{id:"sgb-unlocking-and-detecting-sgb-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-unlocking-and-detecting-sgb-functions"}},[t._v("#")]),t._v(" SGB Unlocking and Detecting SGB Functions")]),t._v(" "),a("h4",{attrs:{id:"cartridge-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cartridge-header"}},[t._v("#")]),t._v(" Cartridge Header")]),t._v(" "),a("p",[t._v("SGB games are required to have a cartridge header with Nintendo and\nproper checksum just as normal Game Boy games. Also, two special entries\nmust be set in order to unlock SGB functions:")]),t._v(" "),a("ul",[a("li",[t._v("146h - SGB Flag - Must be set to 03h for SGB games")]),t._v(" "),a("li",[t._v("14Bh - Old Licensee Code - Must be set 33h for SGB games")])]),t._v(" "),a("p",[t._v('When these entries aren\'t set, the game will still work just like all\n"monochrome" Game Boy games, but it cannot access any of the special\nSGB functions.')]),t._v(" "),a("h4",{attrs:{id:"detecting-sgb-hardware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detecting-sgb-hardware"}},[t._v("#")]),t._v(" Detecting SGB hardware")]),t._v(" "),a("p",[t._v("The recommended detection method is to send a MLT_REQ command which\nenables two (or four) joypads. A normal handheld Game Boy will ignore\nthis command, a SGB will now return incrementing joypad IDs each time\nwhen deselecting keyboard lines (see MLT_REQ description for details).\nNow read-out joypad state/IDs several times, and if the ID-numbers are\nchanging, then it is a SGB (a normal Game Boy would typically always\nreturn 0Fh as ID). Finally, when not intending to use more than one\njoypad, send another MLT_REQ command in order to re-disable the\nmulti-controller mode. Detection works regardless of whether and how\nmany joypads are physically connected to the SNES. However, detection\nworks only when having unlocked SGB functions in the cartridge header,\nas described above.")]),t._v(" "),a("h4",{attrs:{id:"separating-between-sgb-and-sgb2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#separating-between-sgb-and-sgb2"}},[t._v("#")]),t._v(" Separating between SGB and SGB2")]),t._v(" "),a("p",[t._v("It is also possible to separate between SGB and SGB2 models by examining\nthe inital value of the accumulator (register A) directly after startup.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Value")]),t._v(" "),a("th",[t._v("Console")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$01")]),t._v(" "),a("td",[t._v("SGB or original Game Boy (DMG)")])]),t._v(" "),a("tr",[a("td",[t._v("$FF")]),t._v(" "),a("td",[t._v("SGB2 or Game Boy Pocket")])]),t._v(" "),a("tr",[a("td",[t._v("$11")]),t._v(" "),a("td",[t._v("CGB or GBA")])])])]),t._v(" "),a("p",[t._v("Because values 01h and FFh are shared for both handhelds and SGBs, it is\nstill required to use the above MLT_REQ detection procedure. As far as\nI know the SGB2 doesn't have any extra features which'd require\nseparate SGB2 detection except for curiosity purposes, for example, the\ngame \"Tetris DX\" chooses to display an alternate SGB border on SGB2s.")]),t._v(" "),a("p",[t._v("Only the SGB2 contains a link port.")]),t._v(" "),a("h2",{attrs:{id:"sgb-command-packet-transfers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-packet-transfers"}},[t._v("#")]),t._v(" SGB Command Packet Transfers")]),t._v(" "),a("p",[t._v("Command packets (aka Register Files) are transferred from the Game Boy to\nthe SNES by using P14 and P15 output lines of the JOYPAD register\n(FF00h).  These same lines are also used to select the two rows in the\nGame Boy keyboard matrix (which still works).")]),t._v(" "),a("h4",{attrs:{id:"transferring-bits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transferring-bits"}},[t._v("#")]),t._v(" Transferring Bits")]),t._v(" "),a("p",[t._v('A command packet transfer must be initiated by setting both P14 and P15\nto LOW, this will reset and start the SNES packet receiving program.\nData is then transferred (LSB first), setting P14=LOW will indicate a\n"0" bit, and setting P15=LOW will indicate a "1" bit. For example:')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    RESET  0   0   1   1   0   1   0\nP14  --_---_---_-----------_-------_--...\nP15  --_-----------_---_-------_------...\n")])])]),a("p",[t._v("Data and reset pulses must be kept LOW for at least 5us. P14 and P15\nmust be kept both HIGH for at least 15us between any pulses. Obviously,\nit'd be no good idea to access the JOYPAD register during the transfer,\nfor example, in case that your VBlank interrupt procedure reads-out\njoypad states each frame, be sure to disable that interrupt during the\ntransfer (or disable only the joypad procedure by using a software\nflag).")]),t._v(" "),a("h4",{attrs:{id:"transferring-packets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transferring-packets"}},[t._v("#")]),t._v(" Transferring Packets")]),t._v(" "),a("p",[t._v('Each packet is invoked by a RESET pulse, then 128 bits of data are\ntransferred (16 bytes, LSB of first byte first), and finally, a\n"0" bit must be transferred as stop bit. The structure of normal\npackets thus is:')]),t._v(" "),a("ol",[a("li",[t._v("1 pulse: Start signal")]),t._v(" "),a("li",[t._v("1 byte: Header byte (Command Code * 8 + Length)")]),t._v(" "),a("li",[t._v("15 bytes: Parameter Data")]),t._v(" "),a("li",[t._v("1 bit: Stop Bit (0)")])]),t._v(" "),a("p",[t._v('The above "Length" indicates the total number of packets (1-7,\nincluding the first packet) which will be sent.  If more than 15\nparameter bytes are used, then further packet(s) will follow, as such:')]),t._v(" "),a("ol",[a("li",[t._v("1 pulse: Start signal")]),t._v(" "),a("li",[t._v("16 bytes: Parameter Data")]),t._v(" "),a("li",[t._v("1 bit: Stop Bit (0)")])]),t._v(" "),a("p",[t._v("By using all 7 packets, up to 111 data bytes (15+16*6) may be sent.\nUnused bytes at the end of the last packet don't matter. A 60ms (4\nframes) delay should be invoked between each packet transfer.")]),t._v(" "),a("h2",{attrs:{id:"sgb-vram-transfers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-vram-transfers"}},[t._v("#")]),t._v(" SGB VRAM Transfers")]),t._v(" "),a("h4",{attrs:{id:"overview-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-2"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("Beside for the packet transfer method, larger data blocks of 4KBytes can\nbe transferred by using the video signal. These transfers are invoked by\nfirst sending one of the commands with the ending _TRN (by using normal\npacket transfer), the 4K data block is then read-out by the SNES from\nGame Boy display memory during the next frame.")]),t._v(" "),a("h4",{attrs:{id:"transfer-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-data"}},[t._v("#")]),t._v(" Transfer Data")]),t._v(" "),a("p",[t._v("Normally, transfer data should be stored at 8000h-8FFFh in Game Boy VRAM,\neven though the SNES receives the data in from display scanlines, it\nwill automatically re-produce the same ordering of bits and bytes, as\nbeing originally stored at 8000h-8FFFh in Game Boy memory.")]),t._v(" "),a("h4",{attrs:{id:"preparing-the-display"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preparing-the-display"}},[t._v("#")]),t._v(" Preparing the Display")]),t._v(" "),a("p",[t._v("The above method works only when recursing the following things: BG Map\nmust display unsigned characters 00h-FFh on the screen; 00h..13h in\nfirst line, 14h..27h in next line, etc. The Game Boy display must be\nenabled, the display may not be scrolled, OBJ sprites should not overlap\nthe background tiles, the BGP palette register must be set to E4h.")]),t._v(" "),a("h4",{attrs:{id:"transfer-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-time"}},[t._v("#")]),t._v(" Transfer Time")]),t._v(" "),a("p",[t._v("Note that the transfer data should be prepared in VRAM "),a("strong",[t._v("before")]),t._v(" sending\nthe transfer command packet. The actual transfer starts at the beginning\nof the next frame after the command has been sent, and the transfer ends\nat the end of the 5th frame after the command has been sent (not\ncounting the frame in which the command has been sent). The displayed\ndata must not be modified during the transfer, as the SGB reads it in\nmultiple chunks.")]),t._v(" "),a("h4",{attrs:{id:"avoiding-screen-garbage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoiding-screen-garbage"}},[t._v("#")]),t._v(" Avoiding Screen Garbage")]),t._v(" "),a("p",[t._v('The display will contain "garbage" during the transfer, this\ndirt-effect can be avoided by freezing the screen (in the state which\nhas been displayed before the transfer) by using the MASK_EN command.\nOf course, this works only when actually executing the game on a SGB\n(and not on handheld Game Boy systems), it\'d be thus required to detect\nthe presence of SGB hardware before blindly sending VRAM data.')]),t._v(" "),a("h2",{attrs:{id:"sgb-command-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-summary"}},[t._v("#")]),t._v(" SGB Command Summary")]),t._v(" "),a("h4",{attrs:{id:"sgb-system-command-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-system-command-table"}},[t._v("#")]),t._v(" SGB System Command Table")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Explanation")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$00")]),t._v(" "),a("td",[t._v("PAL01")]),t._v(" "),a("td",[t._v("Set SGB Palette 0 & 1")])]),t._v(" "),a("tr",[a("td",[t._v("$01")]),t._v(" "),a("td",[t._v("PAL23")]),t._v(" "),a("td",[t._v("Set SGB Palette 2 & 3")])]),t._v(" "),a("tr",[a("td",[t._v("$02")]),t._v(" "),a("td",[t._v("PAL03")]),t._v(" "),a("td",[t._v("Set SGB Palette 0 & 3")])]),t._v(" "),a("tr",[a("td",[t._v("$03")]),t._v(" "),a("td",[t._v("PAL12")]),t._v(" "),a("td",[t._v("Set SGB Palette 1 & 2")])]),t._v(" "),a("tr",[a("td",[t._v("$04")]),t._v(" "),a("td",[t._v("ATTR_BLK")]),t._v(" "),a("td",[t._v('"Block" Area Designation Mode')])]),t._v(" "),a("tr",[a("td",[t._v("$05")]),t._v(" "),a("td",[t._v("ATTR_LIN")]),t._v(" "),a("td",[t._v('"Line" Area Designation Mode')])]),t._v(" "),a("tr",[a("td",[t._v("$06")]),t._v(" "),a("td",[t._v("ATTR_DIV")]),t._v(" "),a("td",[t._v('"Divide" Area Designation Mode')])]),t._v(" "),a("tr",[a("td",[t._v("$07")]),t._v(" "),a("td",[t._v("ATTR_CHR")]),t._v(" "),a("td",[t._v('"1CHR" Area Designation Mode')])]),t._v(" "),a("tr",[a("td",[t._v("$08")]),t._v(" "),a("td",[t._v("SOUND")]),t._v(" "),a("td",[t._v("Sound On/Off")])]),t._v(" "),a("tr",[a("td",[t._v("$09")]),t._v(" "),a("td",[t._v("SOU_TRN")]),t._v(" "),a("td",[t._v("Transfer Sound PRG/DATA")])]),t._v(" "),a("tr",[a("td",[t._v("$0A")]),t._v(" "),a("td",[t._v("PAL_SET")]),t._v(" "),a("td",[t._v("Set SGB Palette Indirect")])]),t._v(" "),a("tr",[a("td",[t._v("$0B")]),t._v(" "),a("td",[t._v("PAL_TRN")]),t._v(" "),a("td",[t._v("Set System Color Palette Data")])]),t._v(" "),a("tr",[a("td",[t._v("$0C")]),t._v(" "),a("td",[t._v("ATRC_EN")]),t._v(" "),a("td",[t._v("Enable/disable Attraction Mode")])]),t._v(" "),a("tr",[a("td",[t._v("$0D")]),t._v(" "),a("td",[t._v("TEST_EN")]),t._v(" "),a("td",[t._v("Speed Function")])]),t._v(" "),a("tr",[a("td",[t._v("$0E")]),t._v(" "),a("td",[t._v("ICON_EN")]),t._v(" "),a("td",[t._v("SGB Function")])]),t._v(" "),a("tr",[a("td",[t._v("$0F")]),t._v(" "),a("td",[t._v("DATA_SND")]),t._v(" "),a("td",[t._v("SUPER NES WRAM Transfer 1")])]),t._v(" "),a("tr",[a("td",[t._v("$10")]),t._v(" "),a("td",[t._v("DATA_TRN")]),t._v(" "),a("td",[t._v("SUPER NES WRAM Transfer 2")])]),t._v(" "),a("tr",[a("td",[t._v("$11")]),t._v(" "),a("td",[t._v("MLT_REG")]),t._v(" "),a("td",[t._v("Controller 2 Request")])]),t._v(" "),a("tr",[a("td",[t._v("$12")]),t._v(" "),a("td",[t._v("JUMP")]),t._v(" "),a("td",[t._v("Set SNES Program Counter")])]),t._v(" "),a("tr",[a("td",[t._v("$13")]),t._v(" "),a("td",[t._v("CHR_TRN")]),t._v(" "),a("td",[t._v("Transfer Character Font Data")])]),t._v(" "),a("tr",[a("td",[t._v("$14")]),t._v(" "),a("td",[t._v("PCT_TRN")]),t._v(" "),a("td",[t._v("Set Screen Data Color Data")])]),t._v(" "),a("tr",[a("td",[t._v("$15")]),t._v(" "),a("td",[t._v("ATTR_TRN")]),t._v(" "),a("td",[t._v("Set Attribute from ATF")])]),t._v(" "),a("tr",[a("td",[t._v("$16")]),t._v(" "),a("td",[t._v("ATTR_SET")]),t._v(" "),a("td",[t._v("Set Data to ATF")])]),t._v(" "),a("tr",[a("td",[t._v("$17")]),t._v(" "),a("td",[t._v("MASK_EN")]),t._v(" "),a("td",[t._v("Game Boy Window Mask")])]),t._v(" "),a("tr",[a("td",[t._v("$18")]),t._v(" "),a("td",[t._v("OBJ_TRN")]),t._v(" "),a("td",[t._v("Super NES OBJ Mode")])])])]),t._v(" "),a("h2",{attrs:{id:"sgb-color-palettes-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-color-palettes-overview"}},[t._v("#")]),t._v(" SGB Color Palettes Overview")]),t._v(" "),a("h4",{attrs:{id:"available-snes-palettes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#available-snes-palettes"}},[t._v("#")]),t._v(" Available SNES Palettes")]),t._v(" "),a("p",[t._v("The SGB/SNES provides 8 palettes of 16 colors each, each color may be\ndefined out of a selection of 32768 colors (15 bit). Palettes 0-3 are\nused to colorize the gamescreen, only the first four colors of each of\nthese palettes are used. Palettes 4-7 are used for the SGB Border, all\n16 colors of each of these palettes may be used.")]),t._v(" "),a("h4",{attrs:{id:"color-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#color-format"}},[t._v("#")]),t._v(" Color format")]),t._v(" "),a("p",[t._v("Colors are encoded as 16-bit RGB numbers, in the following way:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("FEDC BA98 7654 3210\n0BBB BBGG GGGR RRRR\n")])])]),a("p",[t._v("Here's a formula to convert 24-bit RGB into SNES format:\n"),a("code",[t._v("(color & 0xF8) << 7 | (color & 0xF800) >> 6 | (color & 0xF80000) >> 19")]),a("br")]),t._v(" "),a("p",[t._v("The palettes are encoded "),a("strong",[t._v("little-endian")]),t._v(", thus, the R/G byte comes\nfirst in memory.")]),t._v(" "),a("h4",{attrs:{id:"color-0-restriction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#color-0-restriction"}},[t._v("#")]),t._v(" Color 0 Restriction")]),t._v(" "),a("p",[t._v("Color 0 of each of the eight palettes is transparent, causing the\nbackdrop color to be displayed instead. The backdrop color is typically\ndefined by the most recently color being assigned to Color 0 (regardless\nof the palette number being used for that operation). Effectively,\ngamescreen palettes can have only three custom colors each, and SGB\nborder palettes only 15 colors each, additionally, color 0 can be used\nfor for all palettes, which will then all share the same color though.")]),t._v(" "),a("h4",{attrs:{id:"translation-of-grayshades-into-colors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#translation-of-grayshades-into-colors"}},[t._v("#")]),t._v(" Translation of Grayshades into Colors")]),t._v(" "),a("p",[t._v("Because the SGB/SNES reads out the Game Boy video controllers display\nsignal, it translates the different grayshades from the signal into SNES\ncolors as such:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("White       --\x3e  Color #0\nLight Gray  --\x3e  Color #1\nDark Gray   --\x3e  Color #2\nBlack       --\x3e  Color #3\n")])])]),a("p",[t._v("Note that Game Boy colors 0-3 are assigned to user-selectable grayshades\nby the Game Boy's BGP, OBP0, and OBP1 registers. There is thus no fixed\nrelationship between Game Boy colors 0-3 and SNES colors 0-3.")]),t._v(" "),a("h5",{attrs:{id:"using-game-boy-bgp-obp-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-game-boy-bgp-obp-registers"}},[t._v("#")]),t._v(" Using Game Boy BGP/OBP Registers")]),t._v(" "),a("p",[t._v('A direct translation of GB color 0-3 into SNES color 0-3 may be produced\nby setting BGP/OBPx registers to a value of 0E4h each. However, in case\nthat your program uses black background for example, then you may\ninternally assign background as "White" at the Game Boy side by BGP/OBP\nregisters (which is then interpreted as SNES color 0, which is shared\nfor all SNES palettes). The advantage is that you may define Color 0 as\nBlack at the SNES side, and may assign custom colors for Colors 1-3 of\neach SNES palette.')]),t._v(" "),a("h4",{attrs:{id:"system-color-palette-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-color-palette-memory"}},[t._v("#")]),t._v(" System Color Palette Memory")]),t._v(" "),a("p",[t._v("Beside for the actually visible palettes, up to 512 palettes of 4 colors\neach may be defined in SNES RAM. The palettes are just stored in RAM\nwithout any relationship to the displayed picture; however, these\npre-defined colors may be transferred to actually visible palettes\nslightly faster than when transferring palette data by separate command\npackets.")]),t._v(" "),a("h2",{attrs:{id:"sgb-palette-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-palette-commands"}},[t._v("#")]),t._v(" SGB Palette Commands")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-00h-pal01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-00h-pal01"}},[t._v("#")]),t._v(" SGB Command 00h - PAL01")]),t._v(" "),a("p",[t._v("Transmit color data for SGB palette 0, color 0-3, and for SGB palette 1,\ncolor 1-3 (without separate color 0).")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=01h)")]),a("br"),t._v(" "),a("code",[t._v("1-E Color Data for 7 colors of 2 bytes (16 bits) each:")]),a("br"),t._v(" "),a("code",[t._v("Bit 0-4 - Red Intensity (0-31)")]),a("br"),t._v(" "),a("code",[t._v("Bit 5-9 - Green Intensity (0-31)")]),a("br"),t._v(" "),a("code",[t._v("Bit 10-14 - Blue Intensity (0-31)")]),a("br"),t._v(" "),a("code",[t._v("Bit 15 - Not used (zero)")]),a("br"),t._v(" "),a("code",[t._v("F Not used (00h)")]),a("br")]),t._v(" "),a("p",[t._v("This is the same RGB5 format as "),a("a",{attrs:{href:"#lcd-color-palettes-cgb-only"}},[t._v("Game Boy Color palette\nentry")]),t._v(", though\nwithout the LCD correction. The value transferred as color 0 will be\napplied for all four palettes.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-01h-pal23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-01h-pal23"}},[t._v("#")]),t._v(" SGB Command 01h - PAL23")]),t._v(" "),a("p",[t._v("Same as above PAL01, but for Palettes 2 and 3 respectively.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-02h-pal03"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-02h-pal03"}},[t._v("#")]),t._v(" SGB Command 02h - PAL03")]),t._v(" "),a("p",[t._v("Same as above PAL01, but for Palettes 0 and 3 respectively.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-03h-pal12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-03h-pal12"}},[t._v("#")]),t._v(" SGB Command 03h - PAL12")]),t._v(" "),a("p",[t._v("Same as above PAL01, but for Palettes 1 and 2 respectively.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-0ah-pal-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0ah-pal-set"}},[t._v("#")]),t._v(" SGB Command 0Ah - PAL_SET")]),t._v(" "),a("p",[t._v("Used to copy pre-defined palette data from SGB system color palettes to\nactual SNES palettes.")]),t._v(" "),a("p",[t._v("Note: all palette numbers are little-endian.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1-2 System Palette number for SGB Color Palette 0 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("3-4 System Palette number for SGB Color Palette 1 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("5-6 System Palette number for SGB Color Palette 2 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("7-8 System Palette number for SGB Color Palette 3 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("9 Attribute File")]),a("br"),t._v(" "),a("code",[t._v("Bit 0-5 - Attribute File Number (00h-2Ch) (Used only if Bit7=1)")]),a("br"),t._v(" "),a("code",[t._v("Bit 6 - Cancel Mask (0=No change, 1=Yes)")]),a("br"),t._v(" "),a("code",[t._v("Bit 7 - Use Attribute File (0=No, 1=Apply above ATF Number)")]),a("br"),t._v(" "),a("code",[t._v("A-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("Before using this function, System Palette data should be initialized by\nPAL_TRN command, and (when used) Attribute File data should be\ninitialized by ATTR_TRN.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-0bh-pal-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0bh-pal-trn"}},[t._v("#")]),t._v(" SGB Command 0Bh - PAL_TRN")]),t._v(" "),a("p",[t._v('Used to initialize SGB system color palettes in SNES RAM. System color\npalette memory contains 512 pre-defined palettes, these palettes do not\ndirectly affect the display, however, the PAL_SET command may be later\nused to transfer four of these "logical" palettes to actual visible\n"physical" SGB palettes. Also, the OBJ_TRN function will use groups\nof 4 System Color Palettes (4*4 colors) for SNES OBJ palettes (16\ncolors).')]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("The palette data is sent by VRAM-Transfer (4 KBytes).")]),t._v(" "),a("p",[a("code",[t._v("000-FFF Data for System Color Palette 0-511")]),a("br")]),t._v(" "),a("p",[t._v("Each Palette consists of four 16-bit color definitions (8 bytes). Note:\nThe data is stored at 3000h-3FFFh in SNES memory.")]),t._v(" "),a("h2",{attrs:{id:"sgb-color-attribute-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-color-attribute-commands"}},[t._v("#")]),t._v(" SGB Color Attribute Commands")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-04h-attr-blk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-04h-attr-blk"}},[t._v("#")]),t._v(" SGB Command 04h - ATTR_BLK")]),t._v(" "),a("p",[t._v("Used to specify color attributes for the inside or outside of one or\nmore rectangular screen regions.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (length=1..7)")]),a("br"),t._v(" "),a("code",[t._v("1 Number of Data Sets (01h..12h)")]),a("br"),t._v(" "),a("code",[t._v("2-7 Data Set #1")]),a("br"),t._v(" "),a("code",[t._v("Byte 0 - Control Code (0-7)")]),a("br"),t._v(" "),a("code",[t._v("Bit 0 - Change Colors inside of surrounded area (1=Yes)")]),a("br"),t._v(" "),a("code",[t._v("Bit 1 - Change Colors of surrounding character line (1=Yes)")]),a("br"),t._v(" "),a("code",[t._v("Bit 2 - Change Colors outside of surrounded area (1=Yes)")]),a("br"),t._v(" "),a("code",[t._v("Bit 3-7 - Not used (zero)")]),a("br"),t._v(" "),a("code",[t._v("Exception: When changing only the Inside or Outside, then the")]),a("br"),t._v(" "),a("code",[t._v("Surrounding line becomes automatically changed to same color.")]),a("br"),t._v(" "),a("code",[t._v("Byte 1 - Color Palette Designation")]),a("br"),t._v(" "),a("code",[t._v("Bit 0-1 - Palette Number for inside of surrounded area")]),a("br"),t._v(" "),a("code",[t._v("Bit 2-3 - Palette Number for surrounding character line")]),a("br"),t._v(" "),a("code",[t._v("Bit 4-5 - Palette Number for outside of surrounded area")]),a("br"),t._v(" "),a("code",[t._v("Bit 6-7 - Not used (zero)")]),a("br"),t._v(" "),a("code",[t._v("Data Set Byte 2 - Coordinate X1 (left)")]),a("br"),t._v(" "),a("code",[t._v("Data Set Byte 3 - Coordinate Y1 (upper)")]),a("br"),t._v(" "),a("code",[t._v("Data Set Byte 4 - Coordinate X2 (right)")]),a("br"),t._v(" "),a("code",[t._v("Data Set Byte 5 - Coordinate Y2 (lower)")]),a("br"),t._v(" "),a("code",[t._v("Specifies the coordinates of the surrounding rectangle.")]),a("br"),t._v(" "),a("code",[t._v("8-D Data Set #2 (if any)")]),a("br"),t._v(" "),a("code",[t._v("E-F Data Set #3 (continued at 0-3 in next packet) (if any)")]),a("br")]),t._v(" "),a("p",[t._v("When sending three or more data sets, data is continued in further\npacket(s). Unused bytes at the end of the last packet should be set to\nzero. The format of the separate Data Sets is described below.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-05h-attr-lin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-05h-attr-lin"}},[t._v("#")]),t._v(" SGB Command 05h - ATTR_LIN")]),t._v(" "),a("p",[t._v("Used to specify color attributes of one or more horizontal or vertical\ncharacter lines.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (length=1..7)")]),a("br"),t._v(" "),a("code",[t._v("1 Number of Data Sets (01h..6Eh) (one byte each)")]),a("br"),t._v(" "),a("code",[t._v("2 Data Set #1")]),a("br"),t._v(" "),a("code",[t._v("Bit 0-4 - Line Number (X- or Y-coordinate, depending on bit 7)")]),a("br"),t._v(" "),a("code",[t._v("Bit 5-6 - Palette Number (0-3)")]),a("br"),t._v(" "),a("code",[t._v("Bit 7 - H/V Mode Bit (0=Vertical line, 1=Horizontal Line)")]),a("br"),t._v(" "),a("code",[t._v("3 Data Set #2 (if any)")]),a("br"),t._v(" "),a("code",[t._v("4 Data Set #3 (if any)")]),a("br"),t._v(" "),a("code",[t._v("etc.")]),a("br")]),t._v(" "),a("p",[t._v("When sending 15 or more data sets, data is continued in further\npacket(s). Unused bytes at the end of the last packet should be set to\nzero. The format of the separate Data Sets (one byte each) is described\nbelow. The length of each line reaches from one end of the screen to the\nother end. In case that some lines overlap each other, then lines from\nlastmost data sets will overwrite lines from previous data sets.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-06h-attr-div"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-06h-attr-div"}},[t._v("#")]),t._v(" SGB Command 06h - ATTR_DIV")]),t._v(" "),a("p",[t._v("Used to split the screen into two halfes, and to assign separate color\nattributes to each half, and to the division line between them.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Color Palette Numbers and H/V Mode Bit")]),a("br"),t._v(" "),a("code",[t._v("Bit 0-1 Palette Number below/right of division line")]),a("br"),t._v(" "),a("code",[t._v("Bit 2-3 Palette Number above/left of division line")]),a("br"),t._v(" "),a("code",[t._v("Bit 4-5 Palette Number for division line")]),a("br"),t._v(" "),a("code",[t._v("Bit 6 H/V Mode Bit (0=split left/right, 1=split above/below)")]),a("br"),t._v(" "),a("code",[t._v("2 X- or Y-Coordinate (depending on H/V bit)")]),a("br"),t._v(" "),a("code",[t._v("3-F Not used (zero)")]),a("br")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-07h-attr-chr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-07h-attr-chr"}},[t._v("#")]),t._v(" SGB Command 07h - ATTR_CHR")]),t._v(" "),a("p",[t._v("Used to specify color attributes for separate characters.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (length=1..6)")]),a("br"),t._v(" "),a("code",[t._v("1 Beginning X-Coordinate")]),a("br"),t._v(" "),a("code",[t._v("2 Beginning Y-Coordinate")]),a("br"),t._v(" "),a("code",[t._v("3-4 Number of Data Sets (1-360)")]),a("br"),t._v(" "),a("code",[t._v("5 Writing Style (0=Left to Right, 1=Top to Bottom)")]),a("br"),t._v(" "),a("code",[t._v("6 Data Sets 1-4 (Set 1 in MSBs, Set 4 in LSBs)")]),a("br"),t._v(" "),a("code",[t._v("7 Data Sets 5-8 (if any)")]),a("br"),t._v(" "),a("code",[t._v("8 Data Sets 9-12 (if any)")]),a("br"),t._v(" "),a("code",[t._v("etc.")]),a("br")]),t._v(" "),a("p",[t._v("When sending 41 or more data sets, data is continued in further\npacket(s). Unused bytes at the end of the last packet should be set to\nzero. Each data set consists of two bits, indicating the palette number\nfor one character. Depending on the writing style, data sets are written\nfrom left to right, or from top to bottom. In either case the function\nwraps to the next row/column when reaching the end of the screen.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-15h-attr-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-15h-attr-trn"}},[t._v("#")]),t._v(" SGB Command 15h - ATTR_TRN")]),t._v(" "),a("p",[t._v("Used to initialize Attribute Files (ATFs) in SNES RAM. Each ATF consists\nof 20x18 color attributes for the Game Boy screen. This function does not\ndirectly affect display attributes. Instead, one of the defined ATFs may\nbe copied to actual display memory at a later time by using ATTR_SET or\nPAL_SET functions.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("The ATF data is sent by VRAM-Transfer (4 KBytes).")]),t._v(" "),a("p",[a("code",[t._v("000-FD1 Data for ATF0 through ATF44 (4050 bytes)")]),a("br"),t._v(" "),a("code",[t._v("FD2-FFF Not used")]),a("br")]),t._v(" "),a("p",[t._v("Each ATF consists of 90 bytes, that are 5 bytes (20x2bits) for each of\nthe 18 character lines of the Game Boy window. The two most significant\nbits of the first byte define the color attribute (0-3) for the first\ncharacter of the first line, the next two bits the next character, and\nso on.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-16h-attr-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-16h-attr-set"}},[t._v("#")]),t._v(" SGB Command 16h - ATTR_SET")]),t._v(" "),a("p",[t._v("Used to transfer attributes from Attribute File (ATF) to Game Boy window.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Attribute File Number (00-2Ch), Bit 6=Cancel Mask")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("When above Bit 6 is set, the Game Boy screen becomes re-enabled after the\ntransfer (in case it has been disabled/frozen by MASK_EN command).\nNote: The same functions may be (optionally) also included in PAL_SET\ncommands, as described in the chapter about Color Palette Commands.")]),t._v(" "),a("h2",{attrs:{id:"sgb-sound-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-sound-functions"}},[t._v("#")]),t._v(" SGB Sound Functions")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-08h-sound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-08h-sound"}},[t._v("#")]),t._v(" SGB Command 08h - SOUND")]),t._v(" "),a("p",[t._v("Used to start/stop internal sound effect, start/stop sound using\ninternal tone data.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Sound Effect A (Port 1) Decrescendo 8-bit Sound Code")]),a("br"),t._v(" "),a("code",[t._v("2 Sound Effect B (Port 2) Sustain 8-bit Sound Code")]),a("br"),t._v(" "),a("code",[t._v("3 Sound Effect Attributes")]),a("br"),t._v(" "),a("code",[t._v("Bit 0-1 - Sound Effect A Pitch (0..3=Low..High)")]),a("br"),t._v(" "),a("code",[t._v("Bit 2-3 - Sound Effect A Volume (0..2=High..Low, 3=Mute on)")]),a("br"),t._v(" "),a("code",[t._v("Bit 4-5 - Sound Effect B Pitch (0..3=Low..High)")]),a("br"),t._v(" "),a("code",[t._v("Bit 6-7 - Sound Effect B Volume (0..2=High..Low, 3=Not used)")]),a("br"),t._v(" "),a("code",[t._v("4 Music Score Code (must be zero if not used)")]),a("br"),t._v(" "),a("code",[t._v("5-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("See Sound Effect Tables below for a list of available pre-defined\neffects.")]),t._v(" "),a("p",[t._v("Notes:")]),t._v(" "),a("ol",[a("li",[t._v("Mute is only active when both bits D2 and D3 are 1.")]),t._v(" "),a("li",[t._v("When the volume is set for either Sound Effect A or Sound Effect B,\nmute is turned off.")]),t._v(" "),a("li",[t._v("When Mute on/off has been executed, the sound fades out/fades in.")]),t._v(" "),a("li",[t._v('Mute on/off operates on the (BGM) which is reproduced by Sound\nEffect A, Sound Effect B, and the Super NES APU. A "mute off" flag\ndoes not exist by itself. When mute flag is set, volume and pitch of\nSound Effect A (port 1) and Sound Effect B (port 2) must be set.')])]),t._v(" "),a("h4",{attrs:{id:"sgb-command-09h-sou-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-09h-sou-trn"}},[t._v("#")]),t._v(" SGB Command 09h - SOU_TRN")]),t._v(" "),a("p",[t._v("Used to transfer sound code or data to SNES Audio Processing Unit memory\n(APU-RAM).")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("The sound code/data is sent by VRAM-Transfer (4 KBytes).\nAll 16-bit values are little-endian.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' 000-001  Size of transfer data\n 002-003  Destination address in S-APU RAM (typically $2B00, see below)\n 004-XXX  Data to be transferred\n X+1-X+2  "End marker" (???), should be $0000\n X+3-X+4  S-APU jump address, should be $0400\n X+5-FFF  Remaining bytes ignored\n')])])]),a("p",[t._v("Possible destinations in APU-RAM are:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Memory range")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$0400-2AFF")]),t._v(" "),a("td",[t._v("APU-RAM Program Area (9.75KBytes)")])]),t._v(" "),a("tr",[a("td",[t._v("$2B00-4AFF")]),t._v(" "),a("td",[t._v("APU-RAM Sound Score Area (8Kbytes)")])]),t._v(" "),a("tr",[a("td",[t._v("$4DB0-EEFF")]),t._v(" "),a("td",[t._v("APU-RAM Sampling Data Area (40.25 Kbytes)")])])])]),t._v(" "),a("p",[t._v("This function may be used to take control of the SNES sound chip, and/or\nto access the SNES MIDI engine. In either case it requires deeper\nknowledge of SNES sound programming.")]),t._v(" "),a("h4",{attrs:{id:"sgb-sound-effect-a-b-tables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-sound-effect-a-b-tables"}},[t._v("#")]),t._v(" SGB Sound Effect A/B Tables")]),t._v(" "),a("p",[t._v('Below lists the digital sound effects that are pre-defined in the\nSGB BIOS, and which can be used with the SGB "SOUND" Command.\nEffect A and B may be simultaneously used.\nSound Effect A uses channels 6 and 7, Sound Effect B uses channels\n0, 1, 4 and 5. Effects that use less channels will use only the upper channels\n(eg. 4 and 5 for a B Effect with only two channels).')]),t._v(" "),a("h4",{attrs:{id:"sound-effect-a-flag-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-effect-a-flag-table"}},[t._v("#")]),t._v(" Sound Effect A Flag Table")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Recommended pitch")]),t._v(" "),a("th",[t._v("Nb of channels used")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("00")]),t._v(" "),a("td",[t._v("Dummy flag, re-trigger")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("01")]),t._v(" "),a("td",[t._v("Nintendo")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("02")]),t._v(" "),a("td",[t._v("Game Over")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("03")]),t._v(" "),a("td",[t._v("Drop")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("04")]),t._v(" "),a("td",[t._v("OK ... A")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("05")]),t._v(" "),a("td",[t._v("OK ... B")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("06")]),t._v(" "),a("td",[t._v("Select...A")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("07")]),t._v(" "),a("td",[t._v("Select...B")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("08")]),t._v(" "),a("td",[t._v("Select...C")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("09")]),t._v(" "),a("td",[t._v("Mistake...Buzzer")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("0A")]),t._v(" "),a("td",[t._v("Catch Item")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0B")]),t._v(" "),a("td",[t._v("Gate squeaks 1 time")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0C")]),t._v(" "),a("td",[t._v("Explosion...small")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0D")]),t._v(" "),a("td",[t._v("Explosion...medium")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0E")]),t._v(" "),a("td",[t._v("Explosion...large")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0F")]),t._v(" "),a("td",[t._v("Attacked...A")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[t._v("Attacked...B")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[t._v("Hit (punch)...A")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[t._v("Hit (punch)...B")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[t._v("Breath in air")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[t._v("Rocket Projectile...A")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[t._v("Rocket Projectile...B")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[t._v("Escaping Bubble")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[t._v("Jump")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[t._v("Fast Jump")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[t._v("Jet (rocket) takeoff")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1A")]),t._v(" "),a("td",[t._v("Jet (rocket) landing")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1B")]),t._v(" "),a("td",[t._v("Cup breaking")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("1C")]),t._v(" "),a("td",[t._v("Glass breaking")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("1D")]),t._v(" "),a("td",[t._v("Level UP")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("1E")]),t._v(" "),a("td",[t._v("Insert air")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1F")]),t._v(" "),a("td",[t._v("Sword swing")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[t._v("Water falling")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[t._v("Fire")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[t._v("Wall collapsing")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[t._v("Cancel")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("Walking")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[t._v("Blocking strike")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[t._v("Picture floats on & off")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[t._v("Fade in")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[t._v("Fade out")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[t._v("Window being opened")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("2A")]),t._v(" "),a("td",[t._v("Window being closed")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("2B")]),t._v(" "),a("td",[t._v("Big Laser")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("2C")]),t._v(" "),a("td",[t._v("Stone gate closes/opens")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("2D")]),t._v(" "),a("td",[t._v("Teleportation")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("2E")]),t._v(" "),a("td",[t._v("Lightning")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("2F")]),t._v(" "),a("td",[t._v("Earthquake")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[t._v("Small Laser")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("80")]),t._v(" "),a("td",[t._v("Effect A, stop/silent")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("2")])])])]),t._v(" "),a("p",[t._v("Sound effect A is used for formanto sounds (percussion sounds).")]),t._v(" "),a("h4",{attrs:{id:"sound-effect-b-flag-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-effect-b-flag-table"}},[t._v("#")]),t._v(" Sound Effect B Flag Table")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Recommended pitch")]),t._v(" "),a("th",[t._v("Nb of channels used")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("00")]),t._v(" "),a("td",[t._v("Dummy flag, re-trigger")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("01")]),t._v(" "),a("td",[t._v("Applause...small group")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("02")]),t._v(" "),a("td",[t._v("Applause...medium group")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("03")]),t._v(" "),a("td",[t._v("Applause...large group")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("04")]),t._v(" "),a("td",[t._v("Wind")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("05")]),t._v(" "),a("td",[t._v("Rain")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("06")]),t._v(" "),a("td",[t._v("Storm")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("07")]),t._v(" "),a("td",[t._v("Storm with wind/thunder")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("08")]),t._v(" "),a("td",[t._v("Lightning")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("09")]),t._v(" "),a("td",[t._v("Earthquake")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0A")]),t._v(" "),a("td",[t._v("Avalanche")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0B")]),t._v(" "),a("td",[t._v("Wave")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("0C")]),t._v(" "),a("td",[t._v("River")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0D")]),t._v(" "),a("td",[t._v("Waterfall")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("0E")]),t._v(" "),a("td",[t._v("Small character running")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("0F")]),t._v(" "),a("td",[t._v("Horse running")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[t._v("Warning sound")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[t._v("Approaching car")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[t._v("Jet flying")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[t._v("UFO flying")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[t._v("Electromagnetic waves")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[t._v("Score UP")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[t._v("Fire")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[t._v("Camera shutter, formanto")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[t._v("Write, formanto")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[t._v("Show up title, formanto")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("80")]),t._v(" "),a("td",[t._v("Effect B, stop/silent")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("4")])])])]),t._v(" "),a("p",[t._v("Sound effect B is mainly used for looping sounds (sustained sounds).")]),t._v(" "),a("h2",{attrs:{id:"sgb-system-control-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-system-control-commands"}},[t._v("#")]),t._v(" SGB System Control Commands")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-17h-mask-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-17h-mask-en"}},[t._v("#")]),t._v(" SGB Command 17h - MASK_EN")]),t._v(" "),a("p",[t._v("Used to mask the Game Boy window, among others this can be used to freeze\nthe Game Boy screen before transferring data through VRAM (the SNES then\nkeeps displaying the Game Boy screen, even though VRAM doesn't contain\nmeaningful display information during the transfer).")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Game Boy Screen Mask (0-3)")]),a("br"),t._v(" "),a("code",[t._v("0 Cancel Mask (Display activated)")]),a("br"),t._v(" "),a("code",[t._v("1 Freeze Screen (Keep displaying current picture)")]),a("br"),t._v(" "),a("code",[t._v("2 Blank Screen (Black)")]),a("br"),t._v(" "),a("code",[t._v("3 Blank Screen (Color 0)")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("Freezing works only if the SNES has stored a picture, that is, if necessary\nwait one or two frames before freezing (rather than freezing directly\nafter having displayed the picture). The Cancel Mask function may be\nalso invoked (optionally) by completion of PAL_SET and ATTR_SET\ncommands.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-0ch-atrc-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0ch-atrc-en"}},[t._v("#")]),t._v(" SGB Command 0Ch - ATRC_EN")]),t._v(" "),a("p",[t._v("Used to enable/disable Attraction mode, which is enabled by default.")]),t._v(" "),a("p",[t._v('Built-in borders other than the Game Boy frame and the plain black\nborder have a "screen saver" activated by pressing R, L, L, L, L, R or\nby leaving the controller alone for roughly 7 minutes (tested with 144p\nTest Suite). It is speculated that the animation may have interfered\nwith rarely-used SGB features, such as OBJ_TRN or JUMP, and that\nAttraction Disable disables this animation.')]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Attraction Disable (0=Enable, 1=Disable)")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-0dh-test-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0dh-test-en"}},[t._v("#")]),t._v(" SGB Command 0Dh - TEST_EN")]),t._v(" "),a("p",[t._v('Used to enable/disable test mode for "SGB-CPU variable clock speed\nfunction". This function is disabled by default.')]),t._v(" "),a("p",[t._v("This command does nothing on some SGB revisions. (SGBv2 confirmed,\nunknown on others)")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Test Mode Enable (0=Disable, 1=Enable)")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("Maybe intended to determine whether SNES operates at 50Hz or 60Hz\ndisplay refresh rate ??? Possibly result can be read-out from joypad\nregister ???")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-0eh-icon-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0eh-icon-en"}},[t._v("#")]),t._v(" SGB Command 0Eh - ICON_EN")]),t._v(" "),a("p",[t._v("Used to enable/disable ICON function. Possibly meant to enable/disable\nSGB/SNES popup menues which might otherwise activated during Game Boy\ngame play. By default all functions are enabled (0).")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Disable Bits")]),a("br"),t._v(" "),a("code",[t._v("Bit 0 - Use of SGB-Built-in Color Palettes (1=Disable)")]),a("br"),t._v(" "),a("code",[t._v("Bit 1 - Controller Set-up Screen (0=Enable, 1=Disable)")]),a("br"),t._v(" "),a("code",[t._v("Bit 2 - SGB Register File Transfer (0=Receive, 1=Disable)")]),a("br"),t._v(" "),a("code",[t._v("Bit 3-6 - Not used (zero)")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("Above Bit 2 will suppress all further packets/commands when set, this\nmight be useful when starting a monochrome game from inside of the\nSGB-menu of a multi-gamepak which contains a collection of different\ngames.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-0fh-data-snd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0fh-data-snd"}},[t._v("#")]),t._v(" SGB Command 0Fh - DATA_SND")]),t._v(" "),a("p",[t._v("Used to write one or more bytes directly into SNES Work RAM.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 SNES Destination Address, low")]),a("br"),t._v(" "),a("code",[t._v("2 SNES Destination Address, high")]),a("br"),t._v(" "),a("code",[t._v("3 SNES Destination Address, bank number")]),a("br"),t._v(" "),a("code",[t._v("4 Number of bytes to write (01h-0Bh)")]),a("br"),t._v(" "),a("code",[t._v("5 Data Byte #1")]),a("br"),t._v(" "),a("code",[t._v("6 Data Byte #2 (if any)")]),a("br"),t._v(" "),a("code",[t._v("7 Data Byte #3 (if any)")]),a("br"),t._v(" "),a("code",[t._v("etc.")]),a("br")]),t._v(" "),a("p",[t._v("Unused bytes at the end of the packet should be set to zero, this\nfunction is restricted to a single packet, so that not more than 11\nbytes can be defined at once. Free Addresses in SNES memory are Bank 0\n1800h-1FFFh, Bank 7Fh 0000h-FFFFh.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-10h-data-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-10h-data-trn"}},[t._v("#")]),t._v(" SGB Command 10h - DATA_TRN")]),t._v(" "),a("p",[t._v("Used to transfer binary code or data directly into SNES RAM.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 SNES Destination Address, low")]),a("br"),t._v(" "),a("code",[t._v("2 SNES Destination Address, high")]),a("br"),t._v(" "),a("code",[t._v("3 SNES Destination Address, bank number")]),a("br"),t._v(" "),a("code",[t._v("4-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("The data is sent by VRAM-Transfer (4 KBytes).")]),t._v(" "),a("p",[a("code",[t._v("000-FFF Data")]),a("br")]),t._v(" "),a("p",[t._v("Free Addresses in SNES memory are Bank 0 1800h-1FFFh, Bank 7Fh\n0000h-FFFFh. The transfer length is fixed at 4KBytes ???, so that\ndirectly writing to the free 2KBytes at 0:1800h would be a not so good\nidea ???")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-12h-jump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-12h-jump"}},[t._v("#")]),t._v(" SGB Command 12h - JUMP")]),t._v(" "),a("p",[t._v("Used to set the SNES program counter and NMI (vblank interrupt) handler\nto specific addresses.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 SNES Program Counter, low")]),a("br"),t._v(" "),a("code",[t._v("2 SNES Program Counter, high")]),a("br"),t._v(" "),a("code",[t._v("3 SNES Program Counter, bank number")]),a("br"),t._v(" "),a("code",[t._v("4 SNES NMI Handler, low")]),a("br"),t._v(" "),a("code",[t._v("5 SNES NMI Handler, high")]),a("br"),t._v(" "),a("code",[t._v("6 SNES NMI Handler, bank number")]),a("br"),t._v(" "),a("code",[t._v("7-F Not used, zero")]),a("br")]),t._v(" "),a("p",[t._v("The game "),a("em",[t._v("Space Invaders")]),t._v(' uses this function when selecting "Arcade\nmode" to execute SNES program code which has been previously\ntransferred from the SGB to the SNES. The SNES CPU is a Ricoh 5A22,\nwhich combines a 65C816 core licensed from WDC with a custom memory\ncontroller. For more information, see '),a("a",{attrs:{href:"https://problemkaputt.de/fullsnes.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v('"fullsnes" by\nnocash'),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Some notes for intrepid Super NES programmers seeking to use a flash\ncartridge in a Super Game Boy as a storage server:")]),t._v(" "),a("ul",[a("li",[t._v("JUMP overwrites the NMI handler even if it is $000000.")]),t._v(" "),a("li",[t._v("The SGB system software does not appear to use NMIs.")]),t._v(" "),a("li",[t._v("JUMP can return to SGB system software via a 16-bit RTS. To do this,\nJML to a location in bank $00 containing byte value $60, such as\nany of the "),a("a",{attrs:{href:"#stubbed-commands"}},[t._v("stubbed commands")]),t._v(".")]),t._v(" "),a("li",[t._v("IRQs and COP and BRK instructions are not useful because their\nhandlers still point into SGB ROM. Use SEI WAI.")]),t._v(" "),a("li",[t._v("If a program called through JUMP does not intend to return to SGB\nsystem software, it can overwrite all Super NES RAM except $0000BB\nthrough $0000BD, the NMI vector.")]),t._v(" "),a("li",[t._v("To enter APU boot ROM, write $FE to $2140. Echo will still be on\nthough.")])]),t._v(" "),a("h2",{attrs:{id:"sgb-multiplayer-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-multiplayer-command"}},[t._v("#")]),t._v(" SGB Multiplayer Command")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-11h-mlt-req"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-11h-mlt-req"}},[t._v("#")]),t._v(" SGB Command 11h - MLT_REQ")]),t._v(" "),a("p",[t._v("Used to request multiplayer mode (that is, input from more than one joypad).\nBecause this function provides feedback from the SGB/SNES to the Game\nBoy program, it is also used to detect SGB hardware.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Multiplayer Control (0-3) (Bit0=Enable, Bit1=Two/Four Players)")]),a("br"),t._v(" "),a("code",[t._v("0 = One player")]),a("br"),t._v(" "),a("code",[t._v("1 = Two players")]),a("br"),t._v(" "),a("code",[t._v("3 = Four players")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v('In one player mode, the second joypad (if any) is used for the SGB\nsystem program. In two player mode, both joypads are used for the game.\nBecause SNES have only two joypad sockets, four player mode requires an\nexternal "Multiplayer 5" adapter.')]),t._v(" "),a("p",[t._v("Changing the number of active players ANDs the currently selected player\nminus one with the number of players in that mode minus one. For example\nif you go from four players to two players and player 4 was active\nplayer 2 will then be active because 3 AND 1 is 1. However, sending the\nMLT_REQ command will increment the counter several times so results may\nnot be exactly as expected. The most frequent case is going from one\nplayer to two-or-four player which will always start with player 1\nactive.")]),t._v(" "),a("h4",{attrs:{id:"reading-multiple-controllers-joypads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-multiple-controllers-joypads"}},[t._v("#")]),t._v(" Reading Multiple Controllers (Joypads)")]),t._v(" "),a("p",[t._v("When having enabled multiple controllers by MLT_REQ, data for each\njoypad can be read out through JOYPAD register (FF00) as follows: First\nset P14 and P15 both HIGH (deselect both Buttons and Cursor keys), you\ncan now read the lower 4 bits of $FF00 which indicate the joypad ID for\nthe following joypad input:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Byte")]),t._v(" "),a("th",[t._v("Player #")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$0F")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("$0E")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("$0D")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("$0C")]),t._v(" "),a("td",[t._v("4")])])])]),t._v(" "),a("p",[t._v("Next, read joypad state as normally. When completed, set P14 and P15\nback HIGH, this automatically increments the joypad number (or restarts\ncounting once reached the lastmost joypad). Repeat the procedure until\nyou have read-out states for all two (or four) joypads.")]),t._v(" "),a("p",[t._v("If for whatever reason you want to increment the joypad number without\nreading the joypad state you only need to set P15 to LOW before setting\nit back to HIGH. Adjusting P14 does not affect whether or not the joypad\nnumber will advance, However, if you set P15 to LOW then HIGH then LOW\nagain without bringing both P14 and P15 HIGH at any point, it cancels\nthe increment until P15 is lowered again. There are games, such as\nPokémon Yellow, which rely on this cancelling when detecting the SGB.")]),t._v(" "),a("h2",{attrs:{id:"sgb-border-and-obj-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-border-and-obj-commands"}},[t._v("#")]),t._v(" SGB Border and OBJ Commands")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-13h-chr-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-13h-chr-trn"}},[t._v("#")]),t._v(" SGB Command 13h - CHR_TRN")]),t._v(" "),a("p",[t._v("Used to transfer tile data (characters) to SNES Tile memory in VRAM.\nThis normally used to define BG tiles for the SGB Border (see PCT_TRN),\nbut might be also used to define moveable SNES foreground sprites (see\nOBJ_TRN).")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Tile Transfer Destination")]),a("br"),t._v(" "),a("code",[t._v("Bit 0 - Tile Numbers (0=Tiles 00h-7Fh, 1=Tiles 80h-FFh)")]),a("br"),t._v(" "),a("code",[t._v("Bit 1 - Tile Type (0=BG Tiles, 1=OBJ Tiles)")]),a("br"),t._v(" "),a("code",[t._v("Bit 2-7 - Not used (zero)")]),a("br"),t._v(" "),a("code",[t._v("2-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("The tile data is sent by VRAM-Transfer (4 KBytes).")]),t._v(" "),a("p",[a("code",[t._v("000-FFF Bitmap data for 128 Tiles")]),a("br")]),t._v(" "),a("p",[t._v("Each tile occupies 32 bytes (8x8 pixels, 16 colors each). When intending\nto transfer more than 128 tiles, call this function twice (once for\ntiles 00h-7Fh, and once for tiles 80h-FFh). Note: The BG/OBJ Bit seems\nto have no effect and writes to the same VRAM addresses for both BG and\nOBJ ???")]),t._v(" "),a("p",[t._v("TODO: explain tile format")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-14h-pct-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-14h-pct-trn"}},[t._v("#")]),t._v(" SGB Command 14h - PCT_TRN")]),t._v(" "),a("p",[t._v("Used to transfer tile map data and palette data to SNES BG Map memory in\nVRAM to be used for the SGB border. The actual tiles must be separately\ntransferred by using the CHR_TRN function.")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v("The map data is sent by VRAM-Transfer (4 KBytes).")]),t._v(" "),a("p",[a("code",[t._v("000-6FF BG Map 32x28 Entries of 16 bits each (1792 bytes)")]),a("br"),t._v(" "),a("code",[t._v("700-7FF Not used, don't care")]),a("br"),t._v(" "),a("code",[t._v("800-87F BG Palette Data (Palettes 4-7, each 16 colors of 16 bits each)")]),a("br"),t._v(" "),a("code",[t._v("880-FFF Not used, don't care")]),a("br")]),t._v(" "),a("p",[t._v("Each BG Map Entry consists of a 16-bit value as such:\n"),a("code",[t._v("VH01 PP00 NNNN NNNN")]),a("br")]),t._v(" "),a("p",[a("code",[t._v("Bit 0-9 - Character Number (use only 00h-FFh, upper 2 bits zero)")]),a("br"),t._v(" "),a("code",[t._v("Bit 10-12 - Palette Number (use only 4-7, officially use only 4-6)")]),a("br"),t._v(" "),a("code",[t._v("Bit 13 - BG Priority (use only 0)")]),a("br"),t._v(" "),a("code",[t._v("Bit 14 - X-Flip (0=Normal, 1=Mirror horizontally)")]),a("br"),t._v(" "),a("code",[t._v("Bit 15 - Y-Flip (0=Normal, 1=Mirror vertically)")]),a("br")]),t._v(" "),a("p",[t._v("The 32x28 map entries correspond to 256x224 pixels of the Super NES\nscreen. The 20x18 entries in the center of the 32x28 area should be set\nto a blank (solid color 0) tile as transparent space for the Game Boy\nwindow to be displayed inside. Non-transparent border data will cover\nthe Game Boy window (for example, "),a("em",[t._v("Mario's Picross")]),t._v(" does this, as does\n"),a("em",[t._v("WildSnake")]),t._v(" to a lesser extent).")]),t._v(" "),a("p",[t._v("All borders repeat tiles. Assuming that the blank space for the GB\nscreen is a single tile, as is the letterbox in a widescreen border, a\nborder defining all unique tiles would have to define this many tiles:")]),t._v(" "),a("ul",[a("li",[t._v("(256*224-160*144)/64+1 = 537 tiles in fullscreen border")]),t._v(" "),a("li",[t._v("(256*176-160*144)/64+2 = 346 tiles in widescreen border")])]),t._v(" "),a("p",[t._v("But the CHR RAM allocated by SGB for border holds only 256 tiles. This\nmeans a fullscreen border must repeat at least 281 tiles and a\nwidescreen border at least 90.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-18h-obj-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-18h-obj-trn"}},[t._v("#")]),t._v(" SGB Command 18h - OBJ_TRN")]),t._v(" "),a("p",[t._v('Used to transfer OBJ attributes to SNES OAM memory. Unlike all other\nfunctions with the ending _TRN, this function does not use the usual\none-shot 4KBytes VRAM transfer method. Instead, when enabled (below\nexecute bit set), data is permanently (each frame) read out from the\nlower character line of the Game Boy screen. To suppress garbage on the\ndisplay, the lower line is masked, and only the upper 20x17 characters\nof the Game Boy window are used - the masking method is unknwon - frozen,\nblack, or recommended to be covered by the SGB border, or else ??? Also,\nwhen the function is enabled, "system attract mode is not performed" -\nwhatever that means ???')]),t._v(" "),a("p",[t._v("This command does nothing on some SGB revisions. (SGBv2, SGB2?)")]),t._v(" "),a("p",[a("code",[t._v("Byte Content")]),a("br"),t._v(" "),a("code",[t._v("0 Command*8+Length (fixed length=1)")]),a("br"),t._v(" "),a("code",[t._v("1 Control Bits")]),a("br"),t._v(" "),a("code",[t._v("Bit 0 - SNES OBJ Mode enable (0=Cancel, 1=Enable)")]),a("br"),t._v(" "),a("code",[t._v("Bit 1 - Change OBJ Color (0=No, 1=Use definitions below)")]),a("br"),t._v(" "),a("code",[t._v("Bit 2-7 - Not used (zero)")]),a("br"),t._v(" "),a("code",[t._v("2-3 System Color Palette Number for OBJ Palette 4 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("4-5 System Color Palette Number for OBJ Palette 5 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("6-7 System Color Palette Number for OBJ Palette 6 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("8-9 System Color Palette Number for OBJ Palette 7 (0-511)")]),a("br"),t._v(" "),a("code",[t._v("These color entries are ignored if above Control Bit 1 is zero.")]),a("br"),t._v(" "),a("code",[t._v("Because each OBJ palette consists of 16 colors, four system")]),a("br"),t._v(" "),a("code",[t._v("palette entries (of 4 colors each) are transferred into each")]),a("br"),t._v(" "),a("code",[t._v("OBJ palette. The system palette numbers are not required to be")]),a("br"),t._v(" "),a("code",[t._v("aligned to a multiple of four, and will wrap to palette number")]),a("br"),t._v(" "),a("code",[t._v("0 when exceeding 511. For example, a value of 511 would copy")]),a("br"),t._v(" "),a("code",[t._v("system palettes 511, 0, 1, 2 to the SNES OBJ palette.")]),a("br"),t._v(" "),a("code",[t._v("A-F Not used (zero)")]),a("br")]),t._v(" "),a("p",[t._v('The recommended method is to "display" Game Boy BG tiles F9h..FFh from\nleft to right as first 7 characters of the bottom-most character line of\nthe Game Boy screen. As for normal 4KByte VRAM transfers, this area\nshould not be scrolled, should not be overlapped by Game Boy OBJs, and\nthe Game Boy BGP palette register should be set up properly. By following\nthat method, SNES OAM data can be defined in the 70h bytes of the\nGame Boy BG tile memory at following addresses:')]),t._v(" "),a("p",[a("code",[t._v("8F90-8FEF SNES OAM, 24 Entries of 4 bytes each (96 bytes)")]),a("br"),t._v(" "),a("code",[t._v("8FF0-8FF5 SNES OAM MSBs, 24 Entries of 2 bits each (6 bytes)")]),a("br"),t._v(" "),a("code",[t._v("8FF6-8FFF Not used, don't care (10 bytes)")]),a("br")]),t._v(" "),a("p",[t._v("The format of SNES OAM Entries is:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  Byte 0  OBJ X-Position (0-511, MSB is separately stored, see below)\n  Byte 1  OBJ Y-Position (0-255)\n  Byte 2-3  Attributes (16bit)\n    Bit 0-8    Tile Number     (use only 00h-FFh, upper bit zero)\n    Bit 9-11   Palette Number  (use only 4-7)\n    Bit 12-13  OBJ Priority    (use only 3)\n    Bit 14     X-Flip          (0=Normal, 1=Mirror horizontally)\n    Bit 15     Y-Flip          (0=Normal, 1=Mirror vertically)\n")])])]),a("p",[t._v("The format of SNES OAM MSB Entries is:")]),t._v(" "),a("p",[t._v("Actually, the format is unknown ??? However, 2 bits are used per entry:\nOne bit is the most significant bit of the OBJ X-Position.\nThe other bit specifies the OBJ size (8x8 or 16x16 pixels).")]),t._v(" "),a("h2",{attrs:{id:"undocumented-sgb-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undocumented-sgb-commands"}},[t._v("#")]),t._v(" Undocumented SGB commands")]),t._v(" "),a("p",[t._v("The following information has been extracted from disassembling a SGBv2\nfirmware; it should be verified on other SGB revisions.")]),t._v(" "),a("p",[t._v("The SGB firmware explicitly ignores all commands with ID >= $1E. This\nleaves undocumented commands $19 to $1D inclusive.")]),t._v(" "),a("h4",{attrs:{id:"stubbed-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stubbed-commands"}},[t._v("#")]),t._v(" Stubbed commands")]),t._v(" "),a("p",[t._v("Commands $1A to $1F (inclusive)'s handlers are stubs (only contain a\n"),a("code",[t._v("RTS")]),t._v("). This is interesting, since the command-processing function\nexplicitly ignores commands $1E and $1F.")]),t._v(" "),a("h4",{attrs:{id:"sgb-command-19h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-19h"}},[t._v("#")]),t._v(" SGB command 19h")]),t._v(" "),a("p",[t._v("The game "),a("em",[t._v("Donkey Kong")]),t._v(" (1994) appears to send this command, and it appears\nto set a flag in the SGB's memory. It's not known yet what it does,\nthough.")]),t._v(" "),a("h1",{attrs:{id:"registers-and-flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-and-flags"}},[t._v("#")]),t._v(" Registers and Flags")]),t._v(" "),a("h4",{attrs:{id:"registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("16-bit")]),t._v(" "),a("th",[t._v("Hi")]),t._v(" "),a("th",[t._v("Lo")]),t._v(" "),a("th",[t._v("Name/Function")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("AF")]),t._v(" "),a("td",[t._v("A")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("Accumulator & Flags")])]),t._v(" "),a("tr",[a("td",[t._v("BC")]),t._v(" "),a("td",[t._v("B")]),t._v(" "),a("td",[t._v("C")]),t._v(" "),a("td",[t._v("BC")])]),t._v(" "),a("tr",[a("td",[t._v("DE")]),t._v(" "),a("td",[t._v("D")]),t._v(" "),a("td",[t._v("E")]),t._v(" "),a("td",[t._v("DE")])]),t._v(" "),a("tr",[a("td",[t._v("HL")]),t._v(" "),a("td",[t._v("H")]),t._v(" "),a("td",[t._v("L")]),t._v(" "),a("td",[t._v("HL")])]),t._v(" "),a("tr",[a("td",[t._v("SP")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("Stack Pointer")])]),t._v(" "),a("tr",[a("td",[t._v("PC")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("Program Counter/Pointer")])])])]),t._v(" "),a("p",[t._v("As shown above, most registers can be accessed either as one 16-bit\nregister, or as two separate 8-bit registers.")]),t._v(" "),a("h4",{attrs:{id:"the-flags-register-lower-8-bits-of-af-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-flags-register-lower-8-bits-of-af-register"}},[t._v("#")]),t._v(" The Flags Register (lower 8 bits of AF register)")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Bit")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Explanation")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[t._v("z")]),t._v(" "),a("td",[t._v("Zero flag")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("n")]),t._v(" "),a("td",[t._v("Subtraction flag (BCD)")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("h")]),t._v(" "),a("td",[t._v("Half Carry flag (BCD)")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("c")]),t._v(" "),a("td",[t._v("Carry flag")])])])]),t._v(" "),a("p",[t._v("Contains information about the result of the most recent instruction that has affected\nflags.")]),t._v(" "),a("h4",{attrs:{id:"the-zero-flag-z"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-zero-flag-z"}},[t._v("#")]),t._v(" The Zero Flag (Z)")]),t._v(" "),a("p",[t._v("This bit is set if and only if the result of an operation is zero. Used by conditional jumps.")]),t._v(" "),a("h4",{attrs:{id:"the-carry-flag-c-or-cy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-carry-flag-c-or-cy"}},[t._v("#")]),t._v(" The Carry Flag (C, or Cy)")]),t._v(" "),a("p",[t._v("Is set in these cases:")]),t._v(" "),a("ul",[a("li",[t._v("When the result of a 8-bit addition is higher than $FF.")]),t._v(" "),a("li",[t._v("When the result of a 16-bit addition is higher than $FFFF.")]),t._v(" "),a("li",[t._v("When the result of a subtraction or comparison\nis lower than zero (like in Z80 and 80x86 CPUs, but unlike in\n65XX and ARM CPUs).")]),t._v(" "),a("li",[t._v('When a rotate/shift operation shifts out a "1" bit.')])]),t._v(" "),a("p",[t._v("Used by conditional jumps and\ninstructions such as ADC, SBC, RL, RLA, etc.")]),t._v(" "),a("h4",{attrs:{id:"the-bcd-flags-n-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-bcd-flags-n-h"}},[t._v("#")]),t._v(" The BCD Flags (N, H)")]),t._v(" "),a("p",[t._v("These flags are used by the DAA instruction only. N indicates\nwhether the previous instruction has been a subtraction,\nand H indicates carry for the lower 4 bits of the result. DAA also uses the C flag,\nwhich must indicate carry for the upper 4 bits. After adding/subtracting two\nBCD numbers, DAA is used to convert the result to BCD format. BCD\nnumbers range from $00 to $99 rather than $00 to $FF. Because only two flags\n(C and H) exist to indicate carry-outs of BCD digits, DAA is ineffective for\n16-bit operations (which have 4 digits), and use for INC/DEC operations\n(which do not affect C-flag) has limits.")]),t._v(" "),a("h1",{attrs:{id:"instruction-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instruction-set"}},[t._v("#")]),t._v(" Instruction Set")]),t._v(" "),a("p",[t._v('Tables below specify the mnemonic, encoding, clock cycles, affected\nflags (ordered as znhc), and description. The timings assume a CPU\nclock frequency of 4.194304 MHz (or 8.4 MHz for CGB in double speed\nmode), called "T-states".  Because all Game Boy timings are divisible\nby 4, many people specify timings and clock frequency divided by 4,\ncalled "M-cycles".')]),t._v(" "),a("h4",{attrs:{id:"_8-bit-load-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-bit-load-instructions"}},[t._v("#")]),t._v(" 8-bit Load instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ld   r,r")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("r=r")])]),t._v(" "),a("tr",[a("td",[t._v("ld   r,n")]),t._v(" "),a("td",[t._v("xx nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("r=n")])]),t._v(" "),a("tr",[a("td",[t._v("ld   r,(HL)")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("r=(HL)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (HL),r")]),t._v(" "),a("td",[t._v("7x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(HL)=r")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (HL),n")]),t._v(" "),a("td",[t._v("36 nn")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(HL)=n")])]),t._v(" "),a("tr",[a("td",[t._v("ld   A,(BC)")]),t._v(" "),a("td",[t._v("0A")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("A=(BC)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   A,(DE)")]),t._v(" "),a("td",[t._v("1A")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("A=(DE)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   A,(nn)")]),t._v(" "),a("td",[t._v("FA")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("A=(nn)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (BC),A")]),t._v(" "),a("td",[t._v("02")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(BC)=A")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (DE),A")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(DE)=A")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (nn),A")]),t._v(" "),a("td",[t._v("EA")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(nn)=A")])]),t._v(" "),a("tr",[a("td",[t._v("ld   A,(FF00+n)")]),t._v(" "),a("td",[t._v("F0 nn")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("read from io-port n (memory FF00+n)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (FF00+n),A")]),t._v(" "),a("td",[t._v("E0 nn")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("write to io-port n (memory FF00+n)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   A,(FF00+C)")]),t._v(" "),a("td",[t._v("F2")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("read from io-port C (memory FF00+C)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (FF00+C),A")]),t._v(" "),a("td",[t._v("E2")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("write to io-port C (memory FF00+C)")])]),t._v(" "),a("tr",[a("td",[t._v("ldi  (HL),A")]),t._v(" "),a("td",[t._v("22")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(HL)=A, HL=HL+1")])]),t._v(" "),a("tr",[a("td",[t._v("ldi  A,(HL)")]),t._v(" "),a("td",[t._v("2A")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("A=(HL), HL=HL+1")])]),t._v(" "),a("tr",[a("td",[t._v("ldd  (HL),A")]),t._v(" "),a("td",[t._v("32")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(HL)=A, HL=HL-1")])]),t._v(" "),a("tr",[a("td",[t._v("ldd  A,(HL)")]),t._v(" "),a("td",[t._v("3A")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("A=(HL), HL=HL-1")])])])]),t._v(" "),a("h4",{attrs:{id:"_16-bit-load-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-bit-load-instructions"}},[t._v("#")]),t._v(" 16-bit Load instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ld   rr,nn")]),t._v(" "),a("td",[t._v("x1 nn nn")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("rr=nn (rr may be BC,DE,HL or SP)")])]),t._v(" "),a("tr",[a("td",[t._v("ld   (nn),SP")]),t._v(" "),a("td",[t._v("08 nn nn")]),t._v(" "),a("td",[t._v("20")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("(nn)=SP")])]),t._v(" "),a("tr",[a("td",[t._v("ld   SP,HL")]),t._v(" "),a("td",[t._v("F9")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("SP=HL")])]),t._v(" "),a("tr",[a("td",[t._v("push rr")]),t._v(" "),a("td",[t._v("x5")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("SP=SP-2  (SP)=rr ; rr may be BC,DE,HL,AF")])]),t._v(" "),a("tr",[a("td",[t._v("pop  rr")]),t._v(" "),a("td",[t._v("x1")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("(AF)")]),t._v(" "),a("td",[t._v("rr=(SP)  SP=SP+2 ; rr may be BC,DE,HL,AF")])])])]),t._v(" "),a("h4",{attrs:{id:"_8-bit-arithmetic-logic-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-bit-arithmetic-logic-instructions"}},[t._v("#")]),t._v(" 8-bit Arithmetic/Logic instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("add  A,r")]),t._v(" "),a("td",[t._v("8x")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z0hc")]),t._v(" "),a("td",[t._v("A=A+r")])]),t._v(" "),a("tr",[a("td",[t._v("add  A,n")]),t._v(" "),a("td",[t._v("C6 nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z0hc")]),t._v(" "),a("td",[t._v("A=A+n")])]),t._v(" "),a("tr",[a("td",[t._v("add  A,(HL)")]),t._v(" "),a("td",[t._v("86")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z0hc")]),t._v(" "),a("td",[t._v("A=A+(HL)")])]),t._v(" "),a("tr",[a("td",[t._v("adc  A,r")]),t._v(" "),a("td",[t._v("8x")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z0hc")]),t._v(" "),a("td",[t._v("A=A+r+cy")])]),t._v(" "),a("tr",[a("td",[t._v("adc  A,n")]),t._v(" "),a("td",[t._v("CE nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z0hc")]),t._v(" "),a("td",[t._v("A=A+n+cy")])]),t._v(" "),a("tr",[a("td",[t._v("adc  A,(HL)")]),t._v(" "),a("td",[t._v("8E")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z0hc")]),t._v(" "),a("td",[t._v("A=A+(HL)+cy")])]),t._v(" "),a("tr",[a("td",[t._v("sub  r")]),t._v(" "),a("td",[t._v("9x")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("A=A-r")])]),t._v(" "),a("tr",[a("td",[t._v("sub  n")]),t._v(" "),a("td",[t._v("D6 nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("A=A-n")])]),t._v(" "),a("tr",[a("td",[t._v("sub  (HL)")]),t._v(" "),a("td",[t._v("96")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("A=A-(HL)")])]),t._v(" "),a("tr",[a("td",[t._v("sbc  A,r")]),t._v(" "),a("td",[t._v("9x")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("A=A-r-cy")])]),t._v(" "),a("tr",[a("td",[t._v("sbc  A,n")]),t._v(" "),a("td",[t._v("DE nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("A=A-n-cy")])]),t._v(" "),a("tr",[a("td",[t._v("sbc  A,(HL)")]),t._v(" "),a("td",[t._v("9E")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("A=A-(HL)-cy")])]),t._v(" "),a("tr",[a("td",[t._v("and  r")]),t._v(" "),a("td",[t._v("Ax")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z010")]),t._v(" "),a("td",[t._v("A=A & r")])]),t._v(" "),a("tr",[a("td",[t._v("and  n")]),t._v(" "),a("td",[t._v("E6 nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z010")]),t._v(" "),a("td",[t._v("A=A & n")])]),t._v(" "),a("tr",[a("td",[t._v("and  (HL)")]),t._v(" "),a("td",[t._v("A6")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z010")]),t._v(" "),a("td",[t._v("A=A & (HL)")])]),t._v(" "),a("tr",[a("td",[t._v("xor  r")]),t._v(" "),a("td",[t._v("Ax")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("A=A xor r")])]),t._v(" "),a("tr",[a("td",[t._v("xor  n")]),t._v(" "),a("td",[t._v("EE nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("A=A xor n")])]),t._v(" "),a("tr",[a("td",[t._v("xor  (HL)")]),t._v(" "),a("td",[t._v("AE")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("A=A xor (HL)")])]),t._v(" "),a("tr",[a("td",[t._v("or   r")]),t._v(" "),a("td",[t._v("Bx")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("A=A")])]),t._v(" "),a("tr",[a("td",[t._v("or   n")]),t._v(" "),a("td",[t._v("F6 nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("A=A")])]),t._v(" "),a("tr",[a("td",[t._v("or   (HL)")]),t._v(" "),a("td",[t._v("B6")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("A=A")])]),t._v(" "),a("tr",[a("td",[t._v("cp   r")]),t._v(" "),a("td",[t._v("Bx")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("compare A-r")])]),t._v(" "),a("tr",[a("td",[t._v("cp   n")]),t._v(" "),a("td",[t._v("FE nn")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("compare A-n")])]),t._v(" "),a("tr",[a("td",[t._v("cp   (HL)")]),t._v(" "),a("td",[t._v("BE")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z1hc")]),t._v(" "),a("td",[t._v("compare A-(HL)")])]),t._v(" "),a("tr",[a("td",[t._v("inc  r")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z0h-")]),t._v(" "),a("td",[t._v("r=r+1")])]),t._v(" "),a("tr",[a("td",[t._v("inc  (HL)")]),t._v(" "),a("td",[t._v("34")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("z0h-")]),t._v(" "),a("td",[t._v("(HL)=(HL)+1")])]),t._v(" "),a("tr",[a("td",[t._v("dec  r")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z1h-")]),t._v(" "),a("td",[t._v("r=r-1")])]),t._v(" "),a("tr",[a("td",[t._v("dec  (HL)")]),t._v(" "),a("td",[t._v("35")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("z1h-")]),t._v(" "),a("td",[t._v("(HL)=(HL)-1")])]),t._v(" "),a("tr",[a("td",[t._v("daa")]),t._v(" "),a("td",[t._v("27")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("z-0x")]),t._v(" "),a("td",[t._v("decimal adjust A")])]),t._v(" "),a("tr",[a("td",[t._v("cpl")]),t._v(" "),a("td",[t._v("2F")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("-11-")]),t._v(" "),a("td",[t._v("A = A xor FF")])])])]),t._v(" "),a("h4",{attrs:{id:"_16-bit-arithmetic-logic-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-bit-arithmetic-logic-instructions"}},[t._v("#")]),t._v(" 16-bit Arithmetic/Logic instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("add  HL,rr")]),t._v(" "),a("td",[t._v("x9")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("-0hc")]),t._v(" "),a("td",[t._v("HL = HL+rr     ; rr may be BC,DE,HL,SP")])]),t._v(" "),a("tr",[a("td",[t._v("inc  rr")]),t._v(" "),a("td",[t._v("x3")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("rr = rr+1      ; rr may be BC,DE,HL,SP")])]),t._v(" "),a("tr",[a("td",[t._v("dec  rr")]),t._v(" "),a("td",[t._v("xB")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("rr = rr-1      ; rr may be BC,DE,HL,SP")])]),t._v(" "),a("tr",[a("td",[t._v("add  SP,dd")]),t._v(" "),a("td",[t._v("E8")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("00hc")]),t._v(" "),a("td",[t._v("SP = SP +/- dd ; dd is 8-bit signed number")])]),t._v(" "),a("tr",[a("td",[t._v("ld   HL,SP+dd")]),t._v(" "),a("td",[t._v("F8")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("00hc")]),t._v(" "),a("td",[t._v("HL = SP +/- dd ; dd is 8-bit signed number")])])])]),t._v(" "),a("h4",{attrs:{id:"rotate-and-shift-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rotate-and-shift-instructions"}},[t._v("#")]),t._v(" Rotate and Shift instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("rlca")]),t._v(" "),a("td",[t._v("07")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("000c")]),t._v(" "),a("td",[t._v("rotate A left")])]),t._v(" "),a("tr",[a("td",[t._v("rla")]),t._v(" "),a("td",[t._v("17")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("000c")]),t._v(" "),a("td",[t._v("rotate A left through carry")])]),t._v(" "),a("tr",[a("td",[t._v("rrca")]),t._v(" "),a("td",[t._v("0F")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("000c")]),t._v(" "),a("td",[t._v("rotate A right")])]),t._v(" "),a("tr",[a("td",[t._v("rra")]),t._v(" "),a("td",[t._v("1F")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("000c")]),t._v(" "),a("td",[t._v("rotate A right through carry")])]),t._v(" "),a("tr",[a("td",[t._v("rlc  r")]),t._v(" "),a("td",[t._v("CB 0x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate left")])]),t._v(" "),a("tr",[a("td",[t._v("rlc  (HL)")]),t._v(" "),a("td",[t._v("CB 06")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate left")])]),t._v(" "),a("tr",[a("td",[t._v("rl   r")]),t._v(" "),a("td",[t._v("CB 1x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate left through carry")])]),t._v(" "),a("tr",[a("td",[t._v("rl   (HL)")]),t._v(" "),a("td",[t._v("CB 16")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate left through carry")])]),t._v(" "),a("tr",[a("td",[t._v("rrc  r")]),t._v(" "),a("td",[t._v("CB 0x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate right")])]),t._v(" "),a("tr",[a("td",[t._v("rrc  (HL)")]),t._v(" "),a("td",[t._v("CB 0E")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate right")])]),t._v(" "),a("tr",[a("td",[t._v("rr   r")]),t._v(" "),a("td",[t._v("CB 1x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate right through carry")])]),t._v(" "),a("tr",[a("td",[t._v("rr   (HL)")]),t._v(" "),a("td",[t._v("CB 1E")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("rotate right through carry")])]),t._v(" "),a("tr",[a("td",[t._v("sla  r")]),t._v(" "),a("td",[t._v("CB 2x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("shift left arithmetic (b0=0)")])]),t._v(" "),a("tr",[a("td",[t._v("sla  (HL)")]),t._v(" "),a("td",[t._v("CB 26")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("shift left arithmetic (b0=0)")])]),t._v(" "),a("tr",[a("td",[t._v("swap r")]),t._v(" "),a("td",[t._v("CB 3x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("exchange low/hi-nibble")])]),t._v(" "),a("tr",[a("td",[t._v("swap (HL)")]),t._v(" "),a("td",[t._v("CB 36")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z000")]),t._v(" "),a("td",[t._v("exchange low/hi-nibble")])]),t._v(" "),a("tr",[a("td",[t._v("sra  r")]),t._v(" "),a("td",[t._v("CB 2x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("shift right arithmetic (b7=b7)")])]),t._v(" "),a("tr",[a("td",[t._v("sra  (HL)")]),t._v(" "),a("td",[t._v("CB 2E")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("shift right arithmetic (b7=b7)")])]),t._v(" "),a("tr",[a("td",[t._v("srl  r")]),t._v(" "),a("td",[t._v("CB 3x")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("shift right logical (b7=0)")])]),t._v(" "),a("tr",[a("td",[t._v("srl  (HL)")]),t._v(" "),a("td",[t._v("CB 3E")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("z00c")]),t._v(" "),a("td",[t._v("shift right logical (b7=0)")])])])]),t._v(" "),a("h4",{attrs:{id:"single-bit-operation-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#single-bit-operation-instructions"}},[t._v("#")]),t._v(" Single-bit Operation instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("bit  n,r")]),t._v(" "),a("td",[t._v("CB xx")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("z01-")]),t._v(" "),a("td",[t._v("test bit n")])]),t._v(" "),a("tr",[a("td",[t._v("bit  n,(HL)")]),t._v(" "),a("td",[t._v("CB xx")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("z01-")]),t._v(" "),a("td",[t._v("test bit n")])]),t._v(" "),a("tr",[a("td",[t._v("set  n,r")]),t._v(" "),a("td",[t._v("CB xx")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("set bit n")])]),t._v(" "),a("tr",[a("td",[t._v("set  n,(HL)")]),t._v(" "),a("td",[t._v("CB xx")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("set bit n")])]),t._v(" "),a("tr",[a("td",[t._v("res  n,r")]),t._v(" "),a("td",[t._v("CB xx")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("reset bit n")])]),t._v(" "),a("tr",[a("td",[t._v("res  n,(HL)")]),t._v(" "),a("td",[t._v("CB xx")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("reset bit n")])])])]),t._v(" "),a("h4",{attrs:{id:"cpu-control-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-control-instructions"}},[t._v("#")]),t._v(" CPU Control instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ccf")]),t._v(" "),a("td",[t._v("3F")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("-00c")]),t._v(" "),a("td",[t._v("cy=cy xor 1")])]),t._v(" "),a("tr",[a("td",[t._v("scf")]),t._v(" "),a("td",[t._v("37")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("-001")]),t._v(" "),a("td",[t._v("cy=1")])]),t._v(" "),a("tr",[a("td",[t._v("nop")]),t._v(" "),a("td",[t._v("00")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("no operation")])]),t._v(" "),a("tr",[a("td",[t._v("halt")]),t._v(" "),a("td",[t._v("76")]),t._v(" "),a("td",[t._v("N*4")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("halt until interrupt occurs (low power)")])]),t._v(" "),a("tr",[a("td",[t._v("stop")]),t._v(" "),a("td",[t._v("10 00")]),t._v(" "),a("td",[t._v("?")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("low power standby mode (VERY low power)")])]),t._v(" "),a("tr",[a("td",[t._v("di")]),t._v(" "),a("td",[t._v("F3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("disable interrupts, IME=0")])]),t._v(" "),a("tr",[a("td",[t._v("ei")]),t._v(" "),a("td",[t._v("FB")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("enable interrupts, IME=1")])])])]),t._v(" "),a("h4",{attrs:{id:"jump-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jump-instructions"}},[t._v("#")]),t._v(" Jump instructions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Mnemonic")]),t._v(" "),a("th",[t._v("Encoding")]),t._v(" "),a("th",[t._v("Clock cycles")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("jp   nn")]),t._v(" "),a("td",[t._v("C3 nn nn")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("jump to nn, PC=nn")])]),t._v(" "),a("tr",[a("td",[t._v("jp   HL")]),t._v(" "),a("td",[t._v("E9")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("jump to HL, PC=HL")])]),t._v(" "),a("tr",[a("td",[t._v("jp   f,nn")]),t._v(" "),a("td",[t._v("xx nn nn")]),t._v(" "),a("td",[t._v("16/12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("conditional jump if nz,z,nc,c")])]),t._v(" "),a("tr",[a("td",[t._v("jr   PC+dd")]),t._v(" "),a("td",[t._v("18 dd")]),t._v(" "),a("td",[t._v("12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("relative jump to nn (PC=PC+8-bit signed)")])]),t._v(" "),a("tr",[a("td",[t._v("jr   f,PC+dd")]),t._v(" "),a("td",[t._v("xx dd")]),t._v(" "),a("td",[t._v("12/8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("conditional relative jump if nz,z,nc,c")])]),t._v(" "),a("tr",[a("td",[t._v("call nn")]),t._v(" "),a("td",[t._v("CD nn nn")]),t._v(" "),a("td",[t._v("24")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("call to nn, SP=SP-2, (SP)=PC, PC=nn")])]),t._v(" "),a("tr",[a("td",[t._v("call f,nn")]),t._v(" "),a("td",[t._v("xx nn nn")]),t._v(" "),a("td",[t._v("24/12")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("conditional call if nz,z,nc,c")])]),t._v(" "),a("tr",[a("td",[t._v("ret")]),t._v(" "),a("td",[t._v("C9")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("return, PC=(SP), SP=SP+2")])]),t._v(" "),a("tr",[a("td",[t._v("ret  f")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("20/8")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("conditional return if nz,z,nc,c")])]),t._v(" "),a("tr",[a("td",[t._v("reti")]),t._v(" "),a("td",[t._v("D9")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("return and enable interrupts (IME=1)")])]),t._v(" "),a("tr",[a("td",[t._v("rst  n")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("----")]),t._v(" "),a("td",[t._v("call to 00,08,10,18,20,28,30,38")])])])]),t._v(" "),a("h1",{attrs:{id:"comparison-with-other-cpus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-other-cpus"}},[t._v("#")]),t._v(" Comparison with other CPUs")]),t._v(" "),a("h4",{attrs:{id:"comparison-with-8080"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-8080"}},[t._v("#")]),t._v(" Comparison with 8080")]),t._v(" "),a("p",[t._v("The Game Boy CPU has a bit more in common with an older Intel 8080 CPU\nthan the more powerful Zilog Z80 CPU. It is missing a handful of 8080\ninstructions but does support JR and almost all CB-prefixed\ninstructions. Also, all known Game Boy assemblers use the more obvious\nZ80-style syntax, rather than the chaotic 8080-style syntax.")]),t._v(" "),a("p",[t._v("Unlike the 8080 and Z80, the Game Boy has no dedicated I/O bus and no\nIN/OUT opcodes. Instead, I/O ports are accessed directly by normal LD\ninstructions, or by new LD (FF00+n) opcodes.")]),t._v(" "),a("p",[t._v("The sign and parity/overflow flags have been removed, as have the 12\nRET, CALL, and JP instructions conditioned on them. So have EX (SP),HL\n(XTHL) and EX DE,HL (XCHG).")]),t._v(" "),a("h4",{attrs:{id:"comparison-with-z80"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-z80"}},[t._v("#")]),t._v(" Comparison with Z80")]),t._v(" "),a("p",[t._v("In addition to the removed 8080 instructions, the other exchange\ninstructions have been removed (including total absence of second\nregister set).")]),t._v(" "),a("p",[t._v("All DD- and FD-prefixed instructions are missing. That means no IX- or\nIY-registers.")]),t._v(" "),a("p",[t._v("All ED-prefixed instructions are missing. That means 16-bit memory\naccesses are mostly missing, 16-bit arithmetic functions are heavily\ncut-down, and some other missing instructions. IN/OUT (C) are replaced with\nnew LD ($FF00+C) opcodes. Block instructions are gone, but autoincrementing\nHL accesses are added.")]),t._v(" "),a("p",[t._v("The Game Boy operates approximately as fast as a 4 MHz Z80 (8 MHz in CGB\ndouble speed mode), with execution time of all instructions having been\nrounded up to a multiple of 4 cycles.")]),t._v(" "),a("h4",{attrs:{id:"moved-removed-and-added-opcodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#moved-removed-and-added-opcodes"}},[t._v("#")]),t._v(" Moved, Removed, and Added Opcodes")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Opcode")]),t._v(" "),a("th",[t._v("Z80")]),t._v(" "),a("th",[t._v("GMB")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("08")]),t._v(" "),a("td",[t._v("EX   AF,AF")]),t._v(" "),a("td",[t._v("LD   (nn),SP")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[t._v("DJNZ PC+dd")]),t._v(" "),a("td",[t._v("STOP")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[t._v("LD   (nn),HL")]),t._v(" "),a("td",[t._v("LDI  (HL),A")])]),t._v(" "),a("tr",[a("td",[t._v("2A")]),t._v(" "),a("td",[t._v("LD   HL,(nn)")]),t._v(" "),a("td",[t._v("LDI  A,(HL)")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("LD   (nn),A")]),t._v(" "),a("td",[t._v("LDD  (HL),A")])]),t._v(" "),a("tr",[a("td",[t._v("3A")]),t._v(" "),a("td",[t._v("LD   A,(nn)")]),t._v(" "),a("td",[t._v("LDD  A,(HL)")])]),t._v(" "),a("tr",[a("td",[t._v("D3")]),t._v(" "),a("td",[t._v("OUT  (n),A")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("D9")]),t._v(" "),a("td",[t._v("EXX")]),t._v(" "),a("td",[t._v("RETI")])]),t._v(" "),a("tr",[a("td",[t._v("DB")]),t._v(" "),a("td",[t._v("IN   A,(n)")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("DD")]),t._v(" "),a("td",[t._v("<IX>")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("E0")]),t._v(" "),a("td",[t._v("RET  PO")]),t._v(" "),a("td",[t._v("LD   (FF00+n),A")])]),t._v(" "),a("tr",[a("td",[t._v("E2")]),t._v(" "),a("td",[t._v("JP   PO,nn")]),t._v(" "),a("td",[t._v("LD   (FF00+C),A")])]),t._v(" "),a("tr",[a("td",[t._v("E3")]),t._v(" "),a("td",[t._v("EX   (SP),HL")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("E4")]),t._v(" "),a("td",[t._v("CALL P0,nn")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("E8")]),t._v(" "),a("td",[t._v("RET  PE")]),t._v(" "),a("td",[t._v("ADD  SP,dd")])]),t._v(" "),a("tr",[a("td",[t._v("EA")]),t._v(" "),a("td",[t._v("JP   PE,nn")]),t._v(" "),a("td",[t._v("LD   (nn),A")])]),t._v(" "),a("tr",[a("td",[t._v("EB")]),t._v(" "),a("td",[t._v("EX   DE,HL")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("EC")]),t._v(" "),a("td",[t._v("CALL PE,nn")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("ED")]),t._v(" "),a("td",[t._v("<pref>")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("F0")]),t._v(" "),a("td",[t._v("RET  P")]),t._v(" "),a("td",[t._v("LD   A,(FF00+n)")])]),t._v(" "),a("tr",[a("td",[t._v("F2")]),t._v(" "),a("td",[t._v("JP   P,nn")]),t._v(" "),a("td",[t._v("LD   A,(FF00+C)")])]),t._v(" "),a("tr",[a("td",[t._v("F4")]),t._v(" "),a("td",[t._v("CALL P,nn")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("F8")]),t._v(" "),a("td",[t._v("RET  M")]),t._v(" "),a("td",[t._v("LD   HL,SP+dd")])]),t._v(" "),a("tr",[a("td",[t._v("FA")]),t._v(" "),a("td",[t._v("JP   M,nn")]),t._v(" "),a("td",[t._v("LD   A,(nn)")])]),t._v(" "),a("tr",[a("td",[t._v("FC")]),t._v(" "),a("td",[t._v("CALL M,nn")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("FD")]),t._v(" "),a("td",[t._v("<IY>")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("CB3X")]),t._v(" "),a("td",[t._v("SLL  r/(HL)")]),t._v(" "),a("td",[t._v("SWAP r/(HL)")])])])]),t._v(" "),a("p",[t._v("Note: The unused (-) opcodes will lock up the Game Boy CPU when used.")]),t._v(" "),a("h1",{attrs:{id:"the-cartridge-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-cartridge-header"}},[t._v("#")]),t._v(" The Cartridge Header")]),t._v(" "),a("p",[t._v("An internal information area is located at $0100-014F in each cartridge.\nIt contains the following values:")]),t._v(" "),a("h4",{attrs:{id:"_0100-0103-entry-point"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0100-0103-entry-point"}},[t._v("#")]),t._v(" 0100-0103 - Entry Point")]),t._v(" "),a("p",[t._v("After displaying the Nintendo Logo, the built-in boot procedure jumps to\nthis address ($0100), which should then jump to the actual main program\nin the cartridge. Usually this 4 byte area contains a "),a("code",[t._v("nop")]),t._v(" instruction,\nfollowed by a "),a("code",[t._v("jp $0150")]),t._v(" instruction. But not always.")]),t._v(" "),a("h4",{attrs:{id:"_0104-0133-nintendo-logo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0104-0133-nintendo-logo"}},[t._v("#")]),t._v(" 0104-0133 - Nintendo Logo")]),t._v(" "),a("p",[t._v("These bytes define the bitmap of the Nintendo logo that is displayed\nwhen the Game Boy gets turned on. The hex dump of this bitmap is:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" CE ED 66 66 CC 0D 00 0B 03 73 00 83 00 0C 00 0D\n 00 08 11 1F 88 89 00 0E DC CC 6E E6 DD DD D9 99\n BB BB 67 63 6E 0E EC CC DD DC 99 9F BB B9 33 3E\n")])])]),a("p",[t._v("The Game Boy's boot procedure verifies the content of this bitmap\n(after it has displayed it), and LOCKS ITSELF UP if these bytes are\nincorrect. A CGB verifies only the first half ($18 bytes of) the bitmap, but\nothers (for example a Game Boy pocket) verify all $30 bytes, as does the\nGame Boy Advance.")]),t._v(" "),a("h4",{attrs:{id:"_0134-0143-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0134-0143-title"}},[t._v("#")]),t._v(" 0134-0143 - Title")]),t._v(" "),a("p",[t._v("Title of the game in UPPER CASE ASCII. If it is less than 16 characters\nthen the remaining bytes are filled with $00 bytes. When inventing the CGB,\nNintendo has reduced the length of this area to 15 characters, and some\nmonths later they had the fantastic idea to reduce it to 11 characters\nonly. The new meaning of the ex-title bytes is described below.")]),t._v(" "),a("h4",{attrs:{id:"_013f-0142-manufacturer-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_013f-0142-manufacturer-code"}},[t._v("#")]),t._v(" 013F-0142 - Manufacturer Code")]),t._v(" "),a("p",[t._v("In older cartridges this area has been part of the Title (see above), in\nnewer cartridges this area contains an 4 character uppercase\nmanufacturer code. Purpose and Deeper Meaning unknown.")]),t._v(" "),a("h4",{attrs:{id:"_0143-cgb-flag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0143-cgb-flag"}},[t._v("#")]),t._v(" 0143 - CGB Flag")]),t._v(" "),a("p",[t._v("In older cartridges this byte has been part of the Title (see above). In\nCGB cartridges the upper bit is used to enable CGB functions. This is\nrequired, otherwise the CGB switches itself into Non-CGB-Mode. Typical\nvalues are:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 80h - Game supports CGB functions, but also works on old Game Boys.\n C0h - Game works on CGB only (physically the same as $80).\n")])])]),a("p",[t._v('Values with Bit 7 set, and either Bit 2 or 3 set, will switch the\nGame Boy into a special non-CGB-mode called "PGB mode".')]),t._v(" "),a("p",[t._v("TODO: research and document PGB modes...")]),t._v(" "),a("h4",{attrs:{id:"_0144-0145-new-licensee-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0144-0145-new-licensee-code"}},[t._v("#")]),t._v(" 0144-0145 - New Licensee Code")]),t._v(" "),a("p",[t._v("Specifies a two-character ASCII licensee code, indicating the company or\npublisher of the game. These two bytes are used in newer games only\n(games that have been released after the SGB has been invented). Older\ngames are using the header entry at "),a("code",[t._v("$014B")]),t._v(" instead.")]),t._v(" "),a("p",[t._v("Sample licensee codes:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Publisher")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("00")])]),t._v(" "),a("td",[t._v("None")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("01")])]),t._v(" "),a("td",[t._v("Nintendo R&D1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("08")])]),t._v(" "),a("td",[t._v("Capcom")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("13")])]),t._v(" "),a("td",[t._v("Electronic Arts")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("18")])]),t._v(" "),a("td",[t._v("Hudson Soft")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("19")])]),t._v(" "),a("td",[t._v("b-ai")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("20")])]),t._v(" "),a("td",[t._v("kss")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("22")])]),t._v(" "),a("td",[t._v("pow")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("24")])]),t._v(" "),a("td",[t._v("PCM Complete")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("25")])]),t._v(" "),a("td",[t._v("san-x")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("28")])]),t._v(" "),a("td",[t._v("Kemco Japan")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("29")])]),t._v(" "),a("td",[t._v("seta")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("30")])]),t._v(" "),a("td",[t._v("Viacom")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("31")])]),t._v(" "),a("td",[t._v("Nintendo")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("32")])]),t._v(" "),a("td",[t._v("Bandai")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("33")])]),t._v(" "),a("td",[t._v("Ocean/Acclaim")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("34")])]),t._v(" "),a("td",[t._v("Konami")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("35")])]),t._v(" "),a("td",[t._v("Hector")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("37")])]),t._v(" "),a("td",[t._v("Taito")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("38")])]),t._v(" "),a("td",[t._v("Hudson")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("39")])]),t._v(" "),a("td",[t._v("Banpresto")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("41")])]),t._v(" "),a("td",[t._v("Ubi Soft")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("42")])]),t._v(" "),a("td",[t._v("Atlus")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("44")])]),t._v(" "),a("td",[t._v("Malibu")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("46")])]),t._v(" "),a("td",[t._v("angel")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("47")])]),t._v(" "),a("td",[t._v("Bullet-Proof")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("49")])]),t._v(" "),a("td",[t._v("irem")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("50")])]),t._v(" "),a("td",[t._v("Absolute")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("51")])]),t._v(" "),a("td",[t._v("Acclaim")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("52")])]),t._v(" "),a("td",[t._v("Activision")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("53")])]),t._v(" "),a("td",[t._v("American sammy")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("54")])]),t._v(" "),a("td",[t._v("Konami")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("55")])]),t._v(" "),a("td",[t._v("Hi tech entertainment")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("56")])]),t._v(" "),a("td",[t._v("LJN")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("57")])]),t._v(" "),a("td",[t._v("Matchbox")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("58")])]),t._v(" "),a("td",[t._v("Mattel")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("59")])]),t._v(" "),a("td",[t._v("Milton Bradley")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("60")])]),t._v(" "),a("td",[t._v("Titus")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("61")])]),t._v(" "),a("td",[t._v("Virgin")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("64")])]),t._v(" "),a("td",[t._v("LucasArts")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("67")])]),t._v(" "),a("td",[t._v("Ocean")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("69")])]),t._v(" "),a("td",[t._v("Electronic Arts")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("70")])]),t._v(" "),a("td",[t._v("Infogrames")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("71")])]),t._v(" "),a("td",[t._v("Interplay")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("72")])]),t._v(" "),a("td",[t._v("Broderbund")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("73")])]),t._v(" "),a("td",[t._v("sculptured")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("75")])]),t._v(" "),a("td",[t._v("sci")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("78")])]),t._v(" "),a("td",[t._v("THQ")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("79")])]),t._v(" "),a("td",[t._v("Accolade")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("80")])]),t._v(" "),a("td",[t._v("misawa")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("83")])]),t._v(" "),a("td",[t._v("lozc")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("86")])]),t._v(" "),a("td",[t._v("Tokuma Shoten Intermedia")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("87")])]),t._v(" "),a("td",[t._v("Tsukuda Original")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("91")])]),t._v(" "),a("td",[t._v("Chunsoft")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("92")])]),t._v(" "),a("td",[t._v("Video system")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("93")])]),t._v(" "),a("td",[t._v("Ocean/Acclaim")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("95")])]),t._v(" "),a("td",[t._v("Varie")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("96")])]),t._v(" "),a("td",[t._v("Yonezawa/s'pal")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("97")])]),t._v(" "),a("td",[t._v("Kaneko")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("99")])]),t._v(" "),a("td",[t._v("Pack in soft")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("A4")])]),t._v(" "),a("td",[t._v("Konami (Yu-Gi-Oh!)")])])])]),t._v(" "),a("h4",{attrs:{id:"_0146-sgb-flag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0146-sgb-flag"}},[t._v("#")]),t._v(" 0146 - SGB Flag")]),t._v(" "),a("p",[t._v("Specifies whether the game supports SGB functions, common values are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$00")]),t._v(": No SGB functions (Normal Game Boy or CGB only game)")]),t._v(" "),a("li",[a("code",[t._v("$03")]),t._v(": Game supports SGB functions")])]),t._v(" "),a("p",[t._v("The SGB disables its SGB functions if this byte is set to a value other than "),a("code",[t._v("$03")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"_0147-cartridge-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0147-cartridge-type"}},[t._v("#")]),t._v(" 0147 - Cartridge Type")]),t._v(" "),a("p",[t._v("Specifies which Memory Bank Controller (if any) is used in the\ncartridge, and if further external hardware exists in the cartridge.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Type")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$00")]),t._v(" "),a("td",[t._v("ROM ONLY")])]),t._v(" "),a("tr",[a("td",[t._v("$01")]),t._v(" "),a("td",[t._v("MBC1")])]),t._v(" "),a("tr",[a("td",[t._v("$02")]),t._v(" "),a("td",[t._v("MBC1+RAM")])]),t._v(" "),a("tr",[a("td",[t._v("$03")]),t._v(" "),a("td",[t._v("MBC1+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$05")]),t._v(" "),a("td",[t._v("MBC2")])]),t._v(" "),a("tr",[a("td",[t._v("$06")]),t._v(" "),a("td",[t._v("MBC2+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$08")]),t._v(" "),a("td",[t._v("ROM+RAM *")])]),t._v(" "),a("tr",[a("td",[t._v("$09")]),t._v(" "),a("td",[t._v("ROM+RAM+BATTERY *")])]),t._v(" "),a("tr",[a("td",[t._v("$0B")]),t._v(" "),a("td",[t._v("MMM01")])]),t._v(" "),a("tr",[a("td",[t._v("$0C")]),t._v(" "),a("td",[t._v("MMM01+RAM")])]),t._v(" "),a("tr",[a("td",[t._v("$0D")]),t._v(" "),a("td",[t._v("MMM01+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$0F")]),t._v(" "),a("td",[t._v("MBC3+TIMER+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$10")]),t._v(" "),a("td",[t._v("MBC3+TIMER+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$11")]),t._v(" "),a("td",[t._v("MBC3")])]),t._v(" "),a("tr",[a("td",[t._v("$12")]),t._v(" "),a("td",[t._v("MBC3+RAM")])]),t._v(" "),a("tr",[a("td",[t._v("$13")]),t._v(" "),a("td",[t._v("MBC3+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$19")]),t._v(" "),a("td",[t._v("MBC5")])]),t._v(" "),a("tr",[a("td",[t._v("$1A")]),t._v(" "),a("td",[t._v("MBC5+RAM")])]),t._v(" "),a("tr",[a("td",[t._v("$1B")]),t._v(" "),a("td",[t._v("MBC5+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$1C")]),t._v(" "),a("td",[t._v("MBC5+RUMBLE")])]),t._v(" "),a("tr",[a("td",[t._v("$1D")]),t._v(" "),a("td",[t._v("MBC5+RUMBLE+RAM")])]),t._v(" "),a("tr",[a("td",[t._v("$1E")]),t._v(" "),a("td",[t._v("MBC5+RUMBLE+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$20")]),t._v(" "),a("td",[t._v("MBC6")])]),t._v(" "),a("tr",[a("td",[t._v("$22")]),t._v(" "),a("td",[t._v("MBC7+SENSOR+RUMBLE+RAM+BATTERY")])]),t._v(" "),a("tr",[a("td",[t._v("$FC")]),t._v(" "),a("td",[t._v("POCKET CAMERA")])]),t._v(" "),a("tr",[a("td",[t._v("$FD")]),t._v(" "),a("td",[t._v("BANDAI TAMA5")])]),t._v(" "),a("tr",[a("td",[t._v("$FE")]),t._v(" "),a("td",[t._v("HuC3")])]),t._v(" "),a("tr",[a("td",[t._v("$FF")]),t._v(" "),a("td",[t._v("HuC1+RAM+BATTERY")])])])]),t._v(" "),a("p",[t._v("* No licensed cartridge makes use of this option. Exact behaviour is unknown.")]),t._v(" "),a("h4",{attrs:{id:"_0148-rom-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0148-rom-size"}},[t._v("#")]),t._v(" 0148 - ROM Size")]),t._v(" "),a("p",[t._v('Specifies the ROM Size of the cartridge. Typically calculated as "N such that 32 KiB\n<< N".')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Size")]),t._v(" "),a("th",[t._v("Amount of banks")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$00")]),t._v(" "),a("td",[t._v("32 KByte")]),t._v(" "),a("td",[t._v("2 (No ROM banking)")])]),t._v(" "),a("tr",[a("td",[t._v("$01")]),t._v(" "),a("td",[t._v("64 KByte")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("$02")]),t._v(" "),a("td",[t._v("128 KByte")]),t._v(" "),a("td",[t._v("8")])]),t._v(" "),a("tr",[a("td",[t._v("$03")]),t._v(" "),a("td",[t._v("256 KByte")]),t._v(" "),a("td",[t._v("16")])]),t._v(" "),a("tr",[a("td",[t._v("$04")]),t._v(" "),a("td",[t._v("512 KByte")]),t._v(" "),a("td",[t._v("32")])]),t._v(" "),a("tr",[a("td",[t._v("$05")]),t._v(" "),a("td",[t._v("1 MByte")]),t._v(" "),a("td",[t._v("64")])]),t._v(" "),a("tr",[a("td",[t._v("$06")]),t._v(" "),a("td",[t._v("2 MByte")]),t._v(" "),a("td",[t._v("128")])]),t._v(" "),a("tr",[a("td",[t._v("$07")]),t._v(" "),a("td",[t._v("4 MByte")]),t._v(" "),a("td",[t._v("256")])]),t._v(" "),a("tr",[a("td",[t._v("$08")]),t._v(" "),a("td",[t._v("8 MByte")]),t._v(" "),a("td",[t._v("512")])]),t._v(" "),a("tr",[a("td",[t._v("$52")]),t._v(" "),a("td",[t._v("1.1 MByte")]),t._v(" "),a("td",[t._v("72 *")])]),t._v(" "),a("tr",[a("td",[t._v("$53")]),t._v(" "),a("td",[t._v("1.2 MByte")]),t._v(" "),a("td",[t._v("80 *")])]),t._v(" "),a("tr",[a("td",[t._v("$54")]),t._v(" "),a("td",[t._v("1.5 MByte")]),t._v(" "),a("td",[t._v("96 *")])])])]),t._v(" "),a("p",[t._v("* Only listed in unofficial docs. No cartridges or ROM files using these sizes are known.\nAs the other ROM sizes are all powers of 2, these are likely inaccurate. The source for these\nvalues is unknown.")]),t._v(" "),a("h4",{attrs:{id:"_0149-ram-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0149-ram-size"}},[t._v("#")]),t._v(" 0149 - RAM Size")]),t._v(" "),a("p",[t._v("Specifies the size of the external RAM in the cartridge (if any).")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code")]),t._v(" "),a("th",[t._v("Size")]),t._v(" "),a("th",[t._v("Comment")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$00")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("No RAM *")])]),t._v(" "),a("tr",[a("td",[t._v("$01")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("Unused **")])]),t._v(" "),a("tr",[a("td",[t._v("$02")]),t._v(" "),a("td",[t._v("8 KB")]),t._v(" "),a("td",[t._v("1 bank")])]),t._v(" "),a("tr",[a("td",[t._v("$03")]),t._v(" "),a("td",[t._v("32 KB")]),t._v(" "),a("td",[t._v("4 banks of 8 KB each")])]),t._v(" "),a("tr",[a("td",[t._v("$04")]),t._v(" "),a("td",[t._v("128 KB")]),t._v(" "),a("td",[t._v("16 banks of 8 KB each")])]),t._v(" "),a("tr",[a("td",[t._v("$05")]),t._v(" "),a("td",[t._v("64 KB")]),t._v(" "),a("td",[t._v("8 banks of 8 KB each")])])])]),t._v(" "),a("p",[t._v("* When using a MBC2 chip, $00 must be specified as the RAM Size, even though\nthe MBC2 includes a built-in RAM of 512 x 4 bits.")]),t._v(" "),a("p",[t._v("** Listed in various unofficial docs as 2KB. However, a 2KB RAM chip was never used in a cartridge.\nThe source for this value is unknown.")]),t._v(" "),a("p",[t._v('Various "PD" ROMs ("Public Domain" homebrew ROMs generally tagged "(PD)"\nin the filename) are known to use the $01 RAM Size tag, but this is believed\nto have been a mistake with early homebrew tools and the PD ROMs often don\'t use\ncartridge RAM at all.')]),t._v(" "),a("h4",{attrs:{id:"_014a-destination-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_014a-destination-code"}},[t._v("#")]),t._v(" 014A - Destination Code")]),t._v(" "),a("p",[t._v("Specifies if this version of the game is supposed to be sold in Japan,\nor anywhere else. Only two values are defined.")]),t._v(" "),a("ul",[a("li",[t._v("$00: Japanese")]),t._v(" "),a("li",[t._v("$01: Non-Japanese")])]),t._v(" "),a("h4",{attrs:{id:"_014b-old-licensee-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_014b-old-licensee-code"}},[t._v("#")]),t._v(" 014B - Old Licensee Code")]),t._v(" "),a("p",[t._v("Specifies the games company/publisher code in range $00-FF. A value of\n$33 signals that the New Licensee Code (in header bytes $0144-0145) is\nused instead. (Super Game Boy functions won't work if <> $33.) A list\nof licensee codes can be found\n"),a("a",{attrs:{href:"https://raw.githubusercontent.com/gb-archive/salvage/master/txt-files/gbrom.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"_014c-mask-rom-version-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_014c-mask-rom-version-number"}},[t._v("#")]),t._v(" 014C - Mask ROM Version number")]),t._v(" "),a("p",[t._v("Specifies the version number of the game. That is usually $00.")]),t._v(" "),a("h4",{attrs:{id:"_014d-header-checksum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_014d-header-checksum"}},[t._v("#")]),t._v(" 014D - Header Checksum")]),t._v(" "),a("p",[t._v("Contains an 8 bit checksum across the cartridge header bytes $0134-014C.\nThe boot ROM computes "),a("code",[t._v("x")]),t._v(" as follows:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("x = 0\ni = $0134\nwhile i <= $014C\n\tx = x - [i] - 1\n")])])]),a("p",[t._v("If the byte at $014D does not match the lower 8 bits of "),a("code",[t._v("x")]),t._v(", the boot ROM will lock up,\nand the cartridge program "),a("strong",[t._v("won't run")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"_014e-014f-global-checksum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_014e-014f-global-checksum"}},[t._v("#")]),t._v(" 014E-014F - Global Checksum")]),t._v(" "),a("p",[t._v("Contains a 16 bit checksum (upper byte first) across the whole cartridge\nROM. Produced by adding all bytes of the cartridge (except for the two\nchecksum bytes). The Game Boy doesn't verify this checksum.")]),t._v(" "),a("h1",{attrs:{id:"memory-bank-controllers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-bank-controllers"}},[t._v("#")]),t._v(" Memory Bank Controllers")]),t._v(" "),a("p",[t._v("As the Game Boy's 16-bit address bus offers only limited space for\nROM and RAM addressing, many games are using Memory Bank Controllers\n(MBCs) to expand the available address space by bank switching.\nThese MBC chips are located in the game cartridge (that is, not in\nthe Game Boy itself).")]),t._v(" "),a("p",[t._v("In each cartridge, the required (or preferred) MBC type should be\nspecified in the byte at 0147h of the ROM, as described in\n"),a("a",{attrs:{href:"#the-cartridge-header"}},[t._v("the cartridge header")]),t._v(".  Several different MBC\ntypes are available:")]),t._v(" "),a("h1",{attrs:{id:"no-mbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-mbc"}},[t._v("#")]),t._v(" No MBC")]),t._v(" "),a("p",[t._v("(32KByte ROM only)")]),t._v(" "),a("p",[t._v("Small games of not more than 32 KiB ROM do not require a MBC chip for\nROM banking. The ROM is directly mapped to memory at 0000-7FFFh.\nOptionally up to 8 KiB of RAM could be connected at A000-BFFF, using\na discrete logic decoder "),t._v(" in place of a full MBC chip.")]),t._v(" "),a("h1",{attrs:{id:"mbc1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc1"}},[t._v("#")]),t._v(" MBC1")]),t._v(" "),a("p",[t._v("(max 2MByte ROM and/or 32 KiB RAM)")]),t._v(" "),a("p",[t._v("This is the first MBC chip for the Game Boy. Any newer MBC chips\nwork similarly, so it is relatively easy to upgrade a program from one\nMBC chip to another - or to make it compatible with several different\ntypes of MBCs.")]),t._v(" "),a("p",[t._v("Note that the memory in range 0000-7FFF is used both for reading from\nROM and writing to the MBCs Control Registers.")]),t._v(" "),a("h3",{attrs:{id:"memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-x0-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-x0-read-only"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank X0 (Read Only)")]),t._v(" "),a("p",[t._v("This area normally contains the first 16 KiB (bank 00) of the cartridge\nROM. Can contain banks $20/$40/$60 in mode 1 (see below), or banks $10/$20/$30\nin mode 1 for a 1MB MBC1 multi-cart (see below).")]),t._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-01-7f-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-7f-read-only"}},[t._v("#")]),t._v(" 4000-7FFF - ROM Bank 01-7F (Read Only)")]),t._v(" "),a("p",[t._v("This area may contain any of the further 16 KiB banks of the ROM. Cannot\naddress any banks where the main ROM banking register would be $00, which\nusually means banks $00/$20/$40/$60. Instead, it automatically maps to 1 bank\nhigher ($01/$21/$41/$61).")]),t._v(" "),a("h4",{attrs:{id:"a000-bfff-ram-bank-00-03-if-any-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-ram-bank-00-03-if-any-read-write"}},[t._v("#")]),t._v(" A000-BFFF - RAM Bank 00-03, if any (Read/Write)")]),t._v(" "),a("p",[t._v("This area is used to address external RAM in the cartridge (if any).\nExternal RAM is often battery-backed, allowing for the storage of game data while the Game Boy is turned off, or if the\ncartridge is removed from the Game Boy. Available RAM sizes are: 2 KiB\n(at $A000-$A7FF), 8 KiB (at $A000-$BFFF) and 32 KiB (in form of four 8K\nbanks at $A000-$BFFF).")]),t._v(" "),a("h3",{attrs:{id:"registers-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-2"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-write-only"}},[t._v("#")]),t._v(" 0000-1FFF - RAM Enable (Write Only)")]),t._v(" "),a("p",[t._v("Before external RAM can be read or written, it must be enabled by\nwriting to this address space. It is recommended to disable external RAM\nafter accessing it, in order to protect its contents from corruption during\npower down of the Game Boy. Usually the following values are used:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("00h  Disable RAM (default)\n0Ah  Enable RAM\n")])])]),a("p",[t._v("Practically any value with 0Ah in the lower 4 bits enables RAM and any\nother value disables RAM. RAM is automatically disabled when the gameboy\nis powered off. It is unknown why Ah is the value used to enable RAM.")]),t._v(" "),a("h4",{attrs:{id:"_2000-3fff-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only"}},[t._v("#")]),t._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("This 5-bit register (range $01-$1F) selects the ROM bank number. Higher\nbits are discarded - $E1 (binary "),a("s",[t._v("111")]),t._v("00001) would select bank $01.\nIf the ROM Bank Number is set to a higher value than the number of banks\nin the cart, the bank number is masked to the required number of bits.\ne.g. a 256 KiB cart only needs a 4-bit bank number to address all of its\n16 banks, so this register is masked to 4 bits. The upper bit would be\nignored.")]),t._v(" "),a("p",[t._v("On larger carts which need a >5 bit bank number, the secondary banking\nregister at 4000-5FFF is used to supply an additional 2 bits for the\neffective bank number:\n"),a("code",[t._v("Selected ROM Bank = (Secondary Bank << 5) + ROM Bank")]),t._v(".")]),t._v(" "),a("p",[t._v("The ROM Bank Number defaults to 01 at power-on. When 00 is written,\nthe MBC translates that to bank 01 also. Not being able to select bank\n00 isn't normally a problem, because bank 00h is usually mapped to the\n0000-3FFF range. But on large carts (using the secondary banking register\nto specify the upper ROM Bank bits), the same happens for banks $20, $40,\nand $60, as this register would need to be 00 for those addresses. Any\nattempt to address these ROM Banks will select Bank $21, $41 and $61\ninstead. The only way to access banks $20, $40 or $60 is to enter mode 1,\nwhich remaps the 0000-3FFF range. This has its own problems for game\ndevelopers as that range contains interrupt handlers, so it's usually only\nused in multi-game compilation carts (see below).")]),t._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-bank-number-or-upper-bits-of-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-or-upper-bits-of-rom-bank-number-write-only"}},[t._v("#")]),t._v(" 4000-5FFF - RAM Bank Number - or - Upper Bits of ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("This second 2-bit register can be used to select a RAM Bank in range from\n$00-$03 (32 KiB ram carts only), or to specify the upper two bits (bits 5-6)\nof the ROM Bank number (1 MiB ROM or larger carts only). If neither ROM nor\nRAM is large enough, setting this register does nothing.")]),t._v(" "),a("p",[t._v("In 1MB MBC1 multi-carts (see below), this 2-bit register is instead\napplied to bits 4-5 of the ROM bank number and the top bit of the main\n5-bit main ROM banking register is ignored.")]),t._v(" "),a("h4",{attrs:{id:"_6000-7fff-banking-mode-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6000-7fff-banking-mode-select-write-only"}},[t._v("#")]),t._v(" 6000-7FFF - Banking Mode Select (Write Only)")]),t._v(" "),a("p",[t._v("This 1-bit register selects between the two MBC1 banking modes, controlling\nthe behaviour of the secondary 2-bit banking register (above). If the cart\nis not large enough to use the 2-bit register (<= 8 KiB RAM / <= 512 KiB ROM)\nthis mode select has no observable effect. The program may freely switch\nbetween the two modes at any time.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("00 = Simple ROM Banking Mode (default)\n01 = RAM Banking Mode / Advanced ROM Banking Mode\n")])])]),a("p",[t._v('In mode 0, the 2-bit secondary banking register can only affect the\n4000-7FFF banked ROM area. If the cart is a "small ROM"/"large RAM" cart\n(< 1 MiB ROM, > 8 KiB RAM) then 4000-7FFF is unaffected by this register anyway,\nso the practical effect is that RAM banking is disabled and A000-BFFF is\nlocked to only be able to access bank 0 of RAM, with the 2-bit secondary\nbanking register entirely ignored.')]),t._v(" "),a("p",[t._v('In mode 1, the behaviour differs depending on whether the current cart is\na "large RAM" cart (> 8 KiB RAM) or "large ROM" cart (1 MB or larger). For\nlarge RAM carts, switching to mode 1 enables RAM banking and (if RAM is\nenabled) immediately switches the A000-BFFF RAM area to the bank selected\nby the 2-bit secondary banking register.')]),t._v(" "),a("p",[t._v('For "large ROM" carts, mode 1 has the 4000-7FFF banked ROM area behave the\nsame as mode 0, but additionally the "unbankable" "bank 0" area 0000-3FFF\nis now also affected by the 2-bit secondary banking register, meaning it\ncan now be switched between banks $00, $20, $40 and $60. These banks are\ninaccessible in mode 0 - they cannot be mapped to the 4000-7FFF banked ROM\narea.')]),t._v(" "),a("h4",{attrs:{id:"note-for-1-mb-multi-game-compilation-carts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#note-for-1-mb-multi-game-compilation-carts"}},[t._v("#")]),t._v(" Note for 1 MB Multi-Game Compilation Carts")]),t._v(" "),a("p",[t._v("Also known as MBC1m, these carts have an alternative wiring, that ignores\nthe top bit of the main ROM banking register (making it a 4-bit register)\nand applies the 2-bit register to bits 4-5 of the bank number (instead of\nthe usual bits 5-6). This means that in mode 1 the 2-bit register selects\nbanks $00, $10, $20, or $30, rather than the usual $00, $20, $40 or $60.")]),t._v(" "),a("p",[t._v("These carts make use of the fact that mode 1 remaps the 0000-3FFF area\nto switch games. The 2-bit register is used to select the game - switching\nthe zero bank and the region of banks that the 4000-7FFF rom area can\naccess to those for the selected game and then the game only changes the\nmain ROM banking register. As far as the selected game knows, it's running\nfrom a 256 KiB cart!")]),t._v(" "),a("p",[t._v("These carts can normally be identified by having a Nintendo copyright\nheader in bank $10. A badly dumped multi-cart ROM can be identified by\nhaving duplicate content in banks $10-$1F (dupe of $00-$0F) and banks $30-$3F\n(dupe of $20-$2F).\nThere is a known bad dump of the Mortal Kombat I & II collection around.")]),t._v(" "),a("p",[t._v('An "MBC1M" compilation cart ROM can be converted into a regular MBC1 ROM\nby increasing the ROM size to 2MB and duplicating each sub-rom - 00-0Fh\nduplicated into $10-$1F, the original $10-$1F placed in $20-$2F and\nduplicated into $30-$3F and so on.')]),t._v(" "),a("h1",{attrs:{id:"mbc2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc2"}},[t._v("#")]),t._v(" MBC2")]),t._v(" "),a("p",[t._v("(max 256 KiB ROM and 512x4 bits RAM)")]),t._v(" "),a("h3",{attrs:{id:"memory-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-2"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),t._v(" "),a("p",[t._v("Contains the first 16 KiB of the ROM.")]),t._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-01-0f-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-0f-read-only"}},[t._v("#")]),t._v(" 4000-7FFF - ROM Bank 01-0F (Read Only)")]),t._v(" "),a("p",[t._v("Same as for MBC1, but only a total of 16 ROM banks is supported.")]),t._v(" "),a("h4",{attrs:{id:"a000-a1ff-512x4bits-ram-built-in-into-the-mbc2-chip-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-a1ff-512x4bits-ram-built-in-into-the-mbc2-chip-read-write"}},[t._v("#")]),t._v(" A000-A1FF - 512x4bits RAM, built-in into the MBC2 chip (Read/Write)")]),t._v(" "),a("p",[t._v("The MBC2 doesn't support external RAM, instead it includes 512x4 bits\nof built-in RAM (in the MBC2 chip itself). It still requires an external\nbattery to save data during power-off though. As the data consists of\n4bit values, only the lower 4 bits of the bit octets in this memory area\nare used. The upper 4 bits of each byte are undefined and should not be\nrelied upon.")]),t._v(" "),a("h4",{attrs:{id:"a200-bfff-15-echoes-of-a000-a1ff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a200-bfff-15-echoes-of-a000-a1ff"}},[t._v("#")]),t._v(' A200-BFFF - 15 "echoes" of A000-A1FF')]),t._v(" "),a("p",[t._v('Only the bottom 9 bits of the address are used to index into the internal\nRAM, so RAM access repeats. As with the A000-A1FF region, only the lower\n4 bits of the "bytes" are used, and the upper 4 bits of each byte are\nundefined and should not be relied upon.')]),t._v(" "),a("h3",{attrs:{id:"registers-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-3"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-ram-enable-and-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-ram-enable-and-rom-bank-number-write-only"}},[t._v("#")]),t._v(" 0000-3FFF - RAM Enable and ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("This address range is responsible for both enabling/disabling the RAM\nand for controlling the ROM bank number. Bit 8 of the address (the least\nsignificant bit of the upper address byte) determines whether to control\nthe RAM enable flag or the ROM bank number.")]),t._v(" "),a("h5",{attrs:{id:"when-bit-8-is-clear"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-bit-8-is-clear"}},[t._v("#")]),t._v(" When Bit 8 is Clear")]),t._v(" "),a("p",[t._v("When the least significant bit of the upper address byte is zero, the\nvalue that is written controls whether the RAM is enabled. When the\nvalue written to this address range is equal to "),a("code",[t._v("0Ah")]),t._v(", RAM is enabled.\nIf any other value is written, RAM is disabled.")]),t._v(" "),a("p",[t._v("Examples of address that can control RAM: 0000-00FF, 0200-02FF,\n0400-04FF, ..., 3E00-3EFF.")]),t._v(" "),a("p",[t._v("RAM is disabled by default.")]),t._v(" "),a("h5",{attrs:{id:"when-bit-8-is-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-bit-8-is-set"}},[t._v("#")]),t._v(" When Bit 8 is Set")]),t._v(" "),a("p",[t._v("When the least significant bit of the upper address byte is one, the\nvalue that is written controls the selected ROM bank at 4000-7FFF.")]),t._v(" "),a("p",[t._v("Specifically, the lower 4 bits of the value written to this address\nrange specify the ROM bank number. If bank 0 is written, the resulting\nbank will be bank 1 instead.")]),t._v(" "),a("p",[t._v("Examples of address that can control ROM: 0100-01FF, 0300-03FF,\n0500-05FF, ..., 3F00-3FFF.")]),t._v(" "),a("p",[t._v("The ROM bank is set to 1 by default.")]),t._v(" "),a("h1",{attrs:{id:"mbc3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc3"}},[t._v("#")]),t._v(" MBC3")]),t._v(" "),a("p",[t._v("(max 2MByte ROM and/or 32KByte RAM and Timer)")]),t._v(" "),a("p",[t._v("Beside for the ability to access up to 2MB ROM (128 banks), and 32KB RAM\n(4 banks), the MBC3 also includes a built-in Real Time Clock (RTC). The\nRTC requires an external 32.768 kHz Quartz Oscillator, and an external\nbattery (if it should continue to tick when the Game Boy is turned off).")]),t._v(" "),a("h3",{attrs:{id:"memory-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-3"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-2"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),t._v(" "),a("p",[t._v("Contains the first 16 KiB of the ROM.")]),t._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-01-7f-read-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-7f-read-only-2"}},[t._v("#")]),t._v(" 4000-7FFF - ROM Bank 01-7F (Read Only)")]),t._v(" "),a("p",[t._v("Same as for MBC1, except that accessing banks 20h, 40h, and 60h is\nsupported now.")]),t._v(" "),a("h4",{attrs:{id:"a000-bfff-ram-bank-00-03-if-any-read-write-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-ram-bank-00-03-if-any-read-write-2"}},[t._v("#")]),t._v(" A000-BFFF - RAM Bank 00-03, if any (Read/Write)")]),t._v(" "),a("p",[t._v("Depending on the current Bank Number/RTC Register selection (see below),\nthis memory space is used to access an 8 KiB external RAM Bank, or a\nsingle RTC Register.")]),t._v(" "),a("h3",{attrs:{id:"registers-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-4"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("h4",{attrs:{id:"a000-bfff-rtc-register-08-0c-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-rtc-register-08-0c-read-write"}},[t._v("#")]),t._v(" A000-BFFF - RTC Register 08-0C (Read/Write)")]),t._v(" "),a("p",[t._v("Depending on the current Bank Number/RTC Register selection (see below),\nthis memory space is used to access an 8KByte external RAM Bank, or a\nsingle RTC Register.")]),t._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-and-timer-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-and-timer-enable-write-only"}},[t._v("#")]),t._v(" 0000-1FFF - RAM and Timer Enable (Write Only)")]),t._v(" "),a("p",[t._v("Mostly the same as for MBC1, a value of 0Ah will enable reading and\nwriting to external RAM - and to the RTC Registers! A value of 00h will\ndisable either.")]),t._v(" "),a("h4",{attrs:{id:"_2000-3fff-rom-bank-number-write-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only-2"}},[t._v("#")]),t._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("Same as for MBC1, except that the whole 7 bits of the RAM Bank Number\nare written directly to this address. As for the MBC1, writing a value\nof 00h, will select Bank 01h instead. All other values 01-7Fh select the\ncorresponding ROM Banks.")]),t._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-bank-number-or-rtc-register-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-or-rtc-register-select-write-only"}},[t._v("#")]),t._v(" 4000-5FFF - RAM Bank Number - or - RTC Register Select (Write Only)")]),t._v(" "),a("p",[t._v("As for the MBC1s RAM Banking Mode, writing a value in range for 00h-03h\nmaps the corresponding external RAM Bank (if any) into memory at\nA000-BFFF. When writing a value of 08h-0Ch, this will map the\ncorresponding RTC register into memory at A000-BFFF. That register could\nthen be read/written by accessing any address in that area, typically\nthat is done by using address A000.")]),t._v(" "),a("h4",{attrs:{id:"_6000-7fff-latch-clock-data-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6000-7fff-latch-clock-data-write-only"}},[t._v("#")]),t._v(" 6000-7FFF - Latch Clock Data (Write Only)")]),t._v(" "),a("p",[t._v("When writing 00h, and then 01h to this register, the current time\nbecomes latched into the RTC registers. The latched data will not change\nuntil it becomes latched again, by repeating the write 00h->01h\nprocedure. This provides a way to read the RTC registers while the\nclock keeps ticking.")]),t._v(" "),a("h4",{attrs:{id:"the-clock-counter-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-clock-counter-registers"}},[t._v("#")]),t._v(" The Clock Counter Registers")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("08h  RTC S   Seconds   0-59 (0-3Bh)\n09h  RTC M   Minutes   0-59 (0-3Bh)\n0Ah  RTC H   Hours     0-23 (0-17h)\n0Bh  RTC DL  Lower 8 bits of Day Counter (0-FFh)\n0Ch  RTC DH  Upper 1 bit of Day Counter, Carry Bit, Halt Flag\n      Bit 0  Most significant bit of Day Counter (Bit 8)\n      Bit 6  Halt (0=Active, 1=Stop Timer)\n      Bit 7  Day Counter Carry Bit (1=Counter Overflow)\n")])])]),a("p",[t._v("The Halt Flag is supposed to be set before "),a("strong",[t._v("writing")]),t._v(" to the RTC\nRegisters.")]),t._v(" "),a("h4",{attrs:{id:"the-day-counter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-day-counter"}},[t._v("#")]),t._v(" The Day Counter")]),t._v(" "),a("p",[t._v("The total 9 bits of the Day Counter allow to count days in range from\n0-511 (0-1FFh). The Day Counter Carry Bit becomes set when this value\noverflows. In that case the Carry Bit remains set until the program does\nreset it. Note that you can store an offset to the Day Counter in\nbattery RAM. For example, every time you read a non-zero Day Counter,\nadd this Counter to the offset in RAM, and reset the Counter to zero.\nThis method allows to count any number of days, making your program\nYear-10000-Proof, provided that the cartridge gets used at least every\n511 days.")]),t._v(" "),a("h4",{attrs:{id:"delays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delays"}},[t._v("#")]),t._v(" Delays")]),t._v(" "),a("p",[t._v("When accessing the RTC Registers it is recommended to execute a 4ms\ndelay (4 Cycles in Normal Speed Mode) between the separate accesses.")]),t._v(" "),a("h1",{attrs:{id:"mbc5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc5"}},[t._v("#")]),t._v(" MBC5")]),t._v(" "),a("p",[t._v("It can map up to 64 Mbits (8 MiB) of ROM.")]),t._v(" "),a("p",[t._v("MBC5 (Memory Bank Controller 5) is the 4th generation MBC. There\napparently was no MBC4, presumably because of the superstition about the\nnumber 4 in Japanese culture. It is the first MBC that is guaranteed to\nwork properly with GBC double speed mode.")]),t._v(" "),a("h3",{attrs:{id:"memory-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-4"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-3"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),t._v(" "),a("p",[t._v("Contains the first 16 KiB of the ROM.")]),t._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-00-1ff-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-00-1ff-read-only"}},[t._v("#")]),t._v(" 4000-7FFF - ROM bank 00-1FF (Read Only)")]),t._v(" "),a("p",[t._v("Same as for MBC1, except that accessing up to bank $1FF is supported\nnow. Also, bank 0 is actually bank 0.")]),t._v(" "),a("h4",{attrs:{id:"a000-bfff-ram-bank-00-0f-if-any-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-ram-bank-00-0f-if-any-read-write"}},[t._v("#")]),t._v(" A000-BFFF - RAM bank 00-0F, if any (Read/Write)")]),t._v(" "),a("p",[t._v("Same as for MBC1, except that RAM sizes are 8 KiB, 32 KiB and 128 KiB.")]),t._v(" "),a("h3",{attrs:{id:"registers-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-5"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-enable-write-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-write-only-2"}},[t._v("#")]),t._v(" 0000-1FFF - RAM Enable (Write Only)")]),t._v(" "),a("p",[t._v("Mostly the same as for MBC1. Writing $0A will enable reading and\nwriting to external RAM. Writing $00 will disable it.")]),t._v(" "),a("p",[t._v("Actual MBCs actually enable RAM when writing any value whose bottom 4 bits equal $A (so $0A, $1A, and so on), and disable it when writing anything else.\nRelying on this behavior is not recommended for compatibility reasons.")]),t._v(" "),a("h4",{attrs:{id:"_2000-2fff-8-least-significant-bits-of-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-2fff-8-least-significant-bits-of-rom-bank-number-write-only"}},[t._v("#")]),t._v(" 2000-2FFF - 8 least significant bits of ROM bank number (Write Only)")]),t._v(" "),a("p",[t._v("The 8 least significant bits of the ROM bank number go here. Writing 0 will indeed\ngive bank 0 on MBC5, unlike other MBCs.")]),t._v(" "),a("h4",{attrs:{id:"_3000-3fff-9th-bit-of-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3000-3fff-9th-bit-of-rom-bank-number-write-only"}},[t._v("#")]),t._v(" 3000-3FFF - 9th bit of ROM bank number (Write Only)")]),t._v(" "),a("p",[t._v("The 9th bit of the ROM bank number goes here.")]),t._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-write-only"}},[t._v("#")]),t._v(" 4000-5FFF - RAM bank number (Write Only)")]),t._v(" "),a("p",[t._v("As for the MBC1s RAM Banking Mode, writing a value in the range $00-$0F\nmaps the corresponding external RAM bank (if any) into the memory area at\nA000-BFFF.")]),t._v(" "),a("p",[a("img",{attrs:{src:"imgs/MBC5.png",alt:"",title:"imgs/MBC5.png"}})]),t._v(" "),a("h1",{attrs:{id:"mbc6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc6"}},[t._v("#")]),t._v(" MBC6")]),t._v(" "),a("h3",{attrs:{id:"overview-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-3"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("MBC6 (Memory Bank Controller 6) is an unusual MBC that contains two\nseparately switchable ROM banks ($4000 and $6000) and RAM banks\n($A000 and $B000), SRAM and an 8 Mbit Macronix MX29F008TC-14 flash\nmemory chip. It is only used in one game, Net de Get: Minigame @ 100,\nwhich uses the Mobile Adapter to connect to\nthe web to download minigames onto the local flash. Both ROM banks and\nboth RAM banks are views into the same ROM and RAM, but with separately\nadjustable offsets. Since the banked regions are smaller the effective\nnumber of banks is twice what it usually would be; 8 kB ROM banks\ninstead of 16 kB and 4 kB RAM banks instead of 8 kB.")]),t._v(" "),a("h3",{attrs:{id:"memory-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-5"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-4"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),t._v(" "),a("p",[t._v("Contains the first 16 KiB of the ROM.")]),t._v(" "),a("h4",{attrs:{id:"_4000-5fff-rom-flash-bank-a-00-7f-read-write-for-flash-read-only-for-rom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-rom-flash-bank-a-00-7f-read-write-for-flash-read-only-for-rom"}},[t._v("#")]),t._v(" 4000-5FFF - ROM/Flash Bank A 00-7F (Read/Write for flash, Read Only for ROM)")]),t._v(" "),a("p",[t._v("Read-only access to ROM and flash banks 00-7F, switchable independently\nfrom ROM/Flash Bank B.")]),t._v(" "),a("h4",{attrs:{id:"_6000-7fff-rom-flash-bank-b-00-7f-read-write-for-flash-read-only-for-rom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6000-7fff-rom-flash-bank-b-00-7f-read-write-for-flash-read-only-for-rom"}},[t._v("#")]),t._v(" 6000-7FFF - ROM/Flash Bank B 00-7F (Read/Write for flash, Read Only for ROM)")]),t._v(" "),a("p",[t._v("Read-only access to ROM and flash banks 00-7F, switchable independently\nfrom ROM/Flash Bank A.")]),t._v(" "),a("h4",{attrs:{id:"a000-afff-ram-bank-a-00-07-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-afff-ram-bank-a-00-07-read-write"}},[t._v("#")]),t._v(" A000-AFFF - RAM Bank A 00-07 (Read/Write)")]),t._v(" "),a("p",[t._v("Read/write access to RAM banks 00-07, switchable independently from RAM\nBank B.")]),t._v(" "),a("h4",{attrs:{id:"b000-bfff-ram-bank-b-00-07-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b000-bfff-ram-bank-b-00-07-read-write"}},[t._v("#")]),t._v(" B000-BFFF - RAM Bank B 00-07 (Read/Write)")]),t._v(" "),a("p",[t._v("Read/write access to RAM banks 00-07, switchable independently from RAM\nBank A.")]),t._v(" "),a("h3",{attrs:{id:"registers-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-6"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("h4",{attrs:{id:"_0000-03ff-ram-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-03ff-ram-enable-write-only"}},[t._v("#")]),t._v(" 0000-03FF - RAM Enable (Write Only)")]),t._v(" "),a("p",[t._v("Mostly the same as for MBC1, a value of 0Ah will enable reading and\nwriting to external RAM. A value of 00h will disable it.")]),t._v(" "),a("h4",{attrs:{id:"_0400-07ff-ram-bank-a-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0400-07ff-ram-bank-a-number-write-only"}},[t._v("#")]),t._v(" 0400-07FF - RAM Bank A Number (Write Only)")]),t._v(" "),a("p",[t._v("Select the active RAM Bank A (A000-AFFF)")]),t._v(" "),a("h4",{attrs:{id:"_0800-0bff-ram-bank-b-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0800-0bff-ram-bank-b-number-write-only"}},[t._v("#")]),t._v(" 0800-0BFF - RAM Bank B Number (Write Only)")]),t._v(" "),a("p",[t._v("Select the active RAM Bank B (B000-BFFF)")]),t._v(" "),a("h4",{attrs:{id:"_0c00-0fff-flash-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0c00-0fff-flash-enable-write-only"}},[t._v("#")]),t._v(" 0C00-0FFF - Flash Enable (Write Only)")]),t._v(" "),a("p",[t._v("Enable or disable access to the flash chip. Only the lowest bit (0 for\ndisable, 1 for enable) is used. Flash Write Enable must be active to\nchange this.")]),t._v(" "),a("h4",{attrs:{id:"_1000-flash-write-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1000-flash-write-enable-write-only"}},[t._v("#")]),t._v(" 1000 - Flash Write Enable (Write Only)")]),t._v(" "),a("p",[t._v("Enable or disable write mode for the flash chip. Only the lowest bit (0\nfor disable, 1 for enable) is used. Note that this maps to the /WE pin\non the flash chip, not whether or not writing to the bus is enabled;\nsome flash commands (e.g. JEDEC ID query) still work with this off so\nlong as Flash Enable is on.")]),t._v(" "),a("h4",{attrs:{id:"_2000-27ff-rom-flash-bank-a-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-27ff-rom-flash-bank-a-number-write-only"}},[t._v("#")]),t._v(" 2000-27FF - ROM/Flash Bank A Number (Write Only)")]),t._v(" "),a("p",[t._v("The number for the active bank in ROM/Flash Bank A.")]),t._v(" "),a("h4",{attrs:{id:"_2800-2fff-rom-flash-bank-a-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2800-2fff-rom-flash-bank-a-select-write-only"}},[t._v("#")]),t._v(" 2800-2FFF - ROM/Flash Bank A Select (Write Only)")]),t._v(" "),a("p",[t._v("Selects whether the ROM or the Flash is mapped into ROM/Flash Bank A. A\nvalue of 00 selects the ROM and 08 selects the flash.")]),t._v(" "),a("h4",{attrs:{id:"_3000-37ff-rom-flash-bank-b-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3000-37ff-rom-flash-bank-b-number-write-only"}},[t._v("#")]),t._v(" 3000-37FF - ROM/Flash Bank B Number (Write Only)")]),t._v(" "),a("p",[t._v("The number for the active bank in ROM/Flash Bank B.")]),t._v(" "),a("h4",{attrs:{id:"_3800-3fff-rom-flash-bank-b-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3800-3fff-rom-flash-bank-b-select-write-only"}},[t._v("#")]),t._v(" 3800-3FFF - ROM/Flash Bank B Select (Write Only)")]),t._v(" "),a("p",[t._v("Selects whether the ROM or the Flash is mapped into ROM/Flash Bank B. A\nvalue of 00 selects the ROM and 08 selects the flash.")]),t._v(" "),a("h4",{attrs:{id:"flash-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flash-commands"}},[t._v("#")]),t._v(" Flash Commands")]),t._v(" "),a("p",[t._v("The flash chip is mapped directly into the A or B address space, which\nmeans standard flash access commands are used. To issue a command, you\nmust write the value $AA to $5555 then $55 to $2AAA and, which are\nmapped as 2:5555/1:4AAA for bank A or 2:7555/1:6AAA for bank B followed\nby the command at either 2:5555/2:7555, or a relevant address, depending\non the command.")]),t._v(" "),a("p",[t._v("The commands and access sequences are as follows, were X refers to\neither 4 or 6 and Y to 5 or 7, depending on the bank region:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("------------- ------------- ------------- ------------- ------------- ------------- ------------------------------------------------\n2:Y555=$AA    1:XAAA=$55    2:Y555=$80    2:Y555=$AA    1:XAAA=$55    ?:X000=$30    Erase sector\\* (set 8 kB region to $FFs)\n2:Y555=$AA    1:XAAA=$55    2:Y555=$80    2:Y555=$AA    1:XAAA=$55    ?:Y555=$10    Erase chip\\* (set entire flash to $FFs)\n2:Y555=$AA    1:XAAA=$55    2:Y555=$90                                                 ID mode (reads out JEDEC ID (C2,81) at $X000)\n2:Y555=$AA    1:XAAA=$55    2:Y555=$A0                                                 Program mode\\*\n2:Y555=$AA    1:XAAA=$55    2:Y555=$F0                                                 Exit ID/erase chip mode\n2:Y555=$AA    1:XAAA=$55    ?:X000=$F0                                                 Exit erase sector mode\n?:????=$F0                                                                               Exit program mode\n------------- ------------- ------------- ------------- ------------- ------------- ------------------------------------------------\n")])])]),a("p",[t._v("Commands marked with * require the Write Enable bit to be 1. These will\nmake the flash read out status bytes instead of values. A status of $80\nmeans the operation has finished and you should exit the mode using the\nappropriate command. A status of $10 indicates a timeout.")]),t._v(" "),a("p",[t._v("Programming must be done by first erasing a sector, activating write\nmode, writing out 128 bytes (aligned), then writing a 0 to the final\naddress to commit the write, waiting for the status to indicate\ncompletion, and writing $F0 to the final address again to exit program\nmode. If a sector is not erased first programming will not work\nproperly. In some cases it will only allow the stored bytes to be anded\ninstead of replaced; in others it just won't work at all. The only way\nto set the bits back to 1 is to erase the sector entirely. It is\nrecommended to check the flash to make sure all bytes were written\nproperly and re-write (without erasing) the 128 byte block if some bits\ndidn't get set to 0 properly. After writing all blocks in a sector\nFlash Write Enable should be set to 0.")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"http://gbdev.gg8.se/forums/viewtopic.php?id=544",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"mbc7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc7"}},[t._v("#")]),t._v(" MBC7")]),t._v(" "),a("h3",{attrs:{id:"overview-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-4"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("MBC7 (Memory Bank Controller 7) is an MBC containing a 2-axis\naccelerometer (ADXL202E) and a 256 byte EEPROM\n("),a("a",{attrs:{href:"http://www.microchip.com/wwwproducts/en/en010904",target:"_blank",rel:"noopener noreferrer"}},[t._v("93LC56"),a("OutboundLink")],1),t._v("). A000-BFFF\ndoes not directly address the EEPROM, as most MBCs do, but rather\ncontains several registers that can be read or written one at a time.\nThis makes EEPROM access very slow due to needing multiple writes per\naddress.")]),t._v(" "),a("h3",{attrs:{id:"memory-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-6"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-5"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),t._v(" "),a("p",[t._v("Contains the first 16 KiB of the ROM.")]),t._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-00-7f-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-00-7f-read-only"}},[t._v("#")]),t._v(" 4000-7FFF - ROM Bank 00-7F (Read Only)")]),t._v(" "),a("p",[t._v("Same as for MBC5. (Bank 0 mapping needs confirmation)")]),t._v(" "),a("h3",{attrs:{id:"registers-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registers-7"}},[t._v("#")]),t._v(" Registers")]),t._v(" "),a("h4",{attrs:{id:"a000-afff-ram-registers-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-afff-ram-registers-read-write"}},[t._v("#")]),t._v(" A000-AFFF - RAM Registers (Read/Write)")]),t._v(" "),a("p",[t._v("Must be enabled via 0000 and 4000 region writes (see respective\nsections), otherwise reads read FFh and writes do nothing. Registers are\naddressed through bits 4-7 of the address. Bits 0-3 and 8-11 are\nignored.")]),t._v(" "),a("p",[t._v("Accelerometer data must be latched before reading. Data is 16-bit and\ncentered at the value 81D0. Earth's gravity affects the value by\nroughly 70h, with larger acceleration providing a larger range. Maximum\nrange is unknown.")]),t._v(" "),a("h4",{attrs:{id:"ax0x-ax1x-latch-accelerometer-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ax0x-ax1x-latch-accelerometer-write-only"}},[t._v("#")]),t._v(" Ax0x/Ax1x - Latch Accelerometer (Write Only)")]),t._v(" "),a("p",[t._v("Write 55h to Ax0x to erase the latched data (reset back to 8000) then\nAAh to Ax1x to latch the accelerometer and update the addressable\nregisters. Reads return FFh. Other writes do not appear to do anything\n(Partially unconfirmed). Note that you cannot re-latch the accelerometer\nvalue without first erasing it; attempts to do so yield no change.")]),t._v(" "),a("h4",{attrs:{id:"ax2x-ax3x-accelerometer-x-value-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ax2x-ax3x-accelerometer-x-value-read-only"}},[t._v("#")]),t._v(" Ax2x/Ax3x - Accelerometer X value (Read Only)")]),t._v(" "),a("p",[t._v("Ax2x contains the low byte of the X value (lower values are towards the\nright and higher values are towards the left), and Ax3x contains the\nhigh byte. Reads 8000 before first latching.")]),t._v(" "),a("h4",{attrs:{id:"ax4x-ax5x-accelerometer-y-value-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ax4x-ax5x-accelerometer-y-value-read-only"}},[t._v("#")]),t._v(" Ax4x/Ax5x - Accelerometer Y value (Read Only)")]),t._v(" "),a("p",[t._v("Ax4x contains the low byte of the Y value (lower values are towards the\nbottom and higher values are towards the top), and Ax5x contains the\nhigh byte. Reads 8000 before first latching.")]),t._v(" "),a("h4",{attrs:{id:"ax6x-ax7x-unknown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ax6x-ax7x-unknown"}},[t._v("#")]),t._v(" Ax6x/Ax7x - Unknown")]),t._v(" "),a("p",[t._v("Ax6x always reads 00h and Ax7x always reads FFh. Possibly reserved for Z\naxis, which does not exist on this accelerometer.")]),t._v(" "),a("h4",{attrs:{id:"ax8x-eeprom-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ax8x-eeprom-read-write"}},[t._v("#")]),t._v(" Ax8x - EEPROM (Read/Write)")]),t._v(" "),a("p",[t._v("Values in this register correspond to 4 pins on the EEPROM:")]),t._v(" "),a("ul",[a("li",[t._v("Bit 0: Data Out (DO)")]),t._v(" "),a("li",[t._v("Bit 1: Data In (DI)")]),t._v(" "),a("li",[t._v("Bit 6: Clock (CLK or SK in existing code)")]),t._v(" "),a("li",[t._v("Bit 7: Chip Select (CS)")])]),t._v(" "),a("p",[t._v("The other pins (notably ORG, which controls 8-bit vs 16-bit addressing)\ndo not appear to be connected to this register.")]),t._v(" "),a("p",[t._v("Commands are sent to the EEPROM by shifting in a bitstream to DI while\nmanually clocking CLK. All commands must be preceded by a 1 bit, and\nexisting games precede the 1 bit with a 0 bit (though this is not\nnecessary):")]),t._v(" "),a("ul",[a("li",[t._v("Write 00h (lower CS)")]),t._v(" "),a("li",[t._v("Write 80h (raise CS)")]),t._v(" "),a("li",[t._v("Write C0h (shift in 0 bit)")]),t._v(" "),a("li",[t._v("Write 82h (lower CS, raise DI)")]),t._v(" "),a("li",[t._v("Write C2h (shift in 1 bit)")]),t._v(" "),a("li",[t._v("Write command")])]),t._v(" "),a("p",[t._v('The following commands exist, each 10 bits (excluding data shifted in or\nout). "x" means the value of this bit is ignored. "A" means the\nrelevant bit of the address. All data is shifted in or out MSB first.\nNote that data is addressed 16 bits at a time, so address 1 corresponds\nto bits 16-31, thus bytes 2-3.')]),t._v(" "),a("ul",[a("li",[t._v("READ: 10xAAAAAAAb (then shift out 16 bits)")]),t._v(" "),a("li",[t._v("EWEN (Erase/Write enable): 0011xxxxxxb")]),t._v(" "),a("li",[t._v("EWDS (Erase/Write disable): 0000xxxxxxb")]),t._v(" "),a("li",[t._v("WRITE: 01xAAAAAAAb (then shift in 16 bits)")]),t._v(" "),a("li",[t._v("ERASE (fill address with FFFF): 11xAAAAAAAb")]),t._v(" "),a("li",[t._v("ERAL (fill EEPROM with FFFF): 0010xxxxxxb")]),t._v(" "),a("li",[t._v("WRAL (fill EEPROM with value): 0001xxxxxxb (then shift in 16 bits)")])]),t._v(" "),a("p",[t._v("All programming operations (WRITE/ERASE/WRAL/ERAL) must be preceded with\nEWEN.")]),t._v(" "),a("p",[t._v("According to the datasheet, programming operations take time to settle.\nContinue clocking and check the value of DO to verify if command is\nstill running. Data sheet says that the signal to DO is RDY, thus it\nreads a 1 when the command finishes.")]),t._v(" "),a("p",[t._v("Datasheet:\n"),a("a",{attrs:{href:"http://ww1.microchip.com/downloads/en/DeviceDoc/21712C.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("1"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"ax9x-axfx-unused"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ax9x-axfx-unused"}},[t._v("#")]),t._v(" Ax9x-AxFx - Unused")]),t._v(" "),a("p",[t._v("Reads out FFh.")]),t._v(" "),a("h4",{attrs:{id:"b000-bfff-unknown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b000-bfff-unknown"}},[t._v("#")]),t._v(" B000-BFFF - Unknown")]),t._v(" "),a("p",[t._v("Only seems to read out FFh.")]),t._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-enable-1-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-1-write-only"}},[t._v("#")]),t._v(" 0000-1FFF - RAM Enable 1 (Write Only)")]),t._v(" "),a("p",[t._v("Mostly the same as for MBC1, a value of 0Ah will enable reading and\nwriting to RAM registers. A value of 00h will disable it. Please note\nthat the RAM must second be enabled in the second RAM enable section as\nwell (4000-5FFF)")]),t._v(" "),a("h4",{attrs:{id:"_2000-3fff-rom-bank-number-write-only-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only-3"}},[t._v("#")]),t._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("The ROM bank number goes here.")]),t._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-enable-2-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-enable-2-write-only"}},[t._v("#")]),t._v(" 4000-5FFF - RAM Enable 2 (Write Only)")]),t._v(" "),a("p",[t._v("Writing 40h to this region enables access to the RAM registers. Writing\nany other value appears to disable access to RAM, but this is not fully\ntested. Please note that the RAM must first be enabled in the first RAM\nenable section as well (0000-1FFF)")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"http://gbdev.gg8.se/forums/viewtopic.php?id=448",target:"_blank",rel:"noopener noreferrer"}},[t._v("2"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"huc1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huc1"}},[t._v("#")]),t._v(" HuC1")]),t._v(" "),a("h3",{attrs:{id:"huc1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huc1-2"}},[t._v("#")]),t._v(" HuC1")]),t._v(" "),a("p",[t._v('HuC1 is an MBC used by some Game Boy games which besides doing the usual\nMBC stuff, also provides IR comms. A lot of sources on the internet said\nthat HuC1 was "similar to MBC1", but they didn\'t provide any detail.\nI took a look, and it turns out that HuC1 differs from MBC1 quite a lot.')]),t._v(" "),a("h3",{attrs:{id:"memory-map-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-map-2"}},[t._v("#")]),t._v(" Memory Map")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Address range")]),t._v(" "),a("th",[t._v("Feature")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$0000-1FFF")]),t._v(" "),a("td",[t._v("RAM/IR select (when writing only)")])]),t._v(" "),a("tr",[a("td",[t._v("$2000-3FFF")]),t._v(" "),a("td",[t._v("ROM bank select (when writing only)")])]),t._v(" "),a("tr",[a("td",[t._v("$4000-5FFF")]),t._v(" "),a("td",[t._v("RAM bank select (when writing only)")])]),t._v(" "),a("tr",[a("td",[t._v("$6000-7FFF")]),t._v(" "),a("td",[t._v("Nothing?")])]),t._v(" "),a("tr",[a("td",[t._v("$A000-BFFF")]),t._v(" "),a("td",[t._v("Cart RAM or IR register")])])])]),t._v(" "),a("h3",{attrs:{id:"_0000-1fff-ir-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ir-select-write-only"}},[t._v("#")]),t._v(" 0000-1FFF IR Select (Write Only)")]),t._v(" "),a("p",[t._v('Most MBCs let you disable the cartridge RAM to prevent accidental\nwrites. HuC1 doesn\'t do this, instead you use this register to switch\nthe A000-BFFF region between "RAM mode" and "IR mode" (described\nbelow). Write 0x0E to switch to IR mode, and anything else to switch to\nRAM mode. Nevertheless some HuC1 games attempt to write 0x0A and 0x00 to\nthis region as if it would enable/disable cart RAM.')]),t._v(" "),a("h3",{attrs:{id:"_2000-3fff-rom-bank-number-write-only-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only-4"}},[t._v("#")]),t._v(" 2000-3FFF ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("HuC1 can accept a bank number of at least 6 bits here.")]),t._v(" "),a("h3",{attrs:{id:"_4000-5fff-ram-bank-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-select-write-only"}},[t._v("#")]),t._v(" 4000-5FFF RAM Bank Select (Write Only)")]),t._v(" "),a("p",[t._v("HuC1 can accept a bank number of at least 2 bits here.")]),t._v(" "),a("h3",{attrs:{id:"_6000-7fff-nothing-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6000-7fff-nothing-write-only"}},[t._v("#")]),t._v(" 6000-7FFF Nothing? (Write Only)")]),t._v(" "),a("p",[t._v("Writes to this region seem to have no effect. Even so, some games do\nwrite to this region, as if it had the same effect as on MBC1. You may\nsafely ignore these writes.")]),t._v(" "),a("h3",{attrs:{id:"a000-bfff-cart-ram-or-ir-register-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-cart-ram-or-ir-register-read-write"}},[t._v("#")]),t._v(" A000-BFFF Cart RAM or IR register (Read/Write)")]),t._v(" "),a("p",[t._v('When in "IR mode" (wrote 0x0E to 0x0000), the IR register is visible\nhere. Write to this region to control the IR transmitter. 0x01 turns it\non, 0x00 turns it off. Read from this region to see either 0xC1 (saw\nlight) or 0xC0 (did not see light). When in "RAM mode" (wrote\nsomething other than 0x0E to 0x000) this region behaves like normal cart\nRAM.')]),t._v(" "),a("h3",{attrs:{id:"external-links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-links"}},[t._v("#")]),t._v(" External links")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://jrra.zone/blog/huc1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Source on jrra.zone"),a("OutboundLink")],1)])]),t._v(" "),a("h1",{attrs:{id:"other-mbcs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-mbcs"}},[t._v("#")]),t._v(" Other MBCs")]),t._v(" "),a("h3",{attrs:{id:"multicart-mbcs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multicart-mbcs"}},[t._v("#")]),t._v(" Multicart MBCs")]),t._v(" "),a("p",[a("strong",[t._v("MBC1M")]),t._v(" uses the MBC1 IC, but the board does not connect the MBC1's\nA18 address output to the ROM. This allows including multiple 2 Mbit (16\nbank) games, with SRAM bank select ($4000) to select which of up to\nfour games is switched in. In theory, a MBC1M board could be made for 1\nMbit or 512 kbit games by additionally not connecting A17 and A16\noutputs, but this appears not to have been done in licensed games.")]),t._v(" "),a("p",[a("strong",[t._v("MMM01")]),t._v(" is a more complex that allows for games of different sizes\n"),a("a",{attrs:{href:"https://wiki.tauwasser.eu/view/MMM01",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docs on Tauwasser.eu"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("Bung")]),t._v(" and "),a("strong",[t._v("EMS")]),t._v(" MBCs are reported to exist.")]),t._v(" "),a("h4",{attrs:{id:"ems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ems"}},[t._v("#")]),t._v(" EMS")]),t._v(" "),a("p",[t._v("PinoBatch learned the game selection protocol for EMS flash carts from\nbeware, who in turn learned it from nitro2k01. Take this with a grain of\nsalt, as it hasn't been verified on the authentic EMS hardware.")]),t._v(" "),a("p",[t._v("A "),a("a",{attrs:{href:"#the-cartridge-header"}},[t._v("header")]),t._v(" matching any of the\nfollowing is detected as EMS mapper:")]),t._v(" "),a("ul",[a("li",[t._v('Header name is "EMSMENU", NUL-padded')]),t._v(" "),a("li",[t._v('Header name is "GB16M", NUL-padded')]),t._v(" "),a("li",[t._v("Cartridge type ($0147) = $1B and region ($014A) = $E1")])]),t._v(" "),a("p",[t._v("Registers:")]),t._v(" "),a("p",[t._v("$2000 write: Normal behavior, plus save written value in $2000 latch\n$1000 write: $A5 enables configure mode, $98 disables, and other values have no known effect\n$7000 write while configure mode is on: Copy $2000 latch to OR mask")]),t._v(" "),a("p",[t._v("After the OR mask has been set, all reads from ROM will OR A21-A14 (the\nbank number) with the OR mask. This chooses which game is visible to the\nCPU. If the OR mask is not aligned to the game size, the results may be\nnonsensical.")]),t._v(" "),a("p",[t._v("The mapper does not support an outer bank for battery SRAM.")]),t._v(" "),a("p",[t._v("To start a game, do the following in code run from RAM: Write $A5 to\n$1000, write game starting bank number to $2000, write any value to\n$7000, write $98 to $1000, write $01 to $2000 (so that 32K games\nwork), jump to $0100.")]),t._v(" "),a("h4",{attrs:{id:"wisdom-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wisdom-tree"}},[t._v("#")]),t._v(" Wisdom Tree")]),t._v(" "),a("p",[t._v("The Wisdom Tree mapper is a simple, cost-optimized one chip design\nconsisting of a 74LS377 octal latch, aside from the ROM chip. Because\nthe mapper consists of a single standard 74 series logic chip, it has\ntwo unusual properties:")]),t._v(" "),a("p",[t._v("First, unlike a usual MBC, it switches the whole 32 kiB ROM area instead\nof just the $4000-$7FFF area. If you want to use the interrupt vectors\nwith this cart, you should duplicate them across all banks.\nAdditionally, since the initial state of the '377 can't be guaranteed,\nthe ROM header and some code for switching to a known bank should also\nbe included in every bank. This also means that the Wisdom Tree mapper\ncould be used as a multicart mapper for 32 kiB ROMs, assuming there was\nenough ROM space in each bank for some small initialization code, and\nnone of the ROMs wrote to the $0000-$7FFF area. For example, if the\nlast 5 bytes of all banks are unused, games can be patched as follows:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("; At $0100 in all banks but the first\n  nop\n  jp $7FFB\n\n; At $7FFB in all banks\n  ld hl, $0100\n  ld [hl], a\n  jp hl\n")])])]),a("p",[t._v("Second, because the '377 latches data on the "),a("em",[t._v("positive")]),t._v(" edge, and the\nvalue on the Game Boy data bus is no longer valid when the positive edge\nof the write pulse arrives, the designer of this mapper chose to use the\nA7-A0 address lines for selecting a bank instead of the data lines.\nThus, the value you write is ignored, and the lower 8 bits of the\naddress is used. For example, to select bank $XX, you would write any\nvalue to address $YYXX, where $YY is in the range $00-$7F.")]),t._v(" "),a("p",[t._v("An emulator can detect a ROM designed for Wisdom Tree mapper in one of\ntwo ways:")]),t._v(" "),a("ul",[a("li",[t._v('ROM contains "WISDOM TREE" or "WISDOM\\x00TREE" (the space can\nbe $20 or $00), $0147 = $00, $0148 = $00, size > 32k. This\nmethod works for the games released by Wisdom Tree, Inc.')]),t._v(" "),a("li",[t._v("$0147 = $C0, $014A = $D1. These are the values recommended by\nbeware for 3rd party developers to indicate that the ROM is\ntargeting Wisdom Tree mapper hardware. (See below.)")])]),t._v(" "),a("h4",{attrs:{id:"magic-values-for-detection-of-multicarts-in-emulators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#magic-values-for-detection-of-multicarts-in-emulators"}},[t._v("#")]),t._v(" Magic values for detection of multicarts in emulators")]),t._v(" "),a("p",[t._v('Sometimes it may be useful to allow a ROM to be detected as a multicart\nin emulator, for example for development of a menu for physical\nmulticart hardware. These are values suggested by beware, and supported\nin BGB, for signaling that your ROM is supposed to interface a multicart\nmapper. Emulator authors who are interested in supporting multicart\nmappers are encouraged to support detection of these values in addition\nto the values described in each section, which are heuristics based on\nROMs in the wild, which may not always be suitable for newly produced\nsoftware. The values are deliberately chosen to be high entropy\n("random") such that the risk of an accidental false positive is\nunlikely.')]),t._v(" "),a("ul",[a("li",[t._v("$0147 = $c0, $014a = $d1 -> Detect as Wisdom Tree")]),t._v(" "),a("li",[t._v("$0147 = $1b, $014a = $e1 -> Detect as EMS multicart")]),t._v(" "),a("li",[t._v("$0147 = $be -> Detect as Bung multicart")])]),t._v(" "),a("h3",{attrs:{id:"mbc-timing-issues"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc-timing-issues"}},[t._v("#")]),t._v(" MBC Timing Issues")]),t._v(" "),a("p",[t._v("Among Nintendo MBCs, only the MBC5 is guaranteed by Nintendo to support\nthe tighter timing of CGB Double Speed Mode. There have been rumours\nthat older MBCs (like MBC1-3) wouldn't be fast enough in that mode. If\nso, it might be nevertheless possible to use Double Speed during periods\nwhich use only code and data which is located in internal RAM. However,\ndespite of the above, a self-made MBC1-EPROM card appears to work stable\nand fine even in Double Speed Mode though.")]),t._v(" "),a("h1",{attrs:{id:"game-boy-printer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-printer"}},[t._v("#")]),t._v(" Game Boy Printer")]),t._v(" "),a("p",[t._v("The Game Boy Printer is a portable thermal printer made by\n"),a("a",{attrs:{href:"http://www.sii.co.jp",target:"_blank",rel:"noopener noreferrer"}},[t._v("SII"),a("OutboundLink")],1),t._v(" for Nintendo, which a few games used to\nprint out bonus artwork, certificates, pictures ("),a("a",{attrs:{href:"#game-boy-camera"}},[t._v("Game Boy\nCamera")]),t._v(").")]),t._v(" "),a("p",[t._v("It can use standard 38mm paper and interfaces with the Game Boy through\nthe Link port.")]),t._v(" "),a("p",[t._v("It is operated by an embedded 8-bit microcontroller which has its own\n8 KiB of RAM to buffer incoming graphics data. Those 8 KiB allow a maximum\nbitmap area of 160*200 (8192/160*4) pixels between prints.")]),t._v(" "),a("h3",{attrs:{id:"communication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#communication"}},[t._v("#")]),t._v(" Communication")]),t._v(" "),a("p",[t._v("The Game Boy Printer doesn't use the full-duplex capability of the Link\nport. It accepts variable length data packets and then answers back its\nstatus after two $00 writes.")]),t._v(" "),a("p",[t._v("The packets all follow this format:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("Size (bytes)")]),t._v(" "),a("th",[t._v("GB -> Printer")]),t._v(" "),a("th",[t._v("Printer -> GB")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Magic bytes")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("$88, $33")]),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Command")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("See below")]),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Compression flag")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0/1")]),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Length of data")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("LSB, MSB")]),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Command-specific data")]),t._v(" "),a("td",[t._v("Variable")]),t._v(" "),a("td",[t._v("See below")]),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Checksum")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("LSB, MSB")]),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Alive indicator")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("$00")])]),t._v(" "),a("tr",[a("td",[t._v("Status")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("See below")]),t._v(" "),a("td",[t._v("$00")])])])]),t._v(" "),a("p",[t._v("The checksum is simply a sum of every byte sent except the magic bytes\nand obviously, the checksum itself.")]),t._v(" "),a("h3",{attrs:{id:"detection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detection"}},[t._v("#")]),t._v(" Detection")]),t._v(" "),a("p",[t._v("Send these 9 bytes: $88,$33,$0F,$00,$00,$00,$0F,$00 (Command\n$0F, no data).")]),t._v(" "),a("p",[t._v("Send $00 and read input, if the byte is $81, then the printer is\nthere. Send a last $00, just for good measure. Input can be ignored.")]),t._v(" "),a("h3",{attrs:{id:"command-1-initialize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-1-initialize"}},[t._v("#")]),t._v(" Command 1: Initialize")]),t._v(" "),a("p",[t._v("This clears the printer's buffer RAM.")]),t._v(" "),a("p",[t._v("No data required. The normal status replied should be $00.")]),t._v(" "),a("h3",{attrs:{id:"command-2-start-printing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-2-start-printing"}},[t._v("#")]),t._v(" Command 2: Start printing")]),t._v(" "),a("p",[t._v("Data length: 4 bytes")]),t._v(" "),a("ul",[a("li",[t._v("Byte 1: Number of sheets to print (0-255). 0 means line feed only.")]),t._v(" "),a("li",[t._v("Byte 2: Margins, high nibble is the feed before printing, low nibble\nis after printing. GB Camera sends $13 by default.")]),t._v(" "),a("li",[t._v("Byte 3: Palette, typically $E4 (%11100100)")]),t._v(" "),a("li",[t._v("Byte 4: 7 bits exposure value, sets the burning time for the print\nhead. GB Camera sends $40 by default. Official manual mentions -25%\ndarkness for $00 and +25% for $7F.")])]),t._v(" "),a("h3",{attrs:{id:"command-4-fill-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-4-fill-buffer"}},[t._v("#")]),t._v(" Command 4: Fill buffer")]),t._v(" "),a("p",[t._v('Data length: max. $280 (160*16 pixels in 2BPP) To transfer more than\n$280 bytes, multiple "command 4 packets" have to be sent.')]),t._v(" "),a("p",[t._v("The graphics are organized in the normal tile format (16 bytes per\ntile), and the tiles are sent in the same order they occur on your\ntilemap (do keep in mind though that the printer does *not* have 32x32\ntiles space for a map, but only 20x18).")]),t._v(" "),a("p",[t._v("An empty data packet must be sent before sending command 2 to print the\ndata, otherwise the print command will be ignored.")]),t._v(" "),a("h3",{attrs:{id:"command-f-read-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-f-read-status"}},[t._v("#")]),t._v(" Command $F: Read status")]),t._v(" "),a("p",[t._v('No data required, this is a "nop" command used only to read the Status\nbyte.')]),t._v(" "),a("h3",{attrs:{id:"status-byte"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#status-byte"}},[t._v("#")]),t._v(" Status byte")]),t._v(" "),a("p",[t._v("A nonzero value for the higher nibble indicates something went wrong.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Bit #")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[t._v("Low Battery")]),t._v(" "),a("td",[t._v("Set when the voltage is below threshold")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("Other error")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("Paper jam")]),t._v(" "),a("td",[t._v("Set when the encoder gives no pulses when the motor is powered")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("Packet error")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Unprocessed data")]),t._v(" "),a("td",[t._v("Set when there's unprocessed data in memory - AKA ready to print")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Image data full")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Currently printing")]),t._v(" "),a("td",[t._v("Set as long as the printer's burnin' paper")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("Checksum error")]),t._v(" "),a("td",[t._v("Set when the calculated checksum doesn't match the received one")])])])]),t._v(" "),a("h3",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("ul",[a("li",[t._v("Send command 1, the answer should be $81, $00")]),t._v(" "),a("li",[t._v("Send command 4 with $280 of your graphics, the answer should still\nbe $81, $00")]),t._v(" "),a("li",[t._v("Ask for status with command $F, the answer should now be $81, $08\n(ready to print)")]),t._v(" "),a("li",[t._v("Send an empty command 4 packet, the answer should still be $81,\n$08")]),t._v(" "),a("li",[t._v("Send command 2 with your arguments (margins, palette, exposure), the\nanswer should still be $81, $08")]),t._v(" "),a("li",[t._v("Ask for status with command $F until it changes to $81, $06\n(printing !)")]),t._v(" "),a("li",[t._v("Ask for status with command $F until it changes to $81, $04\n(printing done)")]),t._v(" "),a("li",[t._v("Optionally send 16 zero bytes to clear the printer's receive buffer\n(GB Camera does it)")])]),t._v(" "),a("h3",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("The printer has a timeout of 100ms for packets. If no packet is\nreceived within that time, the printer will return to an initialized\nstate (meaning the link and graphics buffers are reset).")])]),t._v(" "),a("li",[a("strong",[t._v("There appears to be an undocumented timeout for the bytes of a\npacket. It's best to send a packet completely or with very little\ndelay between the individual bytes, otherwise the packet may not be\naccepted.")])]),t._v(" "),a("li",[t._v("To print things larger than 20x18 (like GB Camera images with big\nborders), multiple data packets with a following print command need\nto be sent. The print command should be set to no linefeed (neither\nbefore nor after) to allow for continuous printing.")])]),t._v(" "),a("h3",{attrs:{id:"compression"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compression"}},[t._v("#")]),t._v(" Compression")]),t._v(" "),a("p",[t._v("Some sort of RLE? The GB Camera doesn't use it.")]),t._v(" "),a("p",[t._v("("),a("a",{attrs:{href:"http://furrtek.free.fr/?a=gbprinter&i=2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details and pictures"),a("OutboundLink")],1),t._v(", need\nto be copied here)")]),t._v(" "),a("h2",{attrs:{id:"game-boy-camera"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-camera"}},[t._v("#")]),t._v(" Game Boy Camera")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("SOURCE")]),t._v(" "),a("p",[t._v("This section was originally compiled by Antonio Niño Díaz during his work on reverse engineering the Game Boy Camera. The upstream source can be found "),a("a",{attrs:{href:"https://github.com/AntonioND/gbcam-rev-engineer",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"camera-cartridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#camera-cartridge"}},[t._v("#")]),t._v(" Camera Cartridge")]),t._v(" "),a("p",[t._v('The Game Boy Camera cartridge contains 4 ICs: the usual ROM and RAM ICs, a big controller IC (like a MBC) and a sensor (M64282FP "retina" chip).')]),t._v(" "),a("p",[t._v("The main board contains all ICs except from the sensor.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Component#")]),t._v(" "),a("th",[t._v("Part#/inscription")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("U1")]),t._v(" "),a("td",[t._v("MAC-GBD Nintendo 9807 SA")]),t._v(" "),a("td",[t._v("I/O, memory control.")])]),t._v(" "),a("tr",[a("td",[t._v("U2")]),t._v(" "),a("td",[t._v("GBD-PCAX-0 F M538011-E - 08 8145507")]),t._v(" "),a("td",[t._v("1MB ROM")])]),t._v(" "),a("tr",[a("td",[t._v("U3")]),t._v(" "),a("td",[t._v("52CV1000SF85LL SHARP JAPAN 9805 5 0A")]),t._v(" "),a("td",[t._v("128KB RAM")])])])]),t._v(" "),a("p",[t._v('The U1 is the only one connected to the GB cartridge pins (besides some of the address pins of the ROM IC). The U2 and U3 (ROM and RAM) are connected to U1. The M64282FP "retina" chip is in a separate PCB, and is connected to the U1.\nThe M64282FP handles most of the configuration of the capturing process. The U1 transforms the commands from the Game Boy CPU into the correct signals needed for the M64282FP. The detailed timings are described below.\nIt is a good idea to have the datasheet of the M64282FP, but it is very poorly explained, so this document will try to explain everything about it (except from limits like voltage or signal timings). There are datasheets of similar sensors (M64283FP and M64285FP) that can be very useful to understand some things about the sensor of the GB Camera.')]),t._v(" "),a("h3",{attrs:{id:"game-boy-camera-mbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-camera-mbc"}},[t._v("#")]),t._v(" Game Boy Camera MBC")]),t._v(" "),a("p",[t._v("The Game Boy Camera controller works pretty much the same as a MBC3.")]),t._v(" "),a("h5",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-6"}},[t._v("#")]),t._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),t._v(" "),a("p",[t._v("First 16 KB of the ROM.")]),t._v(" "),a("h5",{attrs:{id:"_4000-7fff-rom-bank-01-3f-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-3f-read-only"}},[t._v("#")]),t._v(" 4000-7FFF - ROM Bank 01-3F (Read Only)")]),t._v(" "),a("p",[t._v("This area may contain any ROM bank (0 included). The initial mapped bank is 01.")]),t._v(" "),a("h5",{attrs:{id:"a000-bfff-cam-registers-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-cam-registers-read-write"}},[t._v("#")]),t._v(" A000-BFFF - CAM Registers (Read/Write)")]),t._v(" "),a("p",[t._v("Depending on the current RAM Bank Number, this memory space is used to access the cartridge RAM or the CAM registers. RAM can only be read if the capture unit is not working, it returns 00h otherwise.")]),t._v(" "),a("h5",{attrs:{id:"_0000-1fff-ram-enable-write-only-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-write-only-3"}},[t._v("#")]),t._v(" 0000-1FFF - RAM Enable (Write Only)")]),t._v(" "),a("p",[t._v("A value of 0Ah will enable writing to RAM, 00h will disable it. Reading from RAM or registers is always enabled. Writing to registers is always enabled. Disabled on reset.")]),t._v(" "),a("h5",{attrs:{id:"_2000-3fff-rom-bank-number-write-only-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only-5"}},[t._v("#")]),t._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),t._v(" "),a("p",[t._v("Writing a value of 00-3Fh selects the corresponding ROM Bank for area 4000-7FFF.")]),t._v(" "),a("h5",{attrs:{id:"_4000-5fff-ram-bank-number-cam-registers-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-cam-registers-select-write-only"}},[t._v("#")]),t._v(" 4000-5FFF - RAM Bank Number/CAM Registers Select (Write Only)")]),t._v(" "),a("p",[t._v("Writing a value in range for 00h-0Fh maps the corresponding external RAM Bank to memory at A000-BFFF. Writing any value with bit 5 set to '1' will select CAM registers. Usually bank 10h is used to select the registers. All registers are mirrored every 80h bytes. RAM bank 0 selected on reset.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Unlike most games, the GB Camera RAM can only be written when PHI pin = '1'. It's an enable signal for the RAM chip. Most cartridge readers and writers can't handle PHI pin so they can't restore a saved backup. It isn't needed to change ROM banks.")])]),t._v(" "),a("h3",{attrs:{id:"i-o-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o-registers"}},[t._v("#")]),t._v(" I/O Registers")]),t._v(" "),a("p",[t._v("The Game Boy Camera I/O registers are mapped to all banks with bit 4 set to '1'. The GB Camera ROM usually changes to bank 16 to use the registers.")]),t._v(" "),a("p",[t._v("There are 3 groups of registers:")]),t._v(" "),a("ul",[a("li",[t._v("The first group is composed by the trigger register A000. This register starts the capture process and returns the current status (working/capture finished).")]),t._v(" "),a("li",[t._v("The second group is composed by registers A001-A005, used to configure most parameters of the M64282FP sensor.")]),t._v(" "),a("li",[t._v("The third group is composed by 48 registers that form a 4×4 matrix. Each element of the matrix is formed by 3 bytes. This matrix is used by the controller for contrast and dithering.")])]),t._v(" "),a("p",[t._v("All registers are write-only, except the register A000. The others return 00h when read. The initial values of all registers on reset is 00h.")]),t._v(" "),a("h4",{attrs:{id:"register-a000"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-a000"}},[t._v("#")]),t._v(" Register A000")]),t._v(" "),a("p",[t._v("The lower 3 bits of this register can be read and write. The other bits return '0'. Writing any value with bit 0 set to '1' will start the capturing process. Any write with bit 0 set to '0' is a normal write and won't trigger the capture. The value of bits 1 and 2 affects the value written to registers 4, 5 and 6 of the M64282FP, which are used in 1-D filtering mode (effects described in following chapters).\nBit 0 of this register is also used to verify if the capturing process is finished. It returns '1' when the hardware is working and '0' if the capturing process is over.\nWhen the capture process is active all RAM banks will return 00h when read (and writes are ignored), but the register A000 can still be read to know when the transfer is finished.\nThe capturing process can be stopped by writing a '0' to bit 0. When a '1' is written again it will continue the previous capture process with the old capture parameters, even if the registers are changed in between. If the process is stopped RAM can be read again.")]),t._v(" "),a("h4",{attrs:{id:"register-a001"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-a001"}},[t._v("#")]),t._v(" Register A001")]),t._v(" "),a("p",[t._v("This register is mapped to register 1 of M64282FP. It controls the output gain and the edge operation mode.")]),t._v(" "),a("h4",{attrs:{id:"register-a002-a003"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-a002-a003"}},[t._v("#")]),t._v(" Register A002, A003")]),t._v(" "),a("p",[t._v("This registers are mapped to registers 2 and 3 of M64282FP. They control the exposure time. Register 2 is the MSB, register 3 is the LSB.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("u16 exposure_steps = [A003] | ([A002]<<8);\n")])])]),a("h4",{attrs:{id:"register-a004"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-a004"}},[t._v("#")]),t._v(" Register A004")]),t._v(" "),a("p",[t._v("This register is mapped to register 7 of M64282FP. It sets the output voltage reference, the edge enhancement ratio and it can invert the image.")]),t._v(" "),a("h4",{attrs:{id:"register-a005"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-a005"}},[t._v("#")]),t._v(" Register A005")]),t._v(" "),a("p",[t._v("This register is mapped to register 0 of M64282FP. It sets the output reference voltage and enables the zero point calibration.")]),t._v(" "),a("h4",{attrs:{id:"register-a006-a035"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-a006-a035"}},[t._v("#")]),t._v(" Register A006-A035")]),t._v(" "),a("p",[t._v("Those registers form a 4×4 matrix with 3 bytes per element. They handle dithering and contrast, and they are sorted by rows:")]),t._v(" "),a("table",{staticClass:"tg"},[a("thead",[a("tr",[a("th",{staticClass:"tg-0pky"}),t._v(" "),a("th",{staticClass:"tg-0pky",attrs:{colspan:"4"}},[t._v("X")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticClass:"tg-0pky",attrs:{rowspan:"4"}},[t._v("Y")]),t._v(" "),a("td",{staticClass:"tg-0pky"},[t._v("00")]),t._v(" "),a("td",{staticClass:"tg-0pky"},[t._v("10")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("20")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("30")])]),t._v(" "),a("tr",[a("td",{staticClass:"tg-0pky"},[t._v("01")]),t._v(" "),a("td",{staticClass:"tg-0pky"},[t._v("11")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("21")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("31")])]),t._v(" "),a("tr",[a("td",{staticClass:"tg-0pky"},[t._v("02")]),t._v(" "),a("td",{staticClass:"tg-0pky"},[t._v("12")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("23")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("33")])]),t._v(" "),a("tr",[a("td",{staticClass:"tg-0lax"},[t._v("03")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("13")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("23")]),t._v(" "),a("td",{staticClass:"tg-0lax"},[t._v("33")])])])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig1.png",alt:"Horizontal edge processing modes."}}),t._v(" "),a("figcaption",[t._v("Horizontal edge processing modes")])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig2.png",alt:"Vertical edge processing modes."}}),t._v(" "),a("figcaption",[t._v("Vertical edge processing modes.")])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig3.png",alt:"2D edge processing modes."}}),t._v(" "),a("figcaption",[t._v("2D edge processing modes.")])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig4.png",alt:"1-D filtering hardware."}}),t._v(" "),a("figcaption",[t._v("1-D filtering hardware.")])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig5.png",alt:"Positive image."}}),t._v(" "),a("figcaption",[t._v("Positive image.")])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig6.png",alt:"Negative image."}}),t._v(" "),a("figcaption",[t._v("Negative image.")])]),t._v(" "),a("figure",[a("img",{attrs:{src:"imgs/gbcamera/fig7.png",alt:"Edge extraction."}}),t._v(" "),a("figcaption",[t._v("Edge extraction.")])]),t._v(" "),a("h3",{attrs:{id:"sample-code-for-emulators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-code-for-emulators"}},[t._v("#")]),t._v(" Sample code for emulators")]),t._v(" "),a("p",[t._v("The following code is used to convert a greyscale image to the Game Boy Camera format. GB_CameraTakePicture() should be called when bit 0 of A000 register is st to '1'. The emulator should wait CAM_CLOCKS_LEFT until the bit 0 is cleared. The gain and level control are not needed to emulate the Game Boy Camera because webcams do that automatically. In fact, trying to emulate that will probably break the image. The code is not very clean because it has been extracted from "),a("a",{attrs:{href:"https://github.com/AntonioND/giibiiadvance",target:"_blank",rel:"noopener noreferrer"}},[t._v("GiiBiiAdvance"),a("OutboundLink")],1),t._v(", but it seems to handle all used configurations of edge handling.")]),t._v(" "),a("p",[t._v("Note that the actual Game Boy Camera sensor is affected by infrared so the emulation can't be perfect anyway. A good way of converting a RGB image into grayscale is to do:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//--------------------------------------------------------------------")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The actual sensor image is 128x126 or so.")]),t._v("\n##define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GBCAM_SENSOR_EXTRA_LINES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n##define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GBCAM_SENSOR_W")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n##define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GBCAM_SENSOR_H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("112")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("GBCAM_SENSOR_EXTRA_LINES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n##define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GBCAM_W")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n##define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GBCAM_H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("112")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n##define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Webcam image")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" gb_camera_webcam_output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Image processed by sensor chip")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//--------------------------------------------------------------------")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clamp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//--------------------------------------------------------------------")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" u32 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_cam_matrix_process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32 value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u32 x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u32 y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    u32 r0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    u32 r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    u32 r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xC0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GB_CameraTakePicture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//------------------------------------------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get webcam image")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ----------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GB_CameraWebcamCapture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//------------------------------------------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get configuration")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -----------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register 0")]),t._v("\n    u32 P_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    u32 M_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" P_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" M_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" P_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" M_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" P_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" M_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register 1")]),t._v("\n    u32 N_bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    u32 VH_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Registers 2 and 3")]),t._v("\n    u32 EXPOSURE_bits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register 4")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" edge_ratio_lut"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.75")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.00")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" EDGE_alpha "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" edge_ratio_lut"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x70")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    u32 E3_bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    u32 I_bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//------------------------------------------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Calculate timings")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -----------------")]),t._v("\n\n    CAM_CLOCKS_LEFT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32446")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" N_bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" EXPOSURE_bits "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//------------------------------------------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sensor handling")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ---------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Copy webcam buffer to sensor buffer applying color correction and exposure time")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_camera_webcam_output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" EXPOSURE_bits "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0300")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0x0300 could be other values")]),t._v("\n        value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "adapt" to "3.1"/5.0 V')]),t._v("\n        gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_clamp_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("I_bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invert image")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Make signed")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    u32 filtering_mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N_bit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VH_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" E3_bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filtering_mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1-D filtering")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ms "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_min_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" px "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_clamp_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1-D filtering + Horiz. enhancement : P + {2P-(MW+ME)} * alpha")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_max_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" me "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_min_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" px "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_clamp_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("px"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("px"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("me"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("EDGE_alpha"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ms "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_min_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" px "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("M_bits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_clamp_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2D enhancement : P + {4P-(MN+MS+ME+MW)} * alpha")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ms "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_min_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_max_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_max_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" me "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_min_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" px  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_clamp_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("px"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("px"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("me"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("EDGE_alpha"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In my GB Camera cartridge this is always the same color. The datasheet of the")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sensor doesn't have this configuration documented. Maybe this is a bug?")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ignore filtering")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unsupported GB Cam mode: 0x%X\\n"')]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%02X %02X %02X %02X %02X %02X"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   filtering_mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("CAM_REG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Make unsigned")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_SENSOR_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//------------------------------------------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controller handling")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -------------------")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fourcolorsbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GBCAM_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// buffer after controller matrix")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Convert to Game Boy colors using the controller matrix")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        fourcolorsbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gb_cam_matrix_process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                gb_cam_retina_output_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GBCAM_SENSOR_EXTRA_LINES"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Convert to tiles")]),t._v("\n    u8 finalbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// final buffer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finalbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finalbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" GBCAM_H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        u8 outcolor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fourcolorsbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        u8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" tile_base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" finalbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tile_base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tile_base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outcolor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" tile_base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outcolor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" tile_base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Copy to cart ram...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SRAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("finalbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finalbuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//--------------------------------------------------------------------")]),t._v("\n")])])]),a("h1",{attrs:{id:"power-up-sequence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#power-up-sequence"}},[t._v("#")]),t._v(" Power Up Sequence")]),t._v(" "),a("p",[t._v("When the Game Boy is powered up, a 256 byte program starting at memory location 0 is executed. This program is located in a ROM inside the GameBoy. The first thing the program does is read the cartridge locations from $104 to $133 and place this graphic of a Nintendo logo on the screen at the top.")]),t._v(" "),a("p",[t._v("This image is then scrolled until it is in the middle of the screen. Two musical notes are then played on the internal speaker. Again, the cartridge locations $104 to $133 are read but this time they are compared with a table in the internal rom.")]),t._v(" "),a("p",[t._v("If any byte fails to compare, then the Game Boy stops comparing bytes and simply halts all operations.")]),t._v(" "),a("p",[t._v("If all locations compare the same, then the GameBoy starts adding all of the bytes in the cartridge from $134 to $14d. A value of 25 decimal is added to this total.")]),t._v(" "),a("p",[t._v("If the least significant byte of the result is a not a zero, then the Game Boy will stop doing anything.")]),t._v(" "),a("p",[t._v("If it is a zero, then the internal ROM is disabled and cartridge program execution begins at location $100 with the following register values:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  AF=$01B0\n  BC=$0013\n  DE=$00D8\n  HL=$014D\n  Stack Pointer=$FFFE\n  [$FF05] = $00   ; TIMA\n  [$FF06] = $00   ; TMA\n  [$FF07] = $00   ; TAC\n  [$FF10] = $80   ; NR10\n  [$FF11] = $BF   ; NR11\n  [$FF12] = $F3   ; NR12\n  [$FF14] = $BF   ; NR14\n  [$FF16] = $3F   ; NR21\n  [$FF17] = $00   ; NR22\n  [$FF19] = $BF   ; NR24\n  [$FF1A] = $7F   ; NR30\n  [$FF1B] = $FF   ; NR31\n  [$FF1C] = $9F   ; NR32\n  [$FF1E] = $BF   ; NR34\n  [$FF20] = $FF   ; NR41\n  [$FF21] = $00   ; NR42\n  [$FF22] = $00   ; NR43\n  [$FF23] = $BF   ; NR44\n  [$FF24] = $77   ; NR50\n  [$FF25] = $F3   ; NR51\n  [$FF26] = $F1-GB, $F0-SGB ; NR52\n  [$FF40] = $91   ; LCDC\n  [$FF42] = $00   ; SCY\n  [$FF43] = $00   ; SCX\n  [$FF45] = $00   ; LYC\n  [$FF47] = $FC   ; BGP\n  [$FF48] = $FF   ; OBP0\n  [$FF49] = $FF   ; OBP1\n  [$FF4A] = $00   ; WY\n  [$FF4B] = $00   ; WX\n  [$FFFF] = $00   ; IE\n")])])]),a("p",[t._v("It is not a good idea to assume the above values will always exist. A later version Game Boy could contain different values than these at reset. Always set these registers on reset rather than assume they are as above.")]),t._v(" "),a("p",[t._v("Please note that Game Boy internal RAM on power up contains random data.")]),t._v(" "),a("p",[t._v("All of the Game Boy emulators tend to set all RAM to value $00 on entry.")]),t._v(" "),a("p",[t._v("Cart RAM the first time it is accessed on a real Game Boy contains random data.\nIt will only contain known data if the Game Boy code initializes it to some value.")]),t._v(" "),a("h1",{attrs:{id:"reducing-power-consumption"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reducing-power-consumption"}},[t._v("#")]),t._v(" Reducing Power Consumption")]),t._v(" "),a("p",[t._v("The following programming techniques can be used to reduce the power\nconsumption of the Game Boy hardware and extend the life of the\nbatteries.")]),t._v(" "),a("h2",{attrs:{id:"using-the-halt-instruction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-halt-instruction"}},[t._v("#")]),t._v(" Using the HALT Instruction")]),t._v(" "),a("p",[t._v("The HALT instruction should be used whenever possible to reduce power\nconsumption & extend the life of the batteries. This instruction stops the\nsystem clock, reducing the power consumption of both the CPU and ROM.")]),t._v(" "),a("p",[t._v("The CPU will remain stopped until an interrupt "),a("em",[t._v("enabled by "),a("a",{attrs:{href:"#ffff-ie-interrupt-enable-r-w"}},[t._v("the IE register ($FFFF)")])]),t._v(" occurs at which point the\ninterrupt is serviced and then the instruction immediately following the\nHALT is executed.")]),t._v(" "),a("p",[t._v("Depending on how much CPU time is required by a game, the HALT\ninstruction can extend battery life anywhere from 5 to 50% or possibly\nmore.")]),t._v(" "),a("p",[t._v("When waiting for a vblank event, this would be a BAD example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" .wait:\n  ld   a, [$FF44]      ;LY\n  cp   a, 144\n  jr   nz, .wait\n")])])]),a("p",[t._v("A better example would be a procedure as shown below. In this case the\nvblank interrupt must be enabled, and your vblank interrupt procedure\nmust set vblank_flag to a non-zero value.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  ld   hl, vblank_flag  ;hl=pointer to vblank_flag\n  xor  a               ;a=0\n .wait:               ;wait...\n  halt                 ;suspend CPU - wait for ANY enabled interrupt\n  cp   a, [hl]          ;vblank flag still zero?\n  jr   z, .wait        ;wait more if zero\n  ld   [hl], a          ;set vblank_flag back to zero\n")])])]),a("p",[t._v("The vblank_flag is used to determine whether the HALT period has been\nterminated by a vblank interrupt, or by another interrupt. In case your\nprogram has all other interrupts disabled, then it would be okay to\nreplace the above procedure by a single HALT instruction.")]),t._v(" "),a("p",[t._v("Another possibility is, if your game uses no other interrupt than VBlank\n(or uses no interrupt), to only enable VBlank interrupts and simply use\na halt instruction, which will only resume main code execution when a\nVBlank occurs.")]),t._v(" "),a("p",[t._v("Remember when using HALT to wait between VBlanks, your interrupt\nroutines MUST enable interrupts (ie with ei during the execution, or\nbetter, using the RETI instruction)")]),t._v(" "),a("h2",{attrs:{id:"using-the-stop-instruction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-stop-instruction"}},[t._v("#")]),t._v(" Using the STOP Instruction")]),t._v(" "),a("p",[t._v("The STOP instruction is intended to switch the Game Boy into VERY low\npower standby mode. For example, a program may use this feature when it\nhasn't sensed keyboard input for a longer period (for example, when\nsomebody forgot to turn off the Game Boy).")]),t._v(" "),a("p",[t._v("No licensed rom makes use of STOP outside of CGB speed switching.\nSpecial care needs to be taken if you want to make use of the STOP\ninstruction.")]),t._v(" "),a("p",[t._v("On a DMG, disabling the LCD before invoking STOP leaves the LCD enabled,\ndrawing a horizontal black line on the screen and very likely damaging the\nhardware.")]),t._v(" "),a("p",[t._v("On CGB, leaving the LCD enabled when invoking STOP will result in a\nblack screen. Except if the LCD is in Mode 3, where it will keep drawing\nthe current screen.")]),t._v(" "),a("p",[t._v("STOP is terminated by one of the P10 to P13 lines going low. For this\nreason, d-pad and/or button inputs should be enabled by writing $00,\n$10 or $20 to the "),a("code",[t._v("P1")]),t._v(" register before entering STOP (depending on which\nbuttons you want to terminate the STOP on).")]),t._v(" "),a("h2",{attrs:{id:"disabling-the-sound-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disabling-the-sound-controller"}},[t._v("#")]),t._v(" Disabling the Sound Controller")]),t._v(" "),a("p",[t._v("If your program doesn't use sound at all (or during some periods) then\nwrite 00h to register FF26 to save 16% or more on GB power consumption.\nSound can be turned back on by writing 80h to the same register, all\nsound registers must be then re-initialized. When the Game Boy is turned\non, sound is enabled by default, and must be turned off manually when\nnot used.")]),t._v(" "),a("h2",{attrs:{id:"not-using-cgb-double-speed-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not-using-cgb-double-speed-mode"}},[t._v("#")]),t._v(" Not using CGB Double Speed Mode")]),t._v(" "),a("p",[t._v("Because CGB Double Speed mode consumes more power, it's recommended to\nuse normal speed when possible. There's limited ability to switch\nbetween both speeds, for example, a game might use normal speed in the\ntitle screen, and double speed in the game, or vice versa. However,\nduring speed switch, the display collapses for a short moment, so it's\nnot a good idea to alter speeds within active game or title screen\nperiods.")]),t._v(" "),a("h2",{attrs:{id:"using-the-skills"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-skills"}},[t._v("#")]),t._v(" Using the Skills")]),t._v(" "),a("p",[t._v("Most of the above power saving methods will produce best results when\nusing efficient and tight assembler code which requires as little CPU\npower as possible. Using a high level language will require more CPU\npower and these techniques will not have as big as an effect.")]),t._v(" "),a("p",[t._v("To optimize your code, it might be a good idea to look at "),a("a",{attrs:{href:"http://wikiti.brandonw.net/index.php?title=Z80_Optimization",target:"_blank",rel:"noopener noreferrer"}},[t._v("this\npage"),a("OutboundLink")],1),t._v(",\nalthough it applies to the original Z80 CPU, so one must adapt the\noptimizations to the GBZ80.")]),t._v(" "),a("h1",{attrs:{id:"sprite-ram-bug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprite-ram-bug"}},[t._v("#")]),t._v(" Sprite RAM Bug")]),t._v(" "),a("p",[t._v("There is a flaw in the Game Boy hardware that causes trash to be written\nto OAM RAM if the following instructions are used while their 16-bit content\nis in the range of $FE00 to $FEFF while the PPU is in mode 2:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" inc rr        dec rr          ;rr = bc,de, or hl\n ldi a,(hl)    ldd a,(hl)\n ldi (hl),a    ldd (hl),a\n")])])]),a("p",[t._v("Sprites 1 & 2 ($FE00 & $FE04) are not affected by this bug.")]),t._v(" "),a("p",[t._v("Game Boy Color and Advance are not affected by this bug, even when\nrunning monochrome software.")]),t._v(" "),a("h2",{attrs:{id:"accurate-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accurate-description"}},[t._v("#")]),t._v(" Accurate Description")]),t._v(" "),a("p",[t._v("The Sprite RAM Bug (or OAM Bug) actually consists of two different bugs:")]),t._v(" "),a("ul",[a("li",[t._v("Attempting to read or write from OAM (Including the $FFA0-$FEFF\nregion) while the PPU is in mode 2 (OAM mode) will corrupt it.")]),t._v(" "),a("li",[t._v("Performing an increase or decrease operation on any 16-bit register\n(BC, DE, HL, SP or PC) while that register is in the OAM range\n($FE00 - $FEFF) will trigger a memory write to OAM, causing a\ncorruption.")])]),t._v(" "),a("h2",{attrs:{id:"affected-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#affected-operations"}},[t._v("#")]),t._v(" Affected Operations")]),t._v(" "),a("p",[t._v("The following operations are affected by this bug:")]),t._v(" "),a("ul",[a("li",[t._v("Any memory access instruction, if it accesses OAM")]),t._v(" "),a("li",[a("code",[t._v("inc rr")]),t._v(", "),a("code",[t._v("dec rr")]),t._v(" - if "),a("code",[t._v("rr")]),t._v(" is a 16-bit register pointing to OAM,\nit will trigger a write and corrupt OAM")]),t._v(" "),a("li",[a("code",[t._v("ldi [hl], a")]),t._v(", "),a("code",[t._v("ldd [hl], a")]),t._v(", "),a("code",[t._v("ldi a, [hl]")]),t._v(", "),a("code",[t._v("ldd a, [hl]")]),t._v("- these\nwill trigger a corruption twice if "),a("code",[t._v("hl")]),t._v(" points to OAM; once for the\nusual memory access, and once for the extra write trigger by the\ninc/dec")]),t._v(" "),a("li",[a("code",[t._v("pop rr")]),t._v(", the "),a("code",[t._v("ret")]),t._v(" family - For some reason, pop will trigger the\nbug only 3 times (instead of the expected 4 times); one read, one\nglitched write, and another read without a glitched write. This also\napplies to the ret instructions.")]),t._v(" "),a("li",[a("code",[t._v("push rr")]),t._v(", the "),a("code",[t._v("call")]),t._v(" family, "),a("code",[t._v("rst xx")]),t._v(" and interrupt handling -\nPushing to the stack will trigger the bug 4 times; two usual writes\nand two glitched write caused by the decrease. However, since one\nglitched write occur in the same cycle as a actual write, this will\neffectively behave like 3 writes.")]),t._v(" "),a("li",[t._v("Executing code from OAM - If PC is inside OAM (executing FF,\nthat is, "),a("code",[t._v("rst $38")]),t._v(") the bug will trigger twice, once for increasing PC\ninside OAM (triggering a write), and once for reading from OAM. If a\nmulti-byte opcode is executed from $FDFF or $FDFE, and bug will\nsimilarly trigger twice for every read from OAM.")])]),t._v(" "),a("h2",{attrs:{id:"corruption-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#corruption-patterns"}},[t._v("#")]),t._v(" Corruption Patterns")]),t._v(" "),a("p",[t._v("The OAM is split into 20 rows of 8 bytes each, and during mode 2 the PPU\nreads those rows consecutively; one every 1 M-cycle. The operations\npatterns rely on type of operation (read/write/both) used on OAM during\nthat M-cycle, as well as the row currently accessed by the PPU. The\nactual read/write address used, or the written value have no effect.\nAdditionally, keep in mind that OAM uses a 16-bit data bus, so all\noperations are on 16-bit words.")]),t._v(" "),a("h3",{attrs:{id:"write-corruption"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-corruption"}},[t._v("#")]),t._v(" Write Corruption")]),t._v(" "),a("p",[t._v("A write corruption corrupts the currently access row in the following\nmanner, as long as it's not the first row (containing the first two\nsprites):")]),t._v(" "),a("ul",[a("li",[t._v("The first word in the row is replaced with this bitwise expression:\n"),a("code",[t._v("((a ^ c) & (b ^ c)) ^ c")]),t._v(", where "),a("code",[t._v("a")]),t._v(" is the original value of that\nword, "),a("code",[t._v("b")]),t._v(" is the first word in the preceding row, and "),a("code",[t._v("c")]),t._v(" is the\nthird word in the preceding row.")]),t._v(" "),a("li",[t._v("The last three words are copied from the last three words in the\npreceding row.")])]),t._v(" "),a("h3",{attrs:{id:"read-corruption"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-corruption"}},[t._v("#")]),t._v(" Read Corruption")]),t._v(" "),a("p",[t._v("A read corruption works similarly to a write corruption, except the\nbitwise expression is "),a("code",[t._v("b | (a & c)")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"write-during-increase-decrease"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-during-increase-decrease"}},[t._v("#")]),t._v(" Write During Increase/Decrease")]),t._v(" "),a("p",[t._v("If a register is increased or decreased in the same M-cycle of a write,\nthis will effectively trigger two writes in a single M-cycle. However,\nthis case behaves just like a single write.")]),t._v(" "),a("h3",{attrs:{id:"read-during-increase-decrease"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-during-increase-decrease"}},[t._v("#")]),t._v(" Read During Increase/Decrease")]),t._v(" "),a("p",[t._v("If a register is increased or decreased in the same M-cycle of a write,\nthis will effectively trigger both a read "),a("strong",[t._v("and")]),t._v(" a write in a single\nM-cycle, resulting in a more complex corruption pattern:")]),t._v(" "),a("ul",[a("li",[t._v("This corruption will not happen if the accessed row is one of the\nfirst four, as well as if it's the last row:\n"),a("ul",[a("li",[t._v("The first word in the row preceding the currently accessed row\nis replaced with the following bitwise expression:\n"),a("code",[t._v("(b & (a | c | d)) | (a & c & d)")]),t._v(" where "),a("code",[t._v("a")]),t._v(" is the first word\ntwo rows before the currently accessed row, "),a("code",[t._v("b")]),t._v(" is the first\nword in the preceding row (the word being corrupted), "),a("code",[t._v("c")]),t._v(" is the\nfirst word in the currently accessed row, and "),a("code",[t._v("d")]),t._v(" is the third\nword in the preceding row.")]),t._v(" "),a("li",[t._v("The contents of the preceding row is copied (after the\ncorruption of the first word in it) both to the currently\naccessed row and to two rows before the currently accessed row")])])]),t._v(" "),a("li",[t._v("Regardless of wether the previous corruption occurred or not, a\nnormal read corruption is then applied.")])]),t._v(" "),a("h1",{attrs:{id:"external-connectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-connectors"}},[t._v("#")]),t._v(" External Connectors")]),t._v(" "),a("h3",{attrs:{id:"cartridge-slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cartridge-slot"}},[t._v("#")]),t._v(" Cartridge Slot")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Pin")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Explanation")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("VDD")]),t._v(" "),a("td",[t._v("Power Supply +5V DC")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("PHI")]),t._v(" "),a("td",[t._v("System Clock")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("/WR")]),t._v(" "),a("td",[t._v("Write")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("/RD")]),t._v(" "),a("td",[t._v("Read")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("/CS")]),t._v(" "),a("td",[t._v("Chip Select")])]),t._v(" "),a("tr",[a("td",[t._v("6-21")]),t._v(" "),a("td",[t._v("A0-A15")]),t._v(" "),a("td",[t._v("Address Lines")])]),t._v(" "),a("tr",[a("td",[t._v("22-29")]),t._v(" "),a("td",[t._v("D0-D7")]),t._v(" "),a("td",[t._v("Data Lines")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[t._v("/RES")]),t._v(" "),a("td",[t._v("Reset signal")])]),t._v(" "),a("tr",[a("td",[t._v("31")]),t._v(" "),a("td",[t._v("VIN")]),t._v(" "),a("td",[t._v("External Sound Input")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("GND")]),t._v(" "),a("td",[t._v("Ground")])])])]),t._v(" "),a("h3",{attrs:{id:"link-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link-port"}},[t._v("#")]),t._v(" Link Port")]),t._v(" "),a("p",[t._v("Pin numbers are arranged as 2,4,6 in upper row, 1,3,5 in lower row;\noutside view of Game Boy socket; flat side of socket upside. Colors as\nused in most or all standard link cables, because SIN and SOUT are\ncrossed, colors Red and Orange are exchanged at one cable end.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Pin")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Color")]),t._v(" "),a("th",[t._v("Explanation")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("VCC")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("+5V DC")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("SOUT")]),t._v(" "),a("td",[t._v("red")]),t._v(" "),a("td",[t._v("Data Out")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("SIN")]),t._v(" "),a("td",[t._v("orange")]),t._v(" "),a("td",[t._v("Data In")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("P14")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("Not used")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("SCK")]),t._v(" "),a("td",[t._v("green")]),t._v(" "),a("td",[t._v("Shift Clock")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("GND")]),t._v(" "),a("td",[t._v("blue")]),t._v(" "),a("td",[t._v("Ground")])])])]),t._v(" "),a("p",[t._v("Note: The original Game Boy used larger plugs than Game Boy Pocket and\nnewer. Linking between older/newer Game Boy systems is possible by using cables\nwith one large and one small plug though.")]),t._v(" "),a("h3",{attrs:{id:"stereo-sound-connector-3-5mm-female"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stereo-sound-connector-3-5mm-female"}},[t._v("#")]),t._v(" Stereo Sound Connector (3.5mm, female)")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Pin")]),t._v(" "),a("th",[t._v("Explanation")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Tip")]),t._v(" "),a("td",[t._v("Sound Left")])]),t._v(" "),a("tr",[a("td",[t._v("Middle")]),t._v(" "),a("td",[t._v("Sound Right")])]),t._v(" "),a("tr",[a("td",[t._v("Base")]),t._v(" "),a("td",[t._v("Ground")])])])]),t._v(" "),a("h3",{attrs:{id:"external-power-supply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-power-supply"}},[t._v("#")]),t._v(" External Power Supply")]),t._v(" "),a("p",[t._v("...")]),t._v(" "),a("h1",{attrs:{id:"gbc-approval-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gbc-approval-process"}},[t._v("#")]),t._v(" GBC Approval Process")]),t._v(" "),a("p",[t._v("Game Boy Color hardware applies automatic colorization to monochrome\ngames, with one 4-color palette for backgrounds and two 3-color\npalettes for sprites.  Because of past underuse of Super Game Boy\nfeatures even in first-party games (as explained in an article by\nChristine Love), Nintendo required Game Boy Color games to appear\nmore colorful than this automatic colorization.  Thus Nintendo\nrequired publishers to keep Nintendo in the loop at three points in\ndevelopment.  The Mario Club division evaluated games on whether\ncolor was being used appropriately.  Some things Mario Club looked at\nwere variety of colors, both within a scene and between scenes; choice\nof colors appropriate to a game's art style, such as objects being\ndistinguishable and trees being colored like trees; and contrast\nbetween foreground and background to emphasize color saturation.")]),t._v(" "),a("p",[t._v("For both original and ported games, the initial written game design\ndocument needed to explain and illustrate how color would be used, as\nwell as a project schedule, estimated ROM and RAM size, and whether\nthe ROM was dual compatible or GBC-only.  Ports of a monochrome game\n(such as "),a("em",[t._v("Tetris DX")]),t._v(", "),a("em",[t._v("Link's Awakening DX")]),t._v(", or ICOM's "),a("em",[t._v("MacVenture")]),t._v("\nseries) to Game Boy Color were subject to concept pre-approval,\nunlike original games.  A port's proposal needed to explain what new\ngameplay content (other than just colorization) it would include,\nsuch as levels, characters, or items.")]),t._v(" "),a("p",[t._v("At 50 percent milestone and near completion, the publisher would\nsubmit a ROM image to Mario Club for feedback on use of color and\nother aspects of game design.")]),t._v(" "),a("h3",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/AntonioND/giibiiadvance/tree/master/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Antonio Niño Díaz - The Cycle-Accurate Game Boy Docs"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/AntonioND/gbcam-rev-engineer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Antonio Niño Díaz - Game Boy Camera RE"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.its.caltech.edu/~costis/sgb_hack/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Costis Sideris. The quest for dumping GameBoy Boot ROMs!"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.tauwasser.eu/view/MBC1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tauwasser. MBC1 - Tauwasser’s Wiki"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.tauwasser.eu/view/MBC2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tauwasser. MBC2 - Tauwasser’s Wiki"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://web.archive.org/web/20090220190205/http://www.semis.demon.co.uk/Gameboy/Gbmain.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("MBC5 Schematic"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Gekkio/gb-ctr",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gekkio. Game Boy: Complete Technical Reference"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gbdev.github.io/gb-opcodes/optables/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Game Boy CPU (SM83) instruction set"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gekkio.fi/blog/2015/dumping-the-super-game-boy-2-boot-rom/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gekkio. Dumping the Super Game Boy 2 boot ROM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://exez.in/gameboy-dma",target:"_blank",rel:"noopener noreferrer"}},[t._v("exezin. OAM DMA tutorial"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/furrtek/DMG-CPU-Inside",target:"_blank",rel:"noopener noreferrer"}},[t._v("Furrtek - Reverse-engineered schematics for DMG-CPU-B"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://furrtek.free.fr/?a=gbprinter",target:"_blank",rel:"noopener noreferrer"}},[t._v("Furrtek - Game Boy Printer"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/gbdev/pandocs/tree/develop/historical",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pan of ATX, Marat Fayzullin, Felber Pascal, Robson Paul, and Korth Martin - Pan Docs (previous versions and revisions)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.devrs.com/gb/hardware.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jeff Frohwein - DMG, SGB, MBC schematics"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.z80.info/z80gboy.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pat Fagan - z80gboy.txt"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://loveconquersallgam.es/post/2487450388/fuck-the-super-game-boy-kirbys-dream-land-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Christine Love - F the Super Game Boy: Kirby's Dream Land 2"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);