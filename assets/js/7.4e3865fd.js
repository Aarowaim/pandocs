(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{211:function(e,t,a){"use strict";a.r(t);var r=a(0),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"pan-docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pan-docs"}},[e._v("#")]),e._v(" Pan Docs")]),e._v(" "),a("p",[e._v("The single, most comprehensive technical reference to Game Boy available to the public.")]),e._v(" "),a("h3",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),a("ul",[a("li",[e._v("Overview\n"),a("ul",[a("li",[a("a",{attrs:{href:"#about-the-pan-docs"}},[e._v("About the Pan Docs")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#authors"}},[e._v("Authors")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#specifications"}},[e._v("Specifications")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#memory-map"}},[e._v("Memory Map")])])])]),e._v(" "),a("li",[e._v("I/O Ports\n"),a("ul",[a("li",[a("a",{attrs:{href:"#video-display"}},[e._v("Video Display")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#sound-controller"}},[e._v("Sound Controller")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#joypad-input"}},[e._v("Joypad Input")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#serial-data-transfer"}},[e._v("Serial Data Transfer (Link Cable)")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#timer-and-divider-registers"}},[e._v("Timer and Divider Registers")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#interrupts"}},[e._v("Interrupts")])]),e._v(" "),a("li",[e._v("CGB Registers")]),e._v(" "),a("li",[a("a",{attrs:{href:"#sgb-functions"}},[e._v("SGB Functions")])])])]),e._v(" "),a("li",[e._v("CPU Specifications\n"),a("ul",[a("li",[e._v("Registers and Flags")]),e._v(" "),a("li",[e._v("Instruction Set")]),e._v(" "),a("li",[a("a",{attrs:{href:"#comparison-with-z80"}},[e._v("Comparision with Z80")])])])]),e._v(" "),a("li",[e._v("Cartridges\n"),a("ul",[a("li",[e._v("Cartridge header")]),e._v(" "),a("li",[a("a",{attrs:{href:"#mbc1"}},[e._v("MBC1")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#mbc2"}},[e._v("MBC2")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#mbc3"}},[e._v("MBC3")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#mbc5"}},[e._v("MBC5")])]),e._v(" "),a("li",[e._v("MBC6")]),e._v(" "),a("li",[e._v("MBC7")]),e._v(" "),a("li",[e._v("HuC1")])])]),e._v(" "),a("li",[e._v("Accessories\n"),a("ul",[a("li",[e._v("Game Boy Printer")]),e._v(" "),a("li",[e._v("Game Boy Camera")]),e._v(" "),a("li",[e._v("Gamegenie/Shark Cheats")])])]),e._v(" "),a("li",[e._v("Other\n"),a("ul",[a("li",[a("a",{attrs:{href:"#power-up-sequence"}},[e._v("Power Up Sequence")])]),e._v(" "),a("li",[e._v("Reducing Power Consumption")]),e._v(" "),a("li",[e._v("Sprite RAM Bug")]),e._v(" "),a("li",[e._v("External Connectors")])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#references"}},[e._v("References")])])]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"about-the-pan-docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about-the-pan-docs"}},[e._v("#")]),e._v(" About the Pan Docs")]),e._v(" "),a("p",[e._v("This is a new, experimental version of Pan Docs, mantained in the Markdown format.")]),e._v(" "),a("p",[e._v("To learn more about the history and the mission of the project, check the "),a("a",{attrs:{href:"https://github.com/gbdev/pandocs#history",target:"_blank",rel:"noopener noreferrer"}},[e._v("README"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"authors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authors"}},[e._v("#")]),e._v(" Authors")]),e._v(" "),a("p",[e._v("This document is the product of 25 years of community effort: it's hard to keep track of every contribution. If we missed something, contact us.")]),e._v(" "),a("p",[e._v("Non-exhaustive, list of content contributors:")]),e._v(" "),a("p",[a("em",[e._v("Pan of ATX, Marat Fayzullin, Felber Pascal, Robson Paul, Korth Martin.")])]),e._v(" "),a("p",[a("em",[e._v("Antonio Niño Díaz, Antonio Vivace, Beannaich, Elizafox, endrift, exezin, Furrtek, Gekkio, ISSOtm, Jeff Frohwein, John Harrison, kOOPa, LIJI32, Mantidactyle, mattcurrie, nitro2k01, Pascal Felber, pinobatch, T4g1, TechFalcon")])]),e._v(" "),a("h1",{attrs:{id:"specifications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specifications"}},[e._v("#")]),e._v(" Specifications")]),e._v(" "),a("ul",[a("li",[e._v("CPU - 8-bit Sharp LR25902 (similar to the Z80 processor)")]),e._v(" "),a("li",[e._v("Clock Speed - 4.194304MHz (4.295454MHz for SGB, max. 8.4MHz for CGB)")]),e._v(" "),a("li",[e._v("Work RAM - 8K Byte (32K Byte for CGB)")]),e._v(" "),a("li",[e._v("Video RAM - 8K Byte (16K Byte for CGB)")]),e._v(" "),a("li",[e._v('Screen Size - 2.6"')]),e._v(" "),a("li",[e._v("Resolution - 160x144 (20x18 tiles)")]),e._v(" "),a("li",[e._v("Max sprites - Max 40 per screen, 10 per line")]),e._v(" "),a("li",[e._v("Sprite sizes - 8x8 or 8x16 pixels")]),e._v(" "),a("li",[e._v("Palettes - 1x4 BG, 2x3 OBJ (for CGB: 8x4 BG, 8x3 OBJ)")]),e._v(" "),a("li",[e._v("Colors - 4 grayshades (32768 colors for CGB)")]),e._v(" "),a("li",[e._v("Horiz Sync - 9198 KHz (9420 KHz for SGB)")]),e._v(" "),a("li",[e._v("Vert Sync - 59.73 Hz (61.17 Hz for SGB)")]),e._v(" "),a("li",[e._v("Sound - 4 channels with stereo sound")]),e._v(" "),a("li",[e._v("Power - DC6V 0.7W (DC3V 0.7W for GB Pocket, DC3V 0.6W for CGB)")])]),e._v(" "),a("h1",{attrs:{id:"memory-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-map"}},[e._v("#")]),e._v(" Memory Map")]),e._v(" "),a("p",[e._v("The Game Boy has a 16bit address bus, that is used to address ROM, RAM and I/O")]),e._v(" "),a("h2",{attrs:{id:"general-memory-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-memory-map"}},[e._v("#")]),e._v(" General Memory Map")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[e._v("Start")])]),e._v(" "),a("th",[a("strong",[e._v("End")])]),e._v(" "),a("th",[a("strong",[e._v("Description")])]),e._v(" "),a("th",[a("strong",[e._v("Notes")])])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("0000")]),e._v(" "),a("td",[e._v("3FFF")]),e._v(" "),a("td",[e._v("16KB ROM bank 00")]),e._v(" "),a("td",[e._v("From cartridge, usually a fixed bank")])]),e._v(" "),a("tr",[a("td",[e._v("4000")]),e._v(" "),a("td",[e._v("7FFF")]),e._v(" "),a("td",[e._v("16KB ROM Bank 01~NN")]),e._v(" "),a("td",[e._v("From cartridge, switchable bank via "),a("a",{attrs:{href:"Memory_Bank_Controllers",title:"wikilink"}},[e._v("MB")]),e._v(" (if any)")])]),e._v(" "),a("tr",[a("td",[e._v("8000")]),e._v(" "),a("td",[e._v("9FFF")]),e._v(" "),a("td",[e._v("8KB Video RAM (VRAM)")]),e._v(" "),a("td",[e._v("Only bank 0 in Non-CGB mode Switchable bank 0/1 in CGB mode")])]),e._v(" "),a("tr",[a("td",[e._v("A000")]),e._v(" "),a("td",[e._v("BFFF")]),e._v(" "),a("td",[e._v("8KB External RAM")]),e._v(" "),a("td",[e._v("In cartridge, switchable bank if any")])]),e._v(" "),a("tr",[a("td",[e._v("C000")]),e._v(" "),a("td",[e._v("CFFF")]),e._v(" "),a("td",[e._v("4KB Work RAM (WRAM) bank 0")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("D000")]),e._v(" "),a("td",[e._v("DFFF")]),e._v(" "),a("td",[e._v("4KB Work RAM (WRAM) bank 1~N")]),e._v(" "),a("td",[e._v("Only bank 1 in Non-CGB mode Switchable bank 1~7 in CGB mode")])]),e._v(" "),a("tr",[a("td",[e._v("E000")]),e._v(" "),a("td",[e._v("FDFF")]),e._v(" "),a("td",[e._v("Mirror of C000~DDFF (ECHO RAM)")]),e._v(" "),a("td",[e._v("Typically not used")])]),e._v(" "),a("tr",[a("td",[e._v("FE00")]),e._v(" "),a("td",[e._v("FE9F")]),e._v(" "),a("td",[e._v("Sprite attribute table ("),a("a",{attrs:{href:"Video_Display#VRAM_Sprite_Attribute_Table_.28OAM.29",title:"wikilink"}},[e._v("OAM")]),e._v(")")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("FEA0")]),e._v(" "),a("td",[e._v("FEFF")]),e._v(" "),a("td",[e._v("Not Usable")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("FF00")]),e._v(" "),a("td",[e._v("FF7F")]),e._v(" "),a("td",[e._v("I/O Registers")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("FF80")]),e._v(" "),a("td",[e._v("FFFE")]),e._v(" "),a("td",[e._v("High RAM (HRAM)")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("FFFF")]),e._v(" "),a("td",[e._v("FFFF")]),e._v(" "),a("td",[a("a",{attrs:{href:"Interrupts",title:"wikilink"}},[e._v("Interrupts")]),e._v(" Enable Register (IE)")]),e._v(" "),a("td")])])]),e._v(" "),a("h2",{attrs:{id:"jump-vectors-in-first-rom-bank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jump-vectors-in-first-rom-bank"}},[e._v("#")]),e._v(" Jump Vectors in first ROM bank")]),e._v(" "),a("p",[e._v("The following addresses are supposed to be used as jump vectors:")]),e._v(" "),a("ul",[a("li",[e._v("RST commands: 0000, 0008,0010, 0018, 0020, 0028, 0030, 0038")]),e._v(" "),a("li",[e._v("Interrupts: 0040, 0048, 0050, 0058, 0060")])]),e._v(" "),a("p",[e._v("However, the memory may be used for any other purpose in case that your\nprogram doesn't use any (or only some) RST commands or interrupts. RST\ncommands are 1-byte opcodes that work similar to CALL opcodes, except\nthat the destination address is fixed. Since they are only 1 byte large,\nthey are also slightly faster.")]),e._v(" "),a("h2",{attrs:{id:"cartridge-header-in-first-rom-bank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cartridge-header-in-first-rom-bank"}},[e._v("#")]),e._v(" Cartridge Header in first ROM bank")]),e._v(" "),a("p",[e._v("The memory at 0100-014F contains the "),a("a",{attrs:{href:"The_Cartridge_Header",title:"wikilink"}},[e._v("cartridge\nheader")]),e._v(". This area contains information\nabout the program, its entry point, checksums, information about the\nused MBC chip, the ROM and RAM sizes, etc. Most of the bytes in this\narea are required to be specified correctly. For more information read\nthe chapter about The Cartridge Header.")]),e._v(" "),a("h2",{attrs:{id:"external-memory-and-hardware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-memory-and-hardware"}},[e._v("#")]),e._v(" External Memory and Hardware")]),e._v(" "),a("p",[e._v("The areas from 0000-7FFF and A000-BFFF may be used to connect external\nhardware. The first area is typically used to address ROM (read only, of\ncourse), cartridges with "),a("a",{attrs:{href:"Memory_Bank_Controllers",title:"wikilink"}},[e._v("Memory Bank Controllers\n(MBCs)")]),e._v(" are additionally using this\narea to output data (write only) to the MBC chip. The second area is\noften used to address external RAM, or to address other external\nhardware ("),a("a",{attrs:{href:"RTC",title:"wikilink"}},[e._v("Real Time Clock")]),e._v(", etc). External memory is\noften battery buffered, and may hold saved game positions and high score\ntables (etc.) even when the Game Boy is turned off, or when the\ncartridge is removed. For specific information read the chapter about\nMemory Bank Controllers.")]),e._v(" "),a("h2",{attrs:{id:"echo-ram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#echo-ram"}},[e._v("#")]),e._v(" Echo RAM")]),e._v(" "),a("p",[e._v("The memory range E000-FDFF is a mirror (or \"echo\") of WRAM, both for\nreading and writing. For example, writing to $E123 will modify both\n$C123 and $E123. It is recommended to avoid using this memory range\nanyways. This memory range's behavior has been confirmed on all grey\nGBs as well as on CGB and GBA. Some emulators (such as VisualBoyAdvance\n<1.8) don't emulate Echo RAM. It is possible to check if Echo RAM is\nproperly emulated by writing to WRAM (avoid values 00 and FF) and\nchecking if said value is mirrored in Echo RAM.")]),e._v(" "),a("h2",{attrs:{id:"fea0-feff-range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fea0-feff-range"}},[e._v("#")]),e._v(" FEA0-FEFF range")]),e._v(" "),a("p",[e._v("This range is very poorly documented. It doesn't even have a name !\nFrom my experience, this stays 00 on DMG, and alternates between 00 and\nseemingly random values on CGB.")]),e._v(" "),a("h1",{attrs:{id:"video-display"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#video-display"}},[e._v("#")]),e._v(" Video Display")]),e._v(" "),a("h2",{attrs:{id:"lcd-control-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-control-register"}},[e._v("#")]),e._v(" LCD Control Register")]),e._v(" "),a("p",[a("strong",[e._v("LCDC")]),e._v(" is the main "),a("strong",[e._v("LCD C")]),e._v("ontrol register. Its bits toggle what\nelements are displayed on the screen, and how.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7 - LCD Display Enable             (0=Off, 1=On)\nBit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\nBit 5 - Window Display Enable          (0=Off, 1=On)\nBit 4 - BG & Window Tile Data Select   (0=8800-97FF, 1=8000-8FFF)\nBit 3 - BG Tile Map Display Select     (0=9800-9BFF, 1=9C00-9FFF)\nBit 2 - OBJ (Sprite) Size              (0=8x8, 1=8x16)\nBit 1 - OBJ (Sprite) Display Enable    (0=Off, 1=On)\nBit 0 - BG/Window Display/Priority     (0=Off, 1=On)\n")])])]),a("h3",{attrs:{id:"lcdc-7-lcd-display-enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-7-lcd-display-enable"}},[e._v("#")]),e._v(" LCDC.7 - LCD Display Enable")]),e._v(" "),a("p",[e._v("This bit controls whether the LCD is on and the PPU is active. Setting\nit to 0 turns both off, which grants immediate and full access to VRAM,\nOAM, etc.")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("Stopping LCD operation (Bit 7 from 1 to 0) may be performed\nduring "),a("a",{attrs:{href:"VBlank",title:"wikilink"}},[e._v("VBlank")]),e._v(" ONLY, disabling the display outside\nof the V-Blank period may damage the hardware by burning in a black\nhorizontal line similar to that which appears when the GB is turned off.\nThis appears to be a serious issue, Nintendo is reported to reject any\ngames that do not follow this rule.")])]),e._v(" "),a("p",[e._v('When the display is disabled the screen is blank, which on DMG is\ndisplayed as a white "whiter" than color #0.')]),e._v(" "),a("p",[e._v("On SGB, the screen doesn't turn white, it appears that the previous\npicture sticks to the screen. (TODO: research this more.)")]),e._v(" "),a("p",[e._v("When re-enabling the LCD, the PPU will immediately start drawing again,\nbut the screen will stay blank during the first frame.")]),e._v(" "),a("h3",{attrs:{id:"lcdc-6-window-tile-map-display-select"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-6-window-tile-map-display-select"}},[e._v("#")]),e._v(" LCDC.6 - Window Tile Map Display Select")]),e._v(" "),a("p",[e._v("This bit controls which background map the Window uses for rendering.\nWhen it's reset, the $9800 tilemap is used, otherwise it's the $9C00\none.")]),e._v(" "),a("h3",{attrs:{id:"lcdc-5-window-display-enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-5-window-display-enable"}},[e._v("#")]),e._v(" LCDC.5 - Window Display Enable")]),e._v(" "),a("p",[e._v("This bit controls whether the window shall be displayed or not. (TODO :\nwhat happens when toggling this mid-scanline ?) This bit is overridden\non DMG by "),a("a",{attrs:{href:"#LCDC.0_-_BG.2FWindow_Display.2FPriority",title:"wikilink"}},[e._v("bit 0")]),e._v("\nif that bit is reset.")]),e._v(" "),a("p",[e._v("Note that on CGB models, setting this bit to 0 then back to 1 mid-frame\nmay cause the second write to be ignored. (TODO : test this.)")]),e._v(" "),a("h3",{attrs:{id:"lcdc-4-bg-window-tile-data-select"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-4-bg-window-tile-data-select"}},[e._v("#")]),e._v(" LCDC.4 - BG & Window Tile Data Select")]),e._v(" "),a("p",[e._v("This bit controls which "),a("a",{attrs:{href:"Video_Display#VRAM_Tile_Data",title:"wikilink"}},[e._v("addressing\nmode")]),e._v(" the BG and Window use to\npick tiles.")]),e._v(" "),a("p",[e._v("Sprites aren't affected by this, and will always use $8000 addressing\nmode.")]),e._v(" "),a("h3",{attrs:{id:"lcdc-3-bg-tile-map-display-select"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-3-bg-tile-map-display-select"}},[e._v("#")]),e._v(" LCDC.3 - BG Tile Map Display Select")]),e._v(" "),a("p",[e._v("This bit works similarly to LCDC-6: if the bit is\nreset, the BG uses tilemap $9800, otherwise tilemap $9C00.")]),e._v(" "),a("h3",{attrs:{id:"lcdc-2-obj-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-2-obj-size"}},[e._v("#")]),e._v(" LCDC.2 - OBJ Size")]),e._v(" "),a("p",[e._v("This bit controls the sprite size (1 tile or 2 stacked vertically).")]),e._v(" "),a("p",[e._v('Be cautious when changing this mid-frame from 8x8 to 8x16 : "remnants"\nof the sprites intended for 8x8 could "leak" into the 8x16 zone and\ncause artifacts.')]),e._v(" "),a("h3",{attrs:{id:"lcdc-1-obj-display-enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-1-obj-display-enable"}},[e._v("#")]),e._v(" LCDC.1 - OBJ Display Enable")]),e._v(" "),a("p",[e._v("This bit toggles whether sprites are displayed or not.")]),e._v(" "),a("p",[e._v("This can be toggled mid-frame, for example to avoid sprites being\ndisplayed on top of a status bar or text box.")]),e._v(" "),a("p",[e._v("(Note: toggling mid-scanline might have funky results on DMG?\nInvestigation needed.)")]),e._v(" "),a("h3",{attrs:{id:"lcdc-0-bg-window-display-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcdc-0-bg-window-display-priority"}},[e._v("#")]),e._v(" LCDC.0 - BG/Window Display/Priority")]),e._v(" "),a("p",[e._v("LCDC.0 has different meanings depending on Game Boy type and Mode:")]),e._v(" "),a("h4",{attrs:{id:"monochrome-gameboy-sgb-and-cgb-in-non-cgb-mode-bg-display"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monochrome-gameboy-sgb-and-cgb-in-non-cgb-mode-bg-display"}},[e._v("#")]),e._v(" Monochrome Gameboy, SGB and CGB in Non-CGB Mode: BG Display")]),e._v(" "),a("p",[e._v("When Bit 0 is cleared, both background and window become blank (white),\nand the "),a("a",{attrs:{href:"#LCDC.5_-_Window_Display_Enable",title:"wikilink"}},[e._v("Window Display Bit")]),e._v("\nis ignored in that case. Only Sprites may still be displayed (if enabled\nin Bit 1).")]),e._v(" "),a("h4",{attrs:{id:"cgb-in-cgb-mode-bg-and-window-master-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgb-in-cgb-mode-bg-and-window-master-priority"}},[e._v("#")]),e._v(" CGB in CGB Mode: BG and Window Master Priority")]),e._v(" "),a("p",[e._v("When Bit 0 is cleared, the background and window lose their priority -\nthe sprites will be always displayed on top of background and window,\nindependently of the priority flags in OAM and BG Map attributes.")]),e._v(" "),a("h3",{attrs:{id:"using-lcdc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-lcdc"}},[e._v("#")]),e._v(" Using LCDC")]),e._v(" "),a("p",[e._v("LCDC is a powerful tool: each bit controls a lot of behavior, and can be\nmodified at any time during the frame.")]),e._v(" "),a("p",[e._v("One of the important aspects of LCDC is that unlike VRAM, the PPU never\nlocks it. It's thus possible to modify it mid-scanline!")]),e._v(" "),a("h3",{attrs:{id:"faux-layer-textbox-status-bar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faux-layer-textbox-status-bar"}},[e._v("#")]),e._v(" Faux-layer textbox/status bar")]),e._v(" "),a("p",[e._v('A problem often seen especially in NES games is sprites rendering on top\nof the textbox/status bar. It\'s possible to prevent this using LCDC if\nthe textbox/status bar is "alone" on its scanlines:')]),e._v(" "),a("ul",[a("li",[e._v("Set LCDC.1 to 1 for gameplay scanlines")]),e._v(" "),a("li",[e._v("Set LCDC.1 to 0 for textbox/status bar scanlines")])]),e._v(" "),a("p",[e._v("Usually, these bars are either at the top or bottom of the screen, so\nthe bit can be set by the "),a("a",{attrs:{href:"VBlank_handler",title:"wikilink"}},[e._v("VBlank handler")])]),e._v(" "),a("h2",{attrs:{id:"lcd-status-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-status-register"}},[e._v("#")]),e._v(" LCD Status Register")]),e._v(" "),a("h4",{attrs:{id:"ff41-stat-lcdc-status-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff41-stat-lcdc-status-r-w"}},[e._v("#")]),e._v(" FF41 - STAT - LCDC Status (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 6 - LYC=LY Coincidence Interrupt (1=Enable) (Read/Write)\nBit 5 - Mode 2 OAM Interrupt         (1=Enable) (Read/Write)\nBit 4 - Mode 1 V-Blank Interrupt     (1=Enable) (Read/Write)\nBit 3 - Mode 0 H-Blank Interrupt     (1=Enable) (Read/Write)\nBit 2 - Coincidence Flag  (0:LYC<>LY, 1:LYC=LY) (Read Only)\nBit 1-0 - Mode Flag       (Mode 0-3, see below) (Read Only)\n          0: During H-Blank\n          1: During V-Blank\n          2: During Searching OAM\n          3: During Transferring Data to LCD Driver\n")])])]),a("p",[e._v("The two lower STAT bits show the current status of the LCD controller.")]),e._v(" "),a("p",[e._v("The LCD controller operates on a 2^22^ Hz = 4.194 MHz dot clock. An\nentire frame is 154 scanlines, 70224 dots, or 16.74 ms. On scanlines 0\nthrough 143, the LCD controller cycles through modes 2, 3, and 0 once\nevery 456 dots. Scanlines 144 through 153 are mode 1.")]),e._v(" "),a("p",[e._v("The following are typical when the display is enabled:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Mode 2  2_____2_____2_____2_____2_____2___________________2____\nMode 3  _33____33____33____33____33____33__________________3___\nMode 0  ___000___000___000___000___000___000________________000\nMode 1  ____________________________________11111111111111_____\n")])])]),a("p",[e._v("When the LCD controller is reading a particular part of video memory,\nthat memory is inaccessible to the CPU.")]),e._v(" "),a("ul",[a("li",[e._v("During modes 2 and 3, the CPU cannot access OAM (FE00h-FE9Fh).")]),e._v(" "),a("li",[e._v("During mode 3, the CPU cannot access VRAM or CGB Palette Data\n(FF69,FF6B).")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Mode")]),e._v(" "),a("th",[e._v("Action")]),e._v(" "),a("th",[e._v("Duration")]),e._v(" "),a("th",[e._v("Accessible video memory")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("2")]),e._v(" "),a("td",[e._v("Scanning OAM for (X, Y) coordinates of sprites that overlap this line")]),e._v(" "),a("td",[e._v("80 dots (19 us)")]),e._v(" "),a("td",[e._v("VRAM, CGB palettes")])]),e._v(" "),a("tr",[a("td",[e._v("3")]),e._v(" "),a("td",[e._v("Reading OAM and VRAM to generate the picture")]),e._v(" "),a("td",[e._v("168 to 291 cycles (40 to 60 us) depending on sprite count")]),e._v(" "),a("td",[e._v("None")])]),e._v(" "),a("tr",[a("td",[e._v("0")]),e._v(" "),a("td",[e._v("Horizontal blanking")]),e._v(" "),a("td",[e._v("85 to 208 dots (20 to 49 us) depending on previous mode 3 duration")]),e._v(" "),a("td",[e._v("VRAM, OAM, CGB palettes")])]),e._v(" "),a("tr",[a("td",[e._v("1")]),e._v(" "),a("td",[e._v("Vertical blanking")]),e._v(" "),a("td",[e._v("4560 dots (1087 us, 10 scanlines)")]),e._v(" "),a("td",[e._v("VRAM, OAM, CGB palettes")])])])]),e._v(" "),a("p",[e._v(": Properties of STAT modes")]),e._v(" "),a("p",[e._v("Unlike most game consoles, the Game Boy can pause the dot clock briefly,\nadding dots to mode 3's duration. It routinely takes a 6 to 11 dot\nbreak to fetch sprite patterns between background tile pattern fetches.\nOn DMG and GBC in DMG mode, mid-scanline writes to "),a("code",[e._v("BGP")]),e._v(" allow observing\nthis behavior, as a sprite delay shifts the effect of a write to the\nleft by that many dots.")]),e._v(" "),a("p",[e._v("Three things are known to pause the dot clock:")]),e._v(" "),a("p",[e._v("Background scrolling\n:   If "),a("code",[e._v("SCX mod 8")]),e._v(" is not zero at the start of the scanline, rendering\nis paused for that many dots while the shifter discards that many\npixels from the leftmost tile.")]),e._v(" "),a("p",[e._v("Window\n:   An active window pauses for at least 6 dots, as the background\nfetching mechanism starts over at the left side of the window.")]),e._v(" "),a("p",[e._v("Sprites\n:   Each sprite usually pauses for "),a("code",[e._v("11 - min(5, (x + SCX) mod 8)")]),e._v(" dots.\nBecause sprite fetch waits for background fetch to finish, a\nsprite's cost depends on its position relative to the left side of\nthe background tile under it. It's greater if a sprite is directly\naligned over the background tile, less if the sprite is to the\nright. If the sprite's left side is over the window, use "),a("code",[e._v("255 - WX")]),e._v("\nfor "),a("code",[e._v("SCX")]),e._v(" in this formula.")]),e._v(" "),a("p",[a("strong",[e._v("Not fully understood:")]),e._v(" The exact pause duration for window start is\nnot confirmed; it may have the same background fetch finish delay as a\nsprite. If two sprites' left sides are over the same background or\nwindow tile, the second may pause for fewer dots.")]),e._v(" "),a("p",[e._v("A hardware quirk in the monochrome Game Boy makes the LCD interrupt\nsometimes trigger when writing to STAT (including writing $00) during\nOAM scan, H-Blank, V-Blank, or LY=LYC. It behaves as if $FF were\nwritten for one cycle, and then the written value were written the next\ncycle. Because the GBC in DMG mode does not have this quirk, two games\nthat depend on this quirk (Ocean's "),a("em",[e._v("Road Rash")]),e._v(" and Vic Tokai's "),a("em",[e._v("Xerd\nno Densetsu")]),e._v(") will not run on a GBC.")]),e._v(" "),a("h2",{attrs:{id:"lcd-interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-interrupts"}},[e._v("#")]),e._v(" LCD Interrupts")]),e._v(" "),a("h4",{attrs:{id:"int-40-v-blank-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-40-v-blank-interrupt"}},[e._v("#")]),e._v(" INT 40 - V-Blank Interrupt")]),e._v(" "),a("p",[e._v("The V-Blank interrupt occurs ca. 59.7 times a second on a handheld Game\nBoy (DMG or CGB) or Game Boy Player and ca. 61.1 times a second on a\nSuper Game Boy (SGB). This interrupt occurs at the beginning of the\nV-Blank period (LY=144). During this period video hardware is not using\nVRAM so it may be freely accessed. This period lasts approximately 1.1\nmilliseconds.")]),e._v(" "),a("h4",{attrs:{id:"int-48-lcdc-status-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-48-lcdc-status-interrupt"}},[e._v("#")]),e._v(" INT 48 - LCDC Status Interrupt")]),e._v(" "),a("p",[e._v("There are various reasons for this interrupt to occur as described by\nthe STAT register ($FF40). One very popular reason is to indicate to\nthe user when the video hardware is about to redraw a given LCD line.\nThis can be useful for dynamically controlling the SCX/SCY registers\n($FF43/$FF42) to perform special video effects.")]),e._v(" "),a("p",[e._v("Example application : set LYC to WY, enable LY=LYC interrupt, and have\nthe handler disable sprites. This can be used if you use the window for\na text box (at the bottom of the screen), and you want sprites to be\nhidden by the text box.")]),e._v(" "),a("p",[e._v('The interrupt is triggered when transitioning from "No conditions met"\nto "Any condition met", which can cause the interrupt to not fire.\nExample : the Mode 0 and LY=LYC interrupts are enabled ; since the\nlatter triggers during Mode 2 (right after Mode 0), the interrupt will\ntrigger for Mode 0 but fail to for LY=LYC.')]),e._v(" "),a("h2",{attrs:{id:"lcd-position-and-scrolling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-position-and-scrolling"}},[e._v("#")]),e._v(" LCD Position and Scrolling")]),e._v(" "),a("p",[e._v("These registers can be accessed even during Mode 3, but they have no\neffect until the end of the current scanline.")]),e._v(" "),a("h4",{attrs:{id:"ff42-scy-scroll-y-r-w-ff43-scx-scroll-x-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff42-scy-scroll-y-r-w-ff43-scx-scroll-x-r-w"}},[e._v("#")]),e._v(" FF42 - SCY - Scroll Y (R/W), FF43 - SCX - Scroll X (R/W)")]),e._v(" "),a("p",[e._v("Specifies the position in the 256x256 pixels BG map (32x32 tiles) which\nis to be displayed at the upper/left LCD display position. Values in\nrange from 0-255 may be used for X/Y each, the video controller\nautomatically wraps back to the upper (left) position in BG map when\ndrawing exceeds the lower (right) border of the BG map area.")]),e._v(" "),a("h4",{attrs:{id:"ff44-ly-lcdc-y-coordinate-r"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff44-ly-lcdc-y-coordinate-r"}},[e._v("#")]),e._v(" FF44 - LY - LCDC Y-Coordinate (R)")]),e._v(" "),a("p",[e._v("The LY indicates the vertical line to which the present data is\ntransferred to the LCD Driver. The LY can take on any value between 0\nthrough 153. The values between 144 and 153 indicate the V-Blank period.")]),e._v(" "),a("h4",{attrs:{id:"ff45-lyc-ly-compare-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff45-lyc-ly-compare-r-w"}},[e._v("#")]),e._v(" FF45 - LYC - LY Compare (R/W)")]),e._v(" "),a("p",[e._v("The Game Boy permanently compares the value of the LYC and LY registers.\nWhen both values are identical, the coincident bit in the STAT register\nbecomes set, and (if enabled) a STAT interrupt is requested.")]),e._v(" "),a("h4",{attrs:{id:"ff4a-wy-window-y-position-r-w-ff4b-wx-window-x-position-minus-7-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff4a-wy-window-y-position-r-w-ff4b-wx-window-x-position-minus-7-r-w"}},[e._v("#")]),e._v(" FF4A - WY - Window Y Position (R/W), FF4B - WX - Window X Position minus 7 (R/W)")]),e._v(" "),a("p",[e._v("Specifies the upper/left positions of the Window area. (The window is an\nalternate background area which can be displayed above of the normal\nbackground. OBJs (sprites) may be still displayed above or behind the\nwindow, just as for normal BG.)")]),e._v(" "),a("p",[e._v("The window becomes visible (if enabled) when positions are set in range\nWX=0..166, WY=0..143. A position of WX=7, WY=0 locates the window at\nupper left, it is then completely covering normal background.")]),e._v(" "),a("p",[e._v('WX values 0-6 and 166 are unreliable due to hardware bugs. If WX is set\nto 0, the window will "stutter" horizontally when SCX changes.\n(Depending on SCX modulo 8, behavior is a little complicated so you\nshould try it yourself.)')]),e._v(" "),a("h2",{attrs:{id:"lcd-monochrome-palettes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-monochrome-palettes"}},[e._v("#")]),e._v(" LCD Monochrome Palettes")]),e._v(" "),a("h4",{attrs:{id:"ff47-bgp-bg-palette-data-r-w-non-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff47-bgp-bg-palette-data-r-w-non-cgb-mode-only"}},[e._v("#")]),e._v(" FF47 - BGP - BG Palette Data (R/W) - Non CGB Mode Only")]),e._v(" "),a("p",[e._v("This register assigns gray shades to the color numbers of the BG and\nWindow tiles.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7-6 - Shade for Color Number 3\nBit 5-4 - Shade for Color Number 2\nBit 3-2 - Shade for Color Number 1\nBit 1-0 - Shade for Color Number 0\n")])])]),a("p",[e._v("The four possible gray shades are:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0  White\n1  Light gray\n2  Dark gray\n3  Black\n")])])]),a("p",[e._v("In CGB Mode the Color Palettes are taken from CGB Palette Memory\ninstead.")]),e._v(" "),a("h4",{attrs:{id:"ff48-obp0-object-palette-0-data-r-w-non-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff48-obp0-object-palette-0-data-r-w-non-cgb-mode-only"}},[e._v("#")]),e._v(" FF48 - OBP0 - Object Palette 0 Data (R/W) - Non CGB Mode Only")]),e._v(" "),a("p",[e._v("This register assigns gray shades for sprite palette 0. It works exactly\nas BGP (FF47), except that the lower two bits aren't used because\nsprite data 00 is transparent.")]),e._v(" "),a("h4",{attrs:{id:"ff49-obp1-object-palette-1-data-r-w-non-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff49-obp1-object-palette-1-data-r-w-non-cgb-mode-only"}},[e._v("#")]),e._v(" FF49 - OBP1 - Object Palette 1 Data (R/W) - Non CGB Mode Only")]),e._v(" "),a("p",[e._v("This register assigns gray shades for sprite palette 1. It works exactly\nas BGP (FF47), except that the lower two bits aren't used because\nsprite data 00 is transparent.")]),e._v(" "),a("h2",{attrs:{id:"lcd-color-palettes-cgb-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-color-palettes-cgb-only"}},[e._v("#")]),e._v(" LCD Color Palettes (CGB only)")]),e._v(" "),a("h4",{attrs:{id:"ff68-bcps-bgpi-cgb-mode-only-background-palette-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff68-bcps-bgpi-cgb-mode-only-background-palette-index"}},[e._v("#")]),e._v(" FF68 - BCPS/BGPI - CGB Mode Only - Background Palette Index")]),e._v(" "),a("p",[e._v("This register is used to address a byte in the CGBs Background Palette\nMemory. Each two byte in that memory define a color value. The first 8\nbytes define Color 0-3 of Palette 0 (BGP0), and so on for BGP1-7.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 0-5   Index (00-3F)\nBit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n")])])]),a("p",[e._v("Data can be read/written to/from the specified index address through\nRegister FF69. When the Auto Increment bit is set then the index is\nautomatically incremented after each "),a("strong",[e._v("write")]),e._v(" to FF69. Auto Increment has\nno effect when "),a("strong",[e._v("reading")]),e._v(" from FF69, so the index must be manually\nincremented in that case. Writing to FF69 during rendering still causes\nauto-increment to occur.")]),e._v(" "),a("p",[e._v("Unlike the following, this register can be accessed outside V-Blank and\nH-Blank.")]),e._v(" "),a("h4",{attrs:{id:"ff69-bcpd-bgpd-cgb-mode-only-background-palette-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff69-bcpd-bgpd-cgb-mode-only-background-palette-data"}},[e._v("#")]),e._v(" FF69 - BCPD/BGPD - CGB Mode Only - Background Palette Data")]),e._v(" "),a("p",[e._v("This register allows to read/write data to the CGBs Background Palette\nMemory, addressed through Register FF68. Each color is defined by two\nbytes (Bit 0-7 in first byte).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 0-4   Red Intensity   (00-1F)\nBit 5-9   Green Intensity (00-1F)\nBit 10-14 Blue Intensity  (00-1F)\n")])])]),a("p",[e._v("Much like VRAM, data in Palette Memory cannot be read/written during the\ntime when the LCD Controller is reading from it. (That is when the STAT\nregister indicates Mode 3). Note: All background colors are initialized\nas white by the boot ROM, but it's a good idea to initialize at least\none color yourself (for example if you include a soft-reset mechanic).")]),e._v(" "),a("h4",{attrs:{id:"ff6a-ocps-obpi-cgb-mode-only-sprite-palette-index-ff6b-ocpd-obpd-cgb-mode-only-sprite-palette-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff6a-ocps-obpi-cgb-mode-only-sprite-palette-index-ff6b-ocpd-obpd-cgb-mode-only-sprite-palette-data"}},[e._v("#")]),e._v(" FF6A - OCPS/OBPI - CGB Mode Only - Sprite Palette Index, FF6B - OCPD/OBPD - CGB Mode Only - Sprite Palette Data")]),e._v(" "),a("p",[e._v("These registers are used to initialize the Sprite Palettes OBP0-7,\nidentically as described above for Background Palettes. Note that four\ncolors may be defined for each OBP Palettes - but only Color 1-3 of each\nSprite Palette can be displayed, Color 0 is always transparent, and can\nbe initialized to a don't care value or plain never initialized.")]),e._v(" "),a("p",[e._v("Note: All sprite colors are left uninitialized by the boot ROM, and are\nsomewhat random.")]),e._v(" "),a("h4",{attrs:{id:"rgb-translation-by-cgbs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgb-translation-by-cgbs"}},[e._v("#")]),e._v(" RGB Translation by CGBs")]),e._v(" "),a("p",[a("img",{attrs:{src:"VGA_versus_CGB.png",alt:"sRGB versus CGB colormixing",title:"fig:sRGB versus CGB color mixing"}}),e._v('{width="150"}\nWhen developing graphics on PCs, note that the RGB values will have\ndifferent appearance on CGB displays as on VGA/HDMI monitors calibrated\nto sRGB color. Because the GBC is not lit, the highest intensity will\nproduce Light Gray color rather than White. The intensities are not\nlinear; the values 10h-1Fh will all appear very bright, while medium and\ndarker colors are ranged at 00h-0Fh.')]),e._v(" "),a("p",[e._v("The CGB display's pigments aren't perfectly saturated. This means the\ncolors mix quite oddly; increasing intensity of only one R,G,B color\nwill also influence the other two R,G,B colors. For example, a color\nsetting of 03EFh (Blue=0, Green=1Fh, Red=0Fh) will appear as Neon Green\non VGA displays, but on the CGB it'll produce a decently washed out\nYellow. See image on the right.")]),e._v(" "),a("h4",{attrs:{id:"rgb-translation-by-gbas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgb-translation-by-gbas"}},[e._v("#")]),e._v(" RGB Translation by GBAs")]),e._v(" "),a("p",[e._v("Even though GBA is described to be compatible to CGB games, most CGB\ngames are completely unplayable on older GBAs because most colors are\ninvisible (black). Of course, colors such like Black and White will\nappear the same on both CGB and GBA, but medium intensities are arranged\ncompletely different. Intensities in range 00h..07h are invisible/black\n(unless eventually under best sunlight circumstances, and when gazing at\nthe screen under obscure viewing angles), unfortunately, these\nintensities are regularly used by most existing CGB games for medium and\ndarker colors.")]),e._v(" "),a("p",[e._v("Newer CGB games may avoid this effect by changing palette data when\ndetecting GBA hardware ("),a("a",{attrs:{href:"CGB_Registers#Detecting_CGB_.28and_GBA.29_functions",title:"wikilink"}},[e._v("see\nhow")]),e._v(").\nBased on measurement of GBC and GBA palettes using the "),a("a",{attrs:{href:"https://github.com/pinobatch/240p-test-mini/tree/master/gameboy",target:"_blank",rel:"noopener noreferrer"}},[e._v("144p Test\nSuite"),a("OutboundLink")],1),e._v(" ROM, a fairly close approximation is GBA = GBC * 3/4 + 8h for\neach R,G,B intensity. The result isn't quite perfect, and it may turn\nout that the color mixing is different also; anyways, it'd be still\nways better than no conversion.")]),e._v(" "),a("p",[e._v("This problem with low brightness levels does not affect later GBA SP\nunits and Game Boy Player. Thus ideally, the player should have control\nof this brightness correction.")]),e._v(" "),a("h2",{attrs:{id:"lcd-oam-dma-transfers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-oam-dma-transfers"}},[e._v("#")]),e._v(" LCD OAM DMA Transfers")]),e._v(" "),a("h4",{attrs:{id:"ff46-dma-dma-transfer-and-start-address-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff46-dma-dma-transfer-and-start-address-r-w"}},[e._v("#")]),e._v(" FF46 - DMA - DMA Transfer and Start Address (R/W)")]),e._v(" "),a("p",[e._v("Writing to this register launches a DMA transfer from ROM or RAM to OAM\nmemory (sprite attribute table). The written value specifies the\ntransfer source address divided by 100h, ie. source & destination are:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Source:      XX00-XX9F   ;XX in range from 00-F1h\nDestination: FE00-FE9F\n")])])]),a("p",[e._v("The transfer takes 160 machine cycles: 152 microseconds in normal speed\nor 76 microseconds in CGB Double Speed Mode. On DMG, during this time,\nthe CPU can access only HRAM (memory at FF80-FFFE); on CGB, the bus used\nby the source area cannot be used (this isn't understood well at the\nmoment, it's recommended to assume same behavior as DMG). For this\nreason, the programmer must copy a short procedure into HRAM, and use\nthis procedure to start the transfer from inside HRAM, and wait until\nthe transfer has finished:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" run_dma:\n  ld a, start address / 100h\n  ldh  (FF46h),a ;start DMA transfer (starts right after instruction)\n  ld  a,28h      ;delay...\n wait:           ;total 4x40 cycles, approx 160 μs\n  dec a          ;1 cycle\n  jr  nz,wait    ;3 cycles\n  ret\n")])])]),a("p",[e._v("Because sprites are not displayed while OAM DMA is in progress, most\nprograms are executing this procedure from inside of their VBlank\nprocedure. But it is also possible to execute it during display redraw\nalso, allowing to display more than 40 sprites on the screen (ie. for\nexample 40 sprites in upper half, and other 40 sprites in lower half of\nthe screen), at the cost of a couple lines that lack sprites.")]),e._v(" "),a("p",[e._v("A more compact procedure is")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" run_dma:  ; This part is in ROM\n  ld a, start address / 100h\n  ld bc, 2946h  ; B: wait time; C: OAM trigger\n  jp run_dma_hrampart\n\n run_dma_hrampart:\n  ldh ($FF00+c), a\n wait:\n  dec b\n  jr nz,wait\n  ret\n")])])]),a("p",[e._v("which should be called with a = start address / 100h, bc = 2946h. This\nsaves 5 bytes of HRAM, but is slightly slower in most cases because of\nthe jump into the HRAM part.")]),e._v(" "),a("h2",{attrs:{id:"lcd-vram-dma-transfers-cgb-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lcd-vram-dma-transfers-cgb-only"}},[e._v("#")]),e._v(" LCD VRAM DMA Transfers (CGB only)")]),e._v(" "),a("h4",{attrs:{id:"ff51-hdma1-cgb-mode-only-new-dma-source-high"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff51-hdma1-cgb-mode-only-new-dma-source-high"}},[e._v("#")]),e._v(" FF51 - HDMA1 - CGB Mode Only - New DMA Source, High")]),e._v(" "),a("h4",{attrs:{id:"ff52-hdma2-cgb-mode-only-new-dma-source-low"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff52-hdma2-cgb-mode-only-new-dma-source-low"}},[e._v("#")]),e._v(" FF52 - HDMA2 - CGB Mode Only - New DMA Source, Low")]),e._v(" "),a("p",[e._v("These two registers specify the address at which the transfer will read\ndata from. Normally, this should be either in ROM, SRAM or WRAM, thus\neither in range 0000-7FF0 or A000-DFF0. [Note : this has yet to be\ntested on Echo RAM, OAM, FEXX, IO and HRAM]. Trying to specify a source\naddress in VRAM will cause garbage to be copied.")]),e._v(" "),a("p",[e._v("The four lower bits of this address will be ignored and treated as 0.")]),e._v(" "),a("h4",{attrs:{id:"ff53-hdma3-cgb-mode-only-new-dma-destination-high"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff53-hdma3-cgb-mode-only-new-dma-destination-high"}},[e._v("#")]),e._v(" FF53 - HDMA3 - CGB Mode Only - New DMA Destination, High")]),e._v(" "),a("h4",{attrs:{id:"ff54-hdma4-cgb-mode-only-new-dma-destination-low"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff54-hdma4-cgb-mode-only-new-dma-destination-low"}},[e._v("#")]),e._v(" FF54 - HDMA4 - CGB Mode Only - New DMA Destination, Low")]),e._v(" "),a("p",[e._v("These two registers specify the address within 8000-9FF0 to which the\ndata will be copied. Only bits 12-4 are respected; others are ignored.\nThe four lower bits of this address will be ignored and treated as 0.")]),e._v(" "),a("h4",{attrs:{id:"ff55-hdma5-cgb-mode-only-new-dma-length-mode-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff55-hdma5-cgb-mode-only-new-dma-length-mode-start"}},[e._v("#")]),e._v(" FF55 - HDMA5 - CGB Mode Only - New DMA Length/Mode/Start")]),e._v(" "),a("p",[e._v("These registers are used to initiate a DMA transfer from ROM or RAM to\nVRAM. The Source Start Address may be located at 0000-7FF0 or A000-DFF0,\nthe lower four bits of the address are ignored (treated as zero). The\nDestination Start Address may be located at 8000-9FF0, the lower four\nbits of the address are ignored (treated as zero), the upper 3 bits are\nignored either (destination is always in VRAM).")]),e._v(" "),a("p",[e._v("Writing to this register starts the transfer, the lower 7 bits of which\nspecify the Transfer Length (divided by 10h, minus 1), ie. lengths of\n10h-800h bytes can be defined by the values 00h-7Fh. The upper bit\nindicates the Transfer Mode:")]),e._v(" "),a("p",[a("strong",[e._v("Bit7=0 - General Purpose DMA")])]),e._v(" "),a("p",[e._v("When using this transfer method,\nall data is transferred at once. The execution of the program is halted\nuntil the transfer has completed. Note that the General Purpose DMA\nblindly attempts to copy the data, even if the LCD controller is\ncurrently accessing VRAM. So General Purpose DMA should be used only if\nthe Display is disabled, or during V-Blank, or (for rather short blocks)\nduring H-Blank. The execution of the program continues when the transfer\nhas been completed, and FF55 then contains a value of FFh.")]),e._v(" "),a("p",[a("strong",[e._v("Bit7=1 - H-Blank DMA")])]),e._v(" "),a("p",[e._v("The H-Blank DMA transfers 10h bytes of\ndata during each H-Blank, ie. at LY=0-143, no data is transferred during\nV-Blank (LY=144-153), but the transfer will then continue at LY=00. The\nexecution of the program is halted during the separate transfers, but\nthe program execution continues during the 'spaces' between each data\nblock. Note that the program should not change the Destination VRAM bank\n(FF4F), or the Source ROM/RAM bank (in case data is transferred from\nbankable memory) until the transfer has completed! (The transfer should\nbe paused as described below while the banks are switched)")]),e._v(" "),a("p",[e._v('Reading from Register FF55 returns the remaining length (divided by 10h,\nminus 1), a value of 0FFh indicates that the transfer has completed. It\nis also possible to terminate an active H-Blank transfer by writing zero\nto Bit 7 of FF55. In that case reading from FF55 will return how many\n$10 "blocks" remained (minus 1) in the lower 7 bits, but Bit 7 will\nbe read as "1". Stopping the transfer doesn\'t set HDMA1-4 to $FF.')]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("H-Blank DMA should not be started (write to FF55) during a H-Blank\nperiod (STAT mode 0).")]),e._v(" "),a("p",[e._v("If the transfer's destination address overflows, the transfer stops\nprematurely. [Note : what's the state of the registers if this happens\n?]")])]),e._v(" "),a("h4",{attrs:{id:"confirming-if-the-dma-transfer-is-active"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#confirming-if-the-dma-transfer-is-active"}},[e._v("#")]),e._v(" Confirming if the DMA Transfer is Active")]),e._v(" "),a("p",[e._v("Reading Bit 7 of FF55 can be used to confirm if the DMA transfer is\nactive (1=Not Active, 0=Active). This works under any circumstances -\nafter completion of General Purpose, or H-Blank Transfer, and after\nmanually terminating a H-Blank Transfer.")]),e._v(" "),a("h4",{attrs:{id:"transfer-timings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-timings"}},[e._v("#")]),e._v(" Transfer Timings")]),e._v(" "),a("p",[e._v("In both Normal Speed and Double Speed Mode it takes about 8 μs to\ntransfer a block of 10h bytes. That are 8 tstates in Normal Speed Mode,\nand 16 'fast' tstates in Double Speed Mode. Older MBC controllers\n(like MBC1-4) and slower ROMs are not guaranteed to support General\nPurpose or H-Blank DMA, that's because there are always 2 bytes\ntransferred per microsecond (even if the itself program runs it Normal\nSpeed Mode).")]),e._v(" "),a("h2",{attrs:{id:"vram-tile-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-tile-data"}},[e._v("#")]),e._v(" VRAM Tile Data")]),e._v(" "),a("p",[e._v("Tile Data is stored in VRAM at addresses $8000-97FF; with one tile\nbeing 16 bytes large, this area defines data for 384 Tiles. In CGB Mode,\nthis is doubled (768 tiles) because of the two VRAM banks.")]),e._v(" "),a("p",[e._v("Each tile is sized 8x8 pixels and has a color depth of 4 colors/gray\nshades. Tiles can be displayed as part of the Background/Window map,\nand/or as OAM tiles (foreground sprites). Note that foreground sprites\ndon't use color 0 - it's transparent instead.")]),e._v(" "),a("p",[e._v('There are three "blocks" of 128 tiles each:')]),e._v(" "),a("ul",[a("li",[e._v("Block 0 is $8000-87FF")]),e._v(" "),a("li",[e._v("Block 1 is $8800-8FFF")]),e._v(" "),a("li",[e._v("Block 2 is $9000-97FF")])]),e._v(" "),a("p",[e._v('Tiles are always indexed using a 8-bit integer, but the addressing\nmethod may differ. The "8000 method" uses $8000 as its base pointer\nand uses an unsigned addressing, meaning that tiles 0-127 are in block\n0, and tiles 128-255 are in block 1. The "8800 method" uses $9000 as\nits base pointer and uses a signed addressing. To put it differently,\n"8000 addressing" takes tiles 0-127 from block 0 and tiles 128-255\nfrom block 1, whereas "8800 addressing" takes tiles 0-127 from block 2\nand tiles 128-255 from block 1. (You can notice that block 1 is shared\nby both addressing methods)')]),e._v(" "),a("p",[e._v("Sprites always use 8000 addressing, but the BG and Window can use either\nmode, controlled by "),a("a",{attrs:{href:"#LCDC.4_-_BG_.26_Window_Tile_Data_Select",title:"wikilink"}},[e._v("LCDC bit\n4")]),e._v(".")]),e._v(" "),a("p",[e._v("Each Tile occupies 16 bytes, where each 2 bytes represent a line:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Byte 0-1  First Line (Upper 8 pixels)\nByte 2-3  Next Line\netc.`\n")])])]),a("p",[e._v("For each line, the first byte defines the least significant bits of the\ncolor numbers for each pixel, and the second byte defines the upper bits\nof the color numbers. In either case, Bit 7 is the leftmost pixel, and\nBit 0 the rightmost. For example : let's say you have $57 $36 (in\nthis order in memory). To obtain the color index for the leftmost pixel,\nyou take bit 7 of both bytes : 0, and 0. Thus the index is 00b = 0. For\nthe second pixel, repeat with bit 6 : 1, and 0. Thus the index is 01b =\n1 (remember to flip the order of the bits !). If you repeat the\noperation you'll find that the indexes for the 8 pixels are 0 1 2 3 0 3\n3 1.")]),e._v(" "),a("p",[e._v("A more visual explanation can be found\n"),a("a",{attrs:{href:"https://www.huderlem.com/demos/gameboy2bpp.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("So, each pixel is having a color number in range from 0-3. The color\nnumbers are translated into real colors (or gray shades) depending on\nthe current palettes. The palettes are defined through registers\n"),a("a",{attrs:{href:"#FF47_-_BGP_-_BG_Palette_Data_.28R.2FW.29_-_Non_CGB_Mode_Only",title:"wikilink"}},[e._v("BGP")]),e._v(",\n"),a("a",{attrs:{href:"#FF48_-_OBP0_-_Object_Palette_0_Data_.28R.2FW.29_-_Non_CGB_Mode_Only",title:"wikilink"}},[e._v("OBP0")]),e._v("\nand\n"),a("a",{attrs:{href:"#FF49_-_OBP1_-_Object_Palette_1_Data_.28R.2FW.29_-_Non_CGB_Mode_Only",title:"wikilink"}},[e._v("OBP1")]),e._v("\n(Non CGB Mode), and\n"),a("a",{attrs:{href:"#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index",title:"wikilink"}},[e._v("BCPS/BGPI")]),e._v(",\n"),a("a",{attrs:{href:"#FF69_-_BCPD.2FBGPD_-_CGB_Mode_Only_-_Background_Palette_Data",title:"wikilink"}},[e._v("BCPD/BGPD")]),e._v(",\n"),a("a",{attrs:{href:"#FF6A_-_OCPS.2FOBPI_-_CGB_Mode_Only_-_Sprite_Palette_Index.2C_FF6B_-_OCPD.2FOBPD_-_CGB_Mode_Only_-_Sprite_Palette_Data",title:"wikilink"}},[e._v("OCPS/OBPI and\nOCPD/OBPD")]),e._v("\n(CGB Mode).")]),e._v(" "),a("h2",{attrs:{id:"vram-background-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-background-maps"}},[e._v("#")]),e._v(" VRAM Background Maps")]),e._v(" "),a("p",[e._v('The Game Boy contains two 32x32 tile background maps in VRAM at\naddresses 9800h-9BFFh and 9C00h-9FFFh. Each can be used either to\ndisplay "normal" background, or "window" background.')]),e._v(" "),a("h4",{attrs:{id:"bg-map-tile-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bg-map-tile-numbers"}},[e._v("#")]),e._v(" BG Map Tile Numbers")]),e._v(" "),a("p",[e._v("An area of VRAM known as Background Tile Map contains the numbers of\ntiles to be displayed. It is organized as 32 rows of 32 bytes each. Each\nbyte contains a number of a tile to be displayed.")]),e._v(" "),a("p",[e._v("Tile patterns are taken from the Tile Data Table using either of the two\naddressing modes (described "),a("a",{attrs:{href:"#VRAM_Tile_Data",title:"wikilink"}},[e._v("above")]),e._v("), which\ncan be selected via LCDC register.")]),e._v(" "),a("p",[e._v("As one background tile has a size of 8x8 pixels, the BG maps may hold a\npicture of 256x256 pixels, and an area of 160x144 pixels of this picture\ncan be displayed on the LCD screen.")]),e._v(" "),a("h4",{attrs:{id:"bg-map-attributes-cgb-mode-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bg-map-attributes-cgb-mode-only"}},[e._v("#")]),e._v(" BG Map Attributes (CGB Mode only)")]),e._v(" "),a("p",[e._v("In CGB Mode, an additional map of 32x32 bytes is stored in VRAM Bank 1\n(each byte defines attributes for the corresponding tile-number map\nentry in VRAM Bank 0, ie. 1:9800 defines the attributes for the tile at\n0:9800):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 0-2  Background Palette number  (BGP0-7)\nBit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\nBit 4    Not used\nBit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\nBit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\nBit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n")])])]),a("p",[e._v("When Bit 7 is set, the corresponding BG tile will have priority above\nall OBJs (regardless of the priority bits in OAM memory). There's also\na Master Priority flag in LCDC register Bit 0 which overrides all other\npriority bits when cleared.")]),e._v(" "),a("p",[e._v("Note that, if the map entry at 0:9800 is tile $2A, the attribute at\n1:9800 doesn't define properties for ALL tiles $2A on-screen, but only\nthe one at 0:9800 !")]),e._v(" "),a("h4",{attrs:{id:"normal-background-bg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normal-background-bg"}},[e._v("#")]),e._v(" Normal Background (BG)")]),e._v(" "),a("p",[e._v("The SCY and SCX registers can be used to scroll the background, allowing\nto select the origin of the visible 160x144 pixel area within the total\n256x256 pixel background map. Background wraps around the screen (i.e.\nwhen part of it goes off the screen, it appears on the opposite side.)")]),e._v(" "),a("h4",{attrs:{id:"the-window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-window"}},[e._v("#")]),e._v(" The Window")]),e._v(" "),a("p",[e._v('Besides background, there is also a "window" overlaying the\nbackground. The window is not scrollable, that is, it is always\ndisplayed starting from its left upper corner. The location of a window\non the screen can be adjusted via WX and WY registers. Screen\ncoordinates of the top left corner of a window are WX-7,WY. The tiles\nfor the window are stored in the Tile Data Table. Both the Background\nand the window share the same Tile Data Table.')]),e._v(" "),a("p",[e._v("Both background and window can be disabled or enabled separately via\nbits in the LCDC register.")]),e._v(" "),a("h2",{attrs:{id:"vram-banks-cgb-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-banks-cgb-only"}},[e._v("#")]),e._v(" VRAM Banks (CGB only)")]),e._v(" "),a("p",[e._v("The CGB has twice the VRAM of the DMG, but it is banked and either bank\nhas a different purpose.")]),e._v(" "),a("h4",{attrs:{id:"ff4f-vbk-cgb-mode-only-vram-bank-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff4f-vbk-cgb-mode-only-vram-bank-r-w"}},[e._v("#")]),e._v(" FF4F - VBK - CGB Mode Only - VRAM Bank (R/W)")]),e._v(" "),a("p",[e._v("This register can be written to to change VRAM banks. Only bit 0\nmatters, all other bits are ignored.")]),e._v(" "),a("h4",{attrs:{id:"vram-bank-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-bank-1"}},[e._v("#")]),e._v(" VRAM bank 1")]),e._v(" "),a("p",[e._v("VRAM bank 1 is split like VRAM bank 0 ; 8000-97FF also stores tiles\n(just like in bank 0), which can be accessed the same way as (and at the\nsame time as) bank 0 tiles. 9800-9FFF contains the attributes for the\ncorresponding Tile Maps.")]),e._v(" "),a("p",[e._v("Reading from this register will return the number of the currently\nloaded VRAM bank in bit 0, and all other bits will be set to 1.")]),e._v(" "),a("h2",{attrs:{id:"vram-sprite-attribute-table-oam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-sprite-attribute-table-oam"}},[e._v("#")]),e._v(" VRAM Sprite Attribute Table (OAM)")]),e._v(" "),a("p",[e._v("Gameboy video controller can display up to 40 sprites either in 8x8 or\nin 8x16 pixels. Because of a limitation of hardware, only ten sprites\ncan be displayed per scan line. Sprite patterns have the same format as\nBG tiles, but they are taken from the Sprite Pattern Table located at\n$8000-8FFF and have unsigned numbering.")]),e._v(" "),a("p",[e._v("Sprite attributes reside in the Sprite Attribute Table (OAM - Object\nAttribute Memory) at $FE00-FE9F. Each of the 40 entries consists of\nfour bytes with the following meanings:")]),e._v(" "),a("h4",{attrs:{id:"byte0-y-position"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte0-y-position"}},[e._v("#")]),e._v(" Byte0 - Y Position")]),e._v(" "),a("p",[e._v("Specifies the sprites vertical position on the screen (minus 16). An\noff-screen value (for example, Y=0 or Y>=160) hides the sprite.")]),e._v(" "),a("h4",{attrs:{id:"byte1-x-position"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte1-x-position"}},[e._v("#")]),e._v(" Byte1 - X Position")]),e._v(" "),a("p",[e._v("Specifies the sprites horizontal position on the screen (minus 8). An\noff-screen value (X=0 or X>=168) hides the sprite, but the sprite still\naffects the priority ordering - a better way to hide a sprite is to set\nits Y-coordinate off-screen.")]),e._v(" "),a("h4",{attrs:{id:"byte2-tile-pattern-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte2-tile-pattern-number"}},[e._v("#")]),e._v(" Byte2 - Tile/Pattern Number")]),e._v(" "),a("p",[e._v('Specifies the sprites Tile Number (00-FF). This (unsigned) value selects\na tile from memory at 8000h-8FFFh. In CGB Mode this could be either in\nVRAM Bank 0 or 1, depending on Bit 3 of the following byte. In 8x16\nmode, the lower bit of the tile number is ignored. IE: the upper 8x8\ntile is "NN AND FEh", and the lower 8x8 tile is "NN OR 01h".')]),e._v(" "),a("h4",{attrs:{id:"byte3-attributes-flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#byte3-attributes-flags"}},[e._v("#")]),e._v(" Byte3 - Attributes/Flags:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n        (Used for both BG and Window. BG color 0 is always behind OBJ)\n Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n")])])]),a("h4",{attrs:{id:"sprite-priorities-and-conflicts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprite-priorities-and-conflicts"}},[e._v("#")]),e._v(" Sprite Priorities and Conflicts")]),e._v(" "),a("p",[e._v("During each scanline's OAM scan, the LCD controller compares LY to each\nsprite's Y position to find the 10 sprites on that line that appear\nfirst in OAM ($FE00-$FE03 being the first). It discards the rest,\nallowing only 10 sprites to be displayed on any one line. When this\nlimit is exceeded, sprites appearing later in OAM won't be displayed.\nTo keep unused sprites from affecting onscreen sprites, set their Y\ncoordinate to Y = 0 or Y >= 160 (144 + 16) (Note : Y <= 8 also works\nif sprite size is set to 8x8). Just setting the X coordinate to X = 0 or\nX >= 168 (160 + 8) on a sprite will hide it, but it will still affect\nother sprites sharing the same lines.")]),e._v(" "),a("p",[e._v("If using "),a("a",{attrs:{href:"BGB",title:"wikilink"}},[e._v("BGB")]),e._v(", in the VRAM viewer - OAM tab, hover your\nmouse over the small screen to highlight the sprites on a line. Sprites\nhidden due to the limitation will be highlighted in red.")]),e._v(" "),a("p",[e._v("When these 10 sprites overlap, the highest priority one will appear\nabove all others, etc. (Thus, no Z-fighting.) In CGB mode, the first\nsprite in OAM ($FE00-$FE03) has the highest priority, and so on. In\nNon-CGB mode, the smaller the X coordinate, the higher the priority. The\ntie breaker (same X coordinates) is the same priority as in CGB mode.")]),e._v(" "),a("p",[e._v("The priority calculation between sprites disregards OBJ-to-BG Priority\n(attribute bit 7). Only the highest-priority nonzero sprite pixel at any\ngiven point is compared against the background. Thus if a sprite with a\nhigher priority (based on OAM index) but with OBJ-to-BG Priority turned\non overlaps a sprite with a lower priority and a nonzero background\npixel, the background pixel is displayed regardless of the\nlower-priority sprite's OBJ-to-BG Priority.")]),e._v(" "),a("h4",{attrs:{id:"writing-data-to-oam-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-data-to-oam-memory"}},[e._v("#")]),e._v(" Writing Data to OAM Memory")]),e._v(" "),a("p",[e._v("The recommended method is to write the data to normal RAM first, and to\ncopy that RAM to OAM by using the DMA transfer function, initiated\nthrough DMA register (FF46). Beside for that, it is also possible to\nwrite data directly to the OAM area by using normal LD commands, this\nworks only during the H-Blank and V-Blank periods. The current state of\nthe LCD controller can be read out from the STAT register (FF41).")]),e._v(" "),a("h2",{attrs:{id:"accessing-vram-and-oam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessing-vram-and-oam"}},[e._v("#")]),e._v(" Accessing VRAM and OAM")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("When the LCD Controller is drawing the screen it is directly reading\nfrom Video Memory (VRAM) and from the Sprite Attribute Table (OAM).\nDuring these periods the Game Boy CPU may not access the VRAM and OAM.\nThat means, any attempts to write to VRAM/OAM are ignored (the data\nremains unchanged). And any attempts to read from VRAM/OAM will return\nundefined data (typically a value of FFh).")]),e._v(" "),a("p",[e._v("For this reason the program should verify if VRAM/OAM is accessible\nbefore actually reading or writing to it. This is usually done by\nreading the Mode Bits from the STAT Register (FF41). When doing this (as\ndescribed in the examples below) you should take care that no interrupts\noccur between the wait loops and the following memory access - the\nmemory is guaranteed to be accessible only for a few cycles directly\nafter the wait loops have completed.")])]),e._v(" "),a("h4",{attrs:{id:"vram-memory-at-8000h-9fffh-is-accessible-during-mode-0-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vram-memory-at-8000h-9fffh-is-accessible-during-mode-0-2"}},[e._v("#")]),e._v(" VRAM (memory at 8000h-9FFFh) is accessible during Mode 0-2")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Mode 0 - H-Blank Period,\nMode 1 - V-Blank Period, and\nMode 2 - Searching OAM Period\n")])])]),a("p",[e._v("A typical procedure that waits for accessibility of VRAM would be:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ld   hl,0FF41h    ;-STAT Register\n@@wait:           ;\nbit  1,(hl)       ; Wait until Mode is 0 or 1\njr   nz,@@wait    ;\n")])])]),a("p",[e._v("Even if the procedure gets executed at the "),a("em",[e._v("end")]),e._v(" of Mode 0 or 1, it is\nstill proof to assume that VRAM can be accessed for a few more cycles\nbecause in either case the following period is Mode 2 which allows\naccess to VRAM either. However, be careful about STAT LCD interrupts or\nother interrupts that could cause the LCD to be back in mode 3 by the\ntime it returns. In CGB Mode an alternate method to write data to VRAM\nis to use the HDMA Function (FF51-FF55).")]),e._v(" "),a("p",[e._v("If you're not using LCD interrupts, another way to synchronize to the\nstart of mode 0 is to use "),a("code",[e._v("halt")]),e._v(" with IME turned off ("),a("code",[e._v("di")]),e._v("). This allows\nuse of the entire mode 0 on one line and mode 2 on the following line,\nwhich sum to 165 to 288 dots. For comparison, at single speed (4 dots\nper machine cycle), a "),a("a",{attrs:{href:"Popslide",title:"wikilink"}},[e._v("copy from stack")]),e._v(" that takes\n9 cycles per 2 bytes can push 8 bytes (half a tile) in 144 dots, which\nfits within the worst case timing for mode 0+2.")]),e._v(" "),a("h4",{attrs:{id:"oam-memory-at-fe00h-fe9fh-is-accessible-during-mode-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oam-memory-at-fe00h-fe9fh-is-accessible-during-mode-0-1"}},[e._v("#")]),e._v(" OAM (memory at FE00h-FE9Fh) is accessible during Mode 0-1")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Mode 0 - H-Blank Period\nMode 1 - V-Blank Period\n")])])]),a("p",[e._v("Aside from that, OAM can be accessed at any time by using the DMA\nFunction (FF46). When directly reading or writing to OAM, a typical\nprocedure that waits for accessibility of OAM Memory would be:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" ld   hl,0FF41h    ;-STAT Register\n@@wait1:           ;\n bit  1,(hl)       ; Wait until Mode is -NOT- 0 or 1\n jr   z,@@wait1    ;\n@@wait2:           ;\n bit  1,(hl)       ; Wait until Mode 0 or 1 -BEGINS-\n jr   nz,@@wait2   ;\n")])])]),a("p",[e._v("The two wait loops ensure that Mode 0 or 1 will last for a few clock\ncycles after completion of the procedure. In V-Blank period it might be\nrecommended to skip the whole procedure - and in most cases using the\nabove mentioned DMA function would be more recommended anyways.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),a("p",[e._v("When the display is disabled, both VRAM and OAM are accessible at any\ntime. The downside is that the screen is blank (white) during this\nperiod, so that disabling the display would be recommended only during\ninitialization.")])]),e._v(" "),a("h1",{attrs:{id:"sound-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-controller"}},[e._v("#")]),e._v(" Sound Controller")]),e._v(" "),a("p",[e._v("There are two sound channels connected to the output terminals SO1 and\nSO2. There is also a input terminal Vin connected to the cartridge. It\ncan be routed to either of both output terminals. Game Boy circuitry\nallows producing sound in four different ways:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Quadrangular wave patterns with sweep and envelope functions\nQuadrangular wave patterns with envelope functions\nVoluntary wave patterns from wave RAM\nWhite noise with an envelope function\n")])])]),a("p",[e._v("These four sounds can be controlled independantly and then mixed\nseparately for each of the output terminals.")]),e._v(" "),a("p",[e._v("Sound registers may be set at all times while producing sound.")]),e._v(" "),a("p",[e._v("(Sounds will have a 2.4% higher frequency on Super GB.)")]),e._v(" "),a("h2",{attrs:{id:"sound-channel-1-tone-sweep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-1-tone-sweep"}},[e._v("#")]),e._v(" Sound Channel 1 - Tone & Sweep")]),e._v(" "),a("h4",{attrs:{id:"ff10-nr10-channel-1-sweep-register-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff10-nr10-channel-1-sweep-register-r-w"}},[e._v("#")]),e._v(" FF10 - NR10 - Channel 1 Sweep register (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" Bit 6-4 - Sweep Time\n Bit 3   - Sweep Increase/Decrease\n            0: Addition    (frequency increases)\n            1: Subtraction (frequency decreases)\n Bit 2-0 - Number of sweep shift (n: 0-7)\n")])])]),a("p",[e._v("Sweep Time:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("000: sweep off - no freq change\n001: 7.8 ms  (1/128Hz)\n010: 15.6 ms (2/128Hz)\n011: 23.4 ms (3/128Hz)\n100: 31.3 ms (4/128Hz)\n101: 39.1 ms (5/128Hz)\n110: 46.9 ms (6/128Hz)\n111: 54.7 ms (7/128Hz)\n")])])]),a("p",[e._v("The change of frequency (NR13,NR14) at each shift is calculated by the\nfollowing formula where X(0) is initial freq & X(t-1) is last freq:")]),e._v(" "),a("p",[a("code",[e._v("X(t) = X(t-1) +/- X(t-1)/2^n")])]),e._v(" "),a("h4",{attrs:{id:"ff11-nr11-channel-1-sound-length-wave-pattern-duty-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff11-nr11-channel-1-sound-length-wave-pattern-duty-r-w"}},[e._v("#")]),e._v(" FF11 - NR11 - Channel 1 Sound length/Wave pattern duty (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7-6 - Wave Pattern Duty (Read/Write)\nBit 5-0 - Sound length data (Write Only) (t1: 0-63)\n")])])]),a("p",[e._v("Wave Duty:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("00: 12.5% ( _-------_-------_------- )\n01: 25%   ( __------__------__------ )\n10: 50%   ( ____----____----____---- ) (normal)\n11: 75%   ( ______--______--______-- )\n")])])]),a("p",[e._v("Sound Length = (64-t1)*(1/256) seconds The Length value is used only if\nBit 6 in NR14 is set.")]),e._v(" "),a("h4",{attrs:{id:"ff12-nr12-channel-1-volume-envelope-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff12-nr12-channel-1-volume-envelope-r-w"}},[e._v("#")]),e._v(" FF12 - NR12 - Channel 1 Volume Envelope (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" Bit 7-4 - Initial Volume of envelope (0-0Fh) (0=No Sound)\n Bit 3   - Envelope Direction (0=Decrease, 1=Increase)\n Bit 2-0 - Number of envelope sweep (n: 0-7)\n           (If zero, stop envelope operation.)\n")])])]),a("p",[e._v("Length of 1 step = n*(1/64) seconds")]),e._v(" "),a("h4",{attrs:{id:"ff13-nr13-channel-1-frequency-lo-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff13-nr13-channel-1-frequency-lo-write-only"}},[e._v("#")]),e._v(" FF13 - NR13 - Channel 1 Frequency lo (Write Only)")]),e._v(" "),a("p",[e._v("Lower 8 bits of 11 bit frequency (x). Next 3 bit are in NR14 ($FF14)")]),e._v(" "),a("h4",{attrs:{id:"ff14-nr14-channel-1-frequency-hi-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff14-nr14-channel-1-frequency-hi-r-w"}},[e._v("#")]),e._v(" FF14 - NR14 - Channel 1 Frequency hi (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)")]),a("br"),e._v(" "),a("code",[e._v("Bit 6   - Counter/consecutive selection (Read/Write)")]),a("br"),e._v(" "),a("code",[e._v("(1=Stop output when length in NR11 expires)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-0 - Frequency's higher 3 bits (x) (Write Only)")])]),e._v(" "),a("p",[e._v("Frequency = 131072/(2048-x) Hz")]),e._v(" "),a("h2",{attrs:{id:"sound-channel-2-tone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-2-tone"}},[e._v("#")]),e._v(" Sound Channel 2 - Tone")]),e._v(" "),a("p",[e._v("This sound channel works exactly as channel 1, except that it doesn't\nhave a Tone Envelope/Sweep Register.")]),e._v(" "),a("h4",{attrs:{id:"ff16-nr21-channel-2-sound-length-wave-pattern-duty-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff16-nr21-channel-2-sound-length-wave-pattern-duty-r-w"}},[e._v("#")]),e._v(" FF16 - NR21 - Channel 2 Sound Length/Wave Pattern Duty (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7-6 - Wave Pattern Duty (Read/Write)")]),a("br"),e._v(" "),a("code",[e._v("Bit 5-0 - Sound length data (Write Only) (t1: 0-63)")])]),e._v(" "),a("p",[e._v("Wave Duty:")]),e._v(" "),a("p",[a("code",[e._v("00: 12.5% ( _-------_-------_------- )")]),a("br"),e._v(" "),a("code",[e._v("01: 25%   ( __------__------__------ )")]),a("br"),e._v(" "),a("code",[e._v("10: 50%   ( ____----____----____---- ) (normal)")]),a("br"),e._v(" "),a("code",[e._v("11: 75%   ( ______--______--______-- )")])]),e._v(" "),a("p",[e._v("Sound Length = (64-t1)*(1/256) seconds The Length value is used only if\nBit 6 in NR24 is set.")]),e._v(" "),a("h4",{attrs:{id:"ff17-nr22-channel-2-volume-envelope-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff17-nr22-channel-2-volume-envelope-r-w"}},[e._v("#")]),e._v(" FF17 - NR22 - Channel 2 Volume Envelope (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7-4 - Initial Volume of envelope (0-0Fh) (0=No Sound)")]),a("br"),e._v(" "),a("code",[e._v("Bit 3   - Envelope Direction (0=Decrease, 1=Increase)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-0 - Number of envelope sweep (n: 0-7)")]),a("br"),e._v(" "),a("code",[e._v("(If zero, stop envelope operation.)")])]),e._v(" "),a("p",[e._v("Length of 1 step = n*(1/64) seconds")]),e._v(" "),a("h4",{attrs:{id:"ff18-nr23-channel-2-frequency-lo-data-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff18-nr23-channel-2-frequency-lo-data-w"}},[e._v("#")]),e._v(" FF18 - NR23 - Channel 2 Frequency lo data (W)")]),e._v(" "),a("p",[e._v("Frequency's lower 8 bits of 11 bit data (x). Next 3 bits are in NR24\n($FF19).")]),e._v(" "),a("h4",{attrs:{id:"ff19-nr24-channel-2-frequency-hi-data-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff19-nr24-channel-2-frequency-hi-data-r-w"}},[e._v("#")]),e._v(" FF19 - NR24 - Channel 2 Frequency hi data (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)")]),a("br"),e._v(" "),a("code",[e._v("Bit 6   - Counter/consecutive selection (Read/Write)")]),a("br"),e._v(" "),a("code",[e._v("(1=Stop output when length in NR21 expires)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-0 - Frequency's higher 3 bits (x) (Write Only)")])]),e._v(" "),a("p",[e._v("Frequency = 131072/(2048-x) Hz")]),e._v(" "),a("h2",{attrs:{id:"sound-channel-3-wave-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-3-wave-output"}},[e._v("#")]),e._v(" Sound Channel 3 - Wave Output")]),e._v(" "),a("p",[e._v("This channel can be used to output digital sound, the length of the\nsample buffer (Wave RAM) is limited to 32 digits. This sound channel can\nbe also used to output normal tones when initializing the Wave RAM by a\nsquare wave. This channel doesn't have a volume envelope register.")]),e._v(" "),a("h4",{attrs:{id:"ff1a-nr30-channel-3-sound-on-off-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1a-nr30-channel-3-sound-on-off-r-w"}},[e._v("#")]),e._v(" FF1A - NR30 - Channel 3 Sound on/off (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7 - Sound Channel 3 Off  (0=Stop, 1=Playback)  (Read/Write)")])]),e._v(" "),a("h4",{attrs:{id:"ff1b-nr31-channel-3-sound-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1b-nr31-channel-3-sound-length"}},[e._v("#")]),e._v(" FF1B - NR31 - Channel 3 Sound Length")]),e._v(" "),a("p",[a("code",[e._v("Bit 7-0 - Sound length (t1: 0 - 255)")])]),e._v(" "),a("p",[e._v("Sound Length = (256-t1)*(1/256) seconds This value is used only if Bit\n6 in NR34 is set.")]),e._v(" "),a("h4",{attrs:{id:"ff1c-nr32-channel-3-select-output-level-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1c-nr32-channel-3-select-output-level-r-w"}},[e._v("#")]),e._v(" FF1C - NR32 - Channel 3 Select output level (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 6-5 - Select output level (Read/Write)")])]),e._v(" "),a("p",[e._v("Possible Output levels are:")]),e._v(" "),a("p",[a("code",[e._v("0: Mute (No sound)")]),a("br"),e._v(" "),a("code",[e._v("1: 100% Volume (Produce Wave Pattern RAM Data as it is)")]),a("br"),e._v(" "),a("code",[e._v("2:  50% Volume (Produce Wave Pattern RAM data shifted once to the right)")]),a("br"),e._v(" "),a("code",[e._v("3:  25% Volume (Produce Wave Pattern RAM data shifted twice to the right)")])]),e._v(" "),a("h4",{attrs:{id:"ff1d-nr33-channel-3-frequency-s-lower-data-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1d-nr33-channel-3-frequency-s-lower-data-w"}},[e._v("#")]),e._v(" FF1D - NR33 - Channel 3 Frequency's lower data (W)")]),e._v(" "),a("p",[e._v("Lower 8 bits of an 11 bit frequency (x).")]),e._v(" "),a("h4",{attrs:{id:"ff1e-nr34-channel-3-frequency-s-higher-data-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff1e-nr34-channel-3-frequency-s-higher-data-r-w"}},[e._v("#")]),e._v(" FF1E - NR34 - Channel 3 Frequency's higher data (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)")]),a("br"),e._v(" "),a("code",[e._v("Bit 6   - Counter/consecutive selection (Read/Write)")]),a("br"),e._v(" "),a("code",[e._v("(1=Stop output when length in NR31 expires)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-0 - Frequency's higher 3 bits (x) (Write Only)")])]),e._v(" "),a("p",[e._v("Frequency = 4194304/(64*(2048-x)) Hz = 65536/(2048-x) Hz")]),e._v(" "),a("h4",{attrs:{id:"ff30-ff3f-wave-pattern-ram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff30-ff3f-wave-pattern-ram"}},[e._v("#")]),e._v(" FF30-FF3F - Wave Pattern RAM")]),e._v(" "),a("p",[a("code",[e._v("Contents - Waveform storage for arbitrary sound data")])]),e._v(" "),a("p",[e._v("This storage area holds 32 4-bit samples that are played back, upper 4\nbits first.")]),e._v(" "),a("p",[e._v("Wave RAM should only be accessed while CH3 is disabled (NR30 bit 7\nreset), otherwise accesses will behave weirdly.")]),e._v(" "),a("p",[e._v("On almost all models, the byte will be written at the offset CH3 is\ncurrently reading. On GBA, the write will simply be ignored.")]),e._v(" "),a("h2",{attrs:{id:"sound-channel-4-noise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-channel-4-noise"}},[e._v("#")]),e._v(" Sound Channel 4 - Noise")]),e._v(" "),a("p",[e._v("This channel is used to output white noise. This is done by randomly\nswitching the amplitude between high and low at a given frequency.\nDepending on the frequency the noise will appear 'harder' or\n'softer'.")]),e._v(" "),a("p",[e._v("It is also possible to influence the function of the random generator,\nso the that the output becomes more regular, resulting in a limited\nability to output Tone instead of Noise.")]),e._v(" "),a("h4",{attrs:{id:"ff20-nr41-channel-4-sound-length-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff20-nr41-channel-4-sound-length-r-w"}},[e._v("#")]),e._v(" FF20 - NR41 - Channel 4 Sound Length (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 5-0 - Sound length data (t1: 0-63)")])]),e._v(" "),a("p",[e._v("Sound Length = (64-t1)*(1/256) seconds The Length value is used only if\nBit 6 in NR44 is set.")]),e._v(" "),a("h4",{attrs:{id:"ff21-nr42-channel-4-volume-envelope-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff21-nr42-channel-4-volume-envelope-r-w"}},[e._v("#")]),e._v(" FF21 - NR42 - Channel 4 Volume Envelope (R/W)")]),e._v(" "),a("p",[a("code",[e._v("Bit 7-4 - Initial Volume of envelope (0-0Fh) (0=No Sound)")]),a("br"),e._v(" "),a("code",[e._v("Bit 3   - Envelope Direction (0=Decrease, 1=Increase)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-0 - Number of envelope sweep (n: 0-7)")]),a("br"),e._v(" "),a("code",[e._v("(If zero, stop envelope operation.)")])]),e._v(" "),a("p",[e._v("Length of 1 step = n*(1/64) seconds")]),e._v(" "),a("h4",{attrs:{id:"ff22-nr43-channel-4-polynomial-counter-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff22-nr43-channel-4-polynomial-counter-r-w"}},[e._v("#")]),e._v(" FF22 - NR43 - Channel 4 Polynomial Counter (R/W)")]),e._v(" "),a("p",[e._v("The amplitude is randomly switched between high and low at the given\nfrequency. A higher frequency will make the noise to appear 'softer'.\nWhen Bit 3 is set, the output will become more regular, and some\nfrequencies will sound more like Tone than Noise.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7-4 - Shift Clock Frequency (s)\nBit 3   - Counter Step/Width (0=15 bits, 1=7 bits)\nBit 2-0 - Dividing Ratio of Frequencies (r)\n")])])]),a("p",[e._v("Frequency = 524288 Hz / r / 2^(s+1) ;For r=0 assume r=0.5 instead")]),e._v(" "),a("h4",{attrs:{id:"ff23-nr44-channel-4-counter-consecutive-inital-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff23-nr44-channel-4-counter-consecutive-inital-r-w"}},[e._v("#")]),e._v(" FF23 - NR44 - Channel 4 Counter/consecutive; Inital (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7   - Initial (1=Restart Sound)     (Write Only)\nBit 6   - Counter/consecutive selection (Read/Write)\n          (1=Stop output when length in NR41 expires)\n")])])]),a("h2",{attrs:{id:"sound-control-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-control-registers"}},[e._v("#")]),e._v(" Sound Control Registers")]),e._v(" "),a("h4",{attrs:{id:"ff24-nr50-channel-control-on-off-volume-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff24-nr50-channel-control-on-off-volume-r-w"}},[e._v("#")]),e._v(" FF24 - NR50 - Channel control / ON-OFF / Volume (R/W)")]),e._v(" "),a("p",[e._v('The volume bits specify the "Master Volume" for Left/Right sound\noutput. SO2 goes to the left headphone, and SO1 goes to the right.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7   - Output Vin to SO2 terminal (1=Enable)\nBit 6-4 - SO2 output level (volume)  (0-7)\nBit 3   - Output Vin to SO1 terminal (1=Enable)\nBit 2-0 - SO1 output level (volume)  (0-7)\n")])])]),a("p",[e._v("The Vin signal is an analog signal received from the game cartridge bus,\nallowing external hardware in the cartridge to supply a fifth sound\nchannel, additionally to the Game Boy's internal four channels. No\nlicensed games used this feature, and it was omitted from the Game Boy\nAdvance.")]),e._v(" "),a("p",[e._v("(Despite rumors, "),a("em",[e._v("Pocket Music")]),e._v(" does not use Vin. It blocks use on the\nGBA for a different reason: the developer couldn't figure out how to\nsilence buzzing associated with the wave channel's DAC.)")]),e._v(" "),a("h4",{attrs:{id:"ff25-nr51-selection-of-sound-output-terminal-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff25-nr51-selection-of-sound-output-terminal-r-w"}},[e._v("#")]),e._v(" FF25 - NR51 - Selection of Sound output terminal (R/W)")]),e._v(" "),a("p",[e._v("Each channel can be panned hard left, center, or hard right.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7 - Output sound 4 to SO2 terminal\nBit 6 - Output sound 3 to SO2 terminal\nBit 5 - Output sound 2 to SO2 terminal\nBit 4 - Output sound 1 to SO2 terminal\nBit 3 - Output sound 4 to SO1 terminal\nBit 2 - Output sound 3 to SO1 terminal\nBit 1 - Output sound 2 to SO1 terminal\nBit 0 - Output sound 1 to SO1 terminal\n")])])]),a("h4",{attrs:{id:"ff26-nr52-sound-on-off"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff26-nr52-sound-on-off"}},[e._v("#")]),e._v(" FF26 - NR52 - Sound on/off")]),e._v(" "),a("p",[e._v("If your GB programs don't use sound then write 00h to this register to\nsave 16% or more on GB power consumption. Disabeling the sound\ncontroller by clearing Bit 7 destroys the contents of all sound\nregisters. Also, it is not possible to access any sound registers\n(execpt FF26) while the sound controller is disabled.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" Bit 7 - All sound on/off  (0: stop all sound circuits) (Read/Write)\n Bit 3 - Sound 4 ON flag (Read Only)\n Bit 2 - Sound 3 ON flag (Read Only)\n Bit 1 - Sound 2 ON flag (Read Only)\n Bit 0 - Sound 1 ON flag (Read Only)\n")])])]),a("p",[e._v("Bits 0-3 of this register are read only status bits, writing to these\nbits does NOT enable/disable sound. The flags get set when sound output\nis restarted by setting the Initial flag (Bit 7 in NR14-NR44), the flag\nremains set until the sound length has expired (if enabled). A volume\nenvelopes which has decreased to zero volume will NOT cause the sound\nflag to go off.")]),e._v(" "),a("h2",{attrs:{id:"pitfalls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pitfalls"}},[e._v("#")]),e._v(" Pitfalls")]),e._v(" "),a("ul",[a("li",[e._v("Enabling or disabling a DAC (resetting NR30 bit 7 or writing %0000\n0XXX to NRx2 for other channels), adding or removing it using NR51,\nor changing the volume in NR50, will cause an audio pop. (This\ncauses a change in DC offset, which is smoothed out by a high-pass\ncircuit over time, but still creates a pop)")]),e._v(" "),a("li",[e._v('The final output goes through a high-pass filter, which is more\naggressive on GBA than on GBC, which is more aggressive than on DMG.\n(What this means is that the output is "pulled" towards 0V with\nvarious degrees of "aggressiveness")')]),e._v(" "),a("li",[e._v("When first starting up a pulse channel, it will "),a("em",[e._v("always")]),e._v(" output a\n(digital) zero.")]),e._v(" "),a("li",[e._v("The pulse channels' \"duty step\" (at which position in the duty\ncycle they are) can't be reset. The exception to this is turning\noff the APU, which causes them to start over from 0 when turning it\non.")]),e._v(" "),a("li",[e._v('Restarting a pulse channel causes its "duty step timer" to reset,\nmeaning that "tickling" a pulse channel regularly enough will\ncause its "duty step" to never advance.')]),e._v(" "),a("li",[e._v("When restarting CH3, it resumes playing the last 4-bit sample it\nread from wave RAM, or 0 if no sample has been read since APU reset.\n(Sample latching is independent of output level control in NR32.)\nAfter the latched sample completes, it starts with the second sample\nin wave RAM (low 4 bits of $FF30). The first sample (high 4 bits of\n$FF30) is played last.")]),e._v(" "),a("li",[e._v("CH3 output level control does not, in fact, alter the output level.\nIt shifts the "),a("strong",[e._v("digital")]),e._v(" value CH3 is outputting (read below), not\nthe analog value.")]),e._v(" "),a("li",[e._v('On GBA, CH3 is inverted. This causes the channel to output a loud\nspike when disabled; it\'s a good idea to "remove" the channel\nusing NR51 before refreshing wave RAM.')])]),e._v(" "),a("h2",{attrs:{id:"apu-technical-explanation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apu-technical-explanation"}},[e._v("#")]),e._v(" APU technical explanation")]),e._v(" "),a("h4",{attrs:{id:"game-boy-game-boy-color"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-game-boy-color"}},[e._v("#")]),e._v(" Game Boy, Game Boy Color")]),e._v(" "),a("p",[e._v('Each of the 4 channels work pretty identically. First, there\'s a\n"generation" circuit, which usually outputs either a 0 or another\nvalue (CH3 differs in that it can output multiple values, but\nregardless). That value is digital, and can range between 0 and 0xF.\nThis is then fed to a\n'),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Digital-to-analog_converter",target:"_blank",rel:"noopener noreferrer"}},[e._v("DAC"),a("OutboundLink")],1),e._v(", which\nmaps this to an analog value; 7 maps to the lowest (negative) voltage, 0\nto the highest (positive) one. Finally, all channels are mixed through\nNR51, scaled through NR50, and sent to the output.")]),e._v(" "),a("p",[e._v("Each DAC is controlled independently from the generation circuit. For\nCH3, the DAC is controlled by NR30 bit 7; for other channels, the DAC is\nturned on unless bits 3-7 of NRx2 are reset, and the envelope will be\nset to "),a("code",[e._v("[NRx2] >> 4")]),e._v(". (Note: the envelope sweep function changes the\nenvelope, but not the value in NRx2! It won't disable the DAC, either.)\nThe generation circuits are turned on by restarting them for the first\ntime, and this is what sets the corresponding bit in NR52. Yes, it's\npossible to turn on a DAC but not the generation circuit. Finally,\ndisabling a DAC also kills the generation circuit.")]),e._v(" "),a("p",[e._v("Note that each DAC has a DC offset, so enabling, disabling, adding to or\nremoving from NR51, will all cause an audio pop; changing the volume in\nNR50 will as well.")]),e._v(" "),a("p",[e._v("Finally, all the output goes through a high-pass filter to remove the DC\noffsets from the DACs.")]),e._v(" "),a("h4",{attrs:{id:"game-boy-advance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#game-boy-advance"}},[e._v("#")]),e._v(" Game Boy Advance")]),e._v(" "),a("p",[e._v("The APU was reworked pretty heavily for the GBA. Instead of mixing being\ndone analogically, it's instead done digitally; then, sound is\nconverted to an analog signal and an offset is added (see SOUNDBIAS in\n"),a("a",{attrs:{href:"http://problemkaputt.de/gbatek.htm#gbasoundcontrolregisters",target:"_blank",rel:"noopener noreferrer"}},[e._v("GBATEK"),a("OutboundLink")],1),e._v("\nfor more details.")]),e._v(" "),a("p",[e._v("This means that the APU has no DACs, or if modelling the GBA as a GB,\nthey're always on.")]),e._v(" "),a("h1",{attrs:{id:"joypad-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joypad-input"}},[e._v("#")]),e._v(" Joypad Input")]),e._v(" "),a("h4",{attrs:{id:"ff00-p1-joyp-joypad-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff00-p1-joyp-joypad-r-w"}},[e._v("#")]),e._v(" FF00 - P1/JOYP - Joypad (R/W)")]),e._v(" "),a("p",[e._v("The eight Game Boy buttons/direction keys are arranged in form of a 2x4\nmatrix. Select either button or direction keys by writing to this\nregister, then read-out bit 0-3.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7 - Not used\nBit 6 - Not used\nBit 5 - P15 Select Button Keys      (0=Select)\nBit 4 - P14 Select Direction Keys   (0=Select)\nBit 3 - P13 Input Down  or Start    (0=Pressed) (Read Only)\nBit 2 - P12 Input Up    or Select   (0=Pressed) (Read Only)\nBit 1 - P11 Input Left  or Button B (0=Pressed) (Read Only)\nBit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),a("p",[e._v("Most programs are repeatedly reading from this port several times\n(the first reads used as short delay, allowing the inputs to stabilize,\nand only the value from the last read actually used).")])]),e._v(" "),a("h4",{attrs:{id:"usage-in-sgb-software"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-in-sgb-software"}},[e._v("#")]),e._v(" Usage in SGB software")]),e._v(" "),a("p",[e._v("Beside for normal joypad input, SGB games mis-use the joypad register to\noutput SGB command packets to the SNES, also, SGB programs may read out\ngamepad states from up to four different joypads which can be connected\nto the SNES. See SGB description for details.")]),e._v(" "),a("h4",{attrs:{id:"int-60-joypad-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-60-joypad-interrupt"}},[e._v("#")]),e._v(" INT 60 - Joypad Interrupt")]),e._v(" "),a("p",[e._v("Joypad interrupt is requested when any of the above Input lines changes\nfrom High to Low. Generally this should happen when a key becomes\npressed (provided that the button/direction key is enabled by above\nBit4/5), however, because of switch bounce, one or more High to Low\ntransitions are usually produced both when pressing or releasing a key.")]),e._v(" "),a("h4",{attrs:{id:"using-the-joypad-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-joypad-interrupt"}},[e._v("#")]),e._v(" Using the Joypad Interrupt")]),e._v(" "),a("p",[e._v("It's more or less useless for programmers, even when selecting both\nbuttons and direction keys simultaneously it still cannot recognize all\nkeystrokes, because in that case a bit might be already held low by a\nbutton key, and pressing the corresponding direction key would thus\ncause no difference. The only meaningful purpose of the keystroke\ninterrupt would be to terminate STOP (low power) standby state. GBA SP,\nbecause of the different buttons used, seems to not be affected by\nswitch bounce.")]),e._v(" "),a("h1",{attrs:{id:"serial-data-transfer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-data-transfer"}},[e._v("#")]),e._v(" Serial Data Transfer")]),e._v(" "),a("p",[e._v("Communication between two Gameboys happens one byte at a time. One\nGameboy acts as the master, uses its internal clock, and thus controls\nwhen the exchange happens. The other one uses an external clock (i.e.,\nthe one inside the other Gameboy) and has no control over when the\ntransfer happens. If it hasn't gotten around to loading up the next\ndata byte at the time the transfer begins, the last one will go out\nagain. Alternately, if it's ready to send the next byte but the last\none hasn't gone out yet, it has no choice but to wait.")]),e._v(" "),a("h4",{attrs:{id:"ff01-sb-serial-transfer-data-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff01-sb-serial-transfer-data-r-w"}},[e._v("#")]),e._v(" FF01 - SB - Serial transfer data (R/W)")]),e._v(" "),a("p",[e._v("Before a transfer, it holds the next byte that will go out.")]),e._v(" "),a("p",[e._v("During a transfer, it has a blend of the outgoing and incoming bytes.\nEach cycle, the leftmost bit is shifted out (and over the wire) and the\nincoming bit is shifted in from the other side:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("o7 o6 o5 o4 o3 o2 o1 o0\no6 o5 o4 o3 o2 o1 o0 i7\no5 o4 o3 o2 o1 o0 i7 i6\no4 o3 o2 o1 o0 i7 i6 i5\no3 o2 o1 o0 i7 i6 i5 i4\no2 o1 o0 i7 i6 i5 i4 i3\no1 o0 i7 i6 i5 i4 i3 i2\no0 i7 i6 i5 i4 i3 i2 i1\ni7 i6 i5 i4 i3 i2 i1 i0\n")])])]),a("h4",{attrs:{id:"ff02-sc-serial-transfer-control-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff02-sc-serial-transfer-control-r-w"}},[e._v("#")]),e._v(" FF02 - SC - Serial Transfer Control (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 7 - Transfer Start Flag (0=No transfer is in progress or requested, 1=Transfer in progress, or requested)\nBit 1 - Clock Speed (0=Normal, 1=Fast) ** CGB Mode Only **\nBit 0 - Shift Clock (0=External Clock, 1=Internal Clock)\n")])])]),a("p",[e._v("The Game Boy acting as master will load up a data byte in SB and then set\nSC to 0x81 (Transfer requested, use internal clock). It will be notified\nthat the transfer is complete in two ways: SC's Bit 7 will be cleared\n(i.e., SC will be set up 0x01), and also the Serial Interrupt handler\nwill be called (i.e., the CPU will jump to 0x0058).")]),e._v(" "),a("p",[e._v("The other Game Boy will load up a data byte and can optionally set SC's\nBit 7 (i.e., SC=0x80). Regardless of whether or not it has done this, if\nand when the master Game Boy wants to conduct a transfer, it will happen\n(pulling whatever happens to be in SB at that time). The passive gameboy\nwill have its serial interrupt handler called at the end of the\ntransfer, and if it bothered to set SC's Bit 7, it will be cleared.")]),e._v(" "),a("h4",{attrs:{id:"internal-clock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#internal-clock"}},[e._v("#")]),e._v(" Internal Clock")]),e._v(" "),a("p",[e._v("In Non-CGB Mode the Game Boy supplies an internal clock of 8192Hz only\n(allowing to transfer about 1 KByte per second). In CGB Mode four\ninternal clock rates are available, depending on Bit 1 of the SC\nregister, and on whether the CGB Double Speed Mode is used:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   8192Hz -  1KB/s - Bit 1 cleared, Normal\n  16384Hz -  2KB/s - Bit 1 cleared, Double Speed Mode\n 262144Hz - 32KB/s - Bit 1 set,     Normal\n 524288Hz - 64KB/s - Bit 1 set,     Double Speed Mode\n")])])]),a("h4",{attrs:{id:"external-clock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-clock"}},[e._v("#")]),e._v(" External Clock")]),e._v(" "),a("p",[e._v('The external clock is typically supplied by another gameboy, but might\nbe supplied by another computer (for example if connected to a PCs\nparallel port), in that case the external clock may have any speed. Even\nthe old/monochrome Game Boy is reported to recognizes external clocks of\nup to 500KHz. And there is no limitation into the other direction - even\nwhen suppling an external clock speed of "1 bit per month", then the\ngameboy will still eagerly wait for the next bit(s) to be transferred.\nIt isn\'t required that the clock pulses are sent at an regular interval\neither.')]),e._v(" "),a("h4",{attrs:{id:"timeouts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeouts"}},[e._v("#")]),e._v(" Timeouts")]),e._v(" "),a("p",[e._v("When using external clock then the transfer will not complete until the\nlast bit is received. In case that the second Game Boy isn't supplying a\nclock signal, if it gets turned off, or if there is no second gameboy\nconnected at all) then transfer will never complete. For this reason the\ntransfer procedure should use a timeout counter, and abort the\ncommunication if no response has been received during the timeout\ninterval.")]),e._v(" "),a("h4",{attrs:{id:"delays-and-synchronization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delays-and-synchronization"}},[e._v("#")]),e._v(" Delays and Synchronization")]),e._v(" "),a("p",[e._v("The Game Boy that is using internal clock should always execute a small\ndelay between each transfer, in order to ensure that the opponent\ngameboy has enough time to prepare itself for the next transfer, ie. the\ngameboy with external clock must have set its transfer start bit before\nthe Game Boy with internal clock starts the transfer. Alternately, the\ntwo gameboys could switch between internal and external clock for each\ntransferred byte to ensure synchronization.")]),e._v(" "),a("p",[e._v("Transfer is initiated by setting the master Game Boy setting its Transfer\nStart Flag, regardless of the value of this flag on the other device.\nThis bit is automatically set to 0 (on both) at the end of Transfer.\nReading this bit can be used to determine if the transfer is still\nactive.")]),e._v(" "),a("h4",{attrs:{id:"int-58-serial-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-58-serial-interrupt"}},[e._v("#")]),e._v(" INT 58 - Serial Interrupt")]),e._v(" "),a("p",[e._v("When the transfer has completed (ie. after sending/receiving 8 bits, if\nany) then an interrupt is requested by setting Bit 3 of the IF Register\n(FF0F). When that interrupt is enabled, then the Serial Interrupt vector\nat 0058 is called.")]),e._v(" "),a("p",[a("strong",[e._v("XXXXXX...")])]),e._v(" "),a("p",[e._v("Transmitting and receiving serial data is done simultaneously. The\nreceived data is automatically stored in SB.")]),e._v(" "),a("p",[e._v("The serial I/O port on the Game Boy is a very simple setup and is crude\ncompared to standard RS-232 (IBM-PC) or RS-485 (Macintosh) serial ports.\nThere are no start or stop bits.")]),e._v(" "),a("p",[e._v("During a transfer, a byte is shifted in at the same time that a byte is\nshifted out. The rate of the shift is determined by whether the clock\nsource is internal or external. The most significant bit is shifted in\nand out first.")]),e._v(" "),a("p",[e._v("When the internal clock is selected, it drives the clock pin on the game\nlink port and it stays high when not used. During a transfer it will go\nlow eight times to clock in/out each bit.")]),e._v(" "),a("p",[e._v("The state of the last bit shifted out determines the state of the output\nline until another transfer takes place.")]),e._v(" "),a("p",[e._v("If a serial transfer with internal clock is performed and no external\nGameBoy is present, a value of $FF will be received in the transfer.")]),e._v(" "),a("p",[e._v("The following code initiates the process of shifting $75 out the serial\nport and a byte to be shifted into $FF01:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   ld   a,$75\n   ld  ($FF01),a\n   ld   a,$81\n   ld  ($FF02),a\n")])])]),a("p",[e._v("The Game Boy does not support wake-on-LAN. Completion of an externally\nclocked serial transfer does not exit STOP mode.")]),e._v(" "),a("h1",{attrs:{id:"timer-and-divider-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-and-divider-registers"}},[e._v("#")]),e._v(" Timer and Divider Registers")]),e._v(" "),a("h4",{attrs:{id:"ff04-div-divider-register-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff04-div-divider-register-r-w"}},[e._v("#")]),e._v(" FF04 - DIV - Divider Register (R/W)")]),e._v(" "),a("p",[e._v("This register is incremented at rate of 16384Hz (~16779Hz on SGB).\nWriting any value to this register resets it to 00h.")]),e._v(" "),a("p",[e._v("Note: The divider is affected by CGB double speed mode, and will\nincrement at 32768Hz in double speed.")]),e._v(" "),a("h4",{attrs:{id:"ff05-tima-timer-counter-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff05-tima-timer-counter-r-w"}},[e._v("#")]),e._v(" FF05 - TIMA - Timer counter (R/W)")]),e._v(" "),a("p",[e._v("This timer is incremented by a clock frequency specified by the TAC\nregister ($FF07). When the value overflows (gets bigger than FFh) then\nit will be reset to the value specified in TMA (FF06), and an interrupt\nwill be requested, as described below.")]),e._v(" "),a("h4",{attrs:{id:"ff06-tma-timer-modulo-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff06-tma-timer-modulo-r-w"}},[e._v("#")]),e._v(" FF06 - TMA - Timer Modulo (R/W)")]),e._v(" "),a("p",[e._v("When the TIMA overflows, this data will be loaded.")]),e._v(" "),a("h4",{attrs:{id:"ff07-tac-timer-control-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff07-tac-timer-control-r-w"}},[e._v("#")]),e._v(" FF07 - TAC - Timer Control (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit  2   - Timer Enable\nBits 1-0 - Input Clock Select\n           00: CPU Clock / 1024 (DMG, CGB:   4096 Hz, SGB:   ~4194 Hz)\n           01: CPU Clock / 16   (DMG, CGB: 262144 Hz, SGB: ~268400 Hz)\n           10: CPU Clock / 64   (DMG, CGB:  65536 Hz, SGB:  ~67110 Hz)\n           11: CPU Clock / 256  (DMG, CGB:  16384 Hz, SGB:  ~16780 Hz)\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),a("p",[e._v('The "Timer Enable" bit only affects the timer, the divider is '),a("strong",[e._v("always")]),e._v(" counting")])]),e._v(" "),a("h4",{attrs:{id:"int-50-timer-interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int-50-timer-interrupt"}},[e._v("#")]),e._v(" INT 50 - Timer Interrupt")]),e._v(" "),a("p",[e._v("Each time when the timer overflows (ie. when TIMA gets bigger than FFh),\nthen an interrupt is requested by setting Bit 2 in the IF Register\n(FF0F). When that interrupt is enabled, then the CPU will execute it by\ncalling the timer interrupt vector at 0050h.")]),e._v(" "),a("h4",{attrs:{id:"timer-obscure-behaviour"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timer-obscure-behaviour"}},[e._v("#")]),e._v(" Timer Obscure Behaviour")]),e._v(" "),a("p",[e._v("Read this page for a more detailed description of what the registers do:\n"),a("a",{attrs:{href:"Timer_Obscure_Behaviour",title:"wikilink"}},[e._v("Timer Obscure Behaviour")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),a("p",[e._v("The above described Timer is the built-in timer in the gameboy. It has\nnothing to do with the MBC3s battery buffered Real Time Clock - that's\na completely different thing, described in the chapter about Memory\nBanking Controllers.")])]),e._v(" "),a("h1",{attrs:{id:"interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupts"}},[e._v("#")]),e._v(" Interrupts")]),e._v(" "),a("h4",{attrs:{id:"ime-interrupt-master-enable-flag-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ime-interrupt-master-enable-flag-write-only"}},[e._v("#")]),e._v(" IME - Interrupt Master Enable Flag (Write Only)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0 - Disable all Interrupts\n1 - Enable all Interrupts that are enabled in IE Register (FFFF)\n")])])]),a("p",[e._v("The IME flag is used to disable all interrupts, overriding any enabled\nbits in the IE Register. It isn't possible to access the IME flag by\nusing a I/O address, instead IME is accessed directly from the CPU, by\nthe following opcodes/operations:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EI     ;Enable Interrupts  (ie. IME=1)\nDI     ;Disable Interrupts (ie. IME=0)\nRETI   ;Enable Ints & Return (same as the opcode combination EI, RET)\n<INT>  ;Disable Ints & Call to Interrupt Vector\n")])])]),a("p",[e._v("Whereas <INT> means the operation which is automatically executed by the\nCPU when it executes an interrupt.")]),e._v(" "),a("p",[e._v("The effect of EI is delayed by one instruction. This means that EI\nfollowed immediately by DI does not allow interrupts between the EI and\nthe DI.")]),e._v(" "),a("h4",{attrs:{id:"ffff-ie-interrupt-enable-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ffff-ie-interrupt-enable-r-w"}},[e._v("#")]),e._v(" FFFF - IE - Interrupt Enable (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 0: V-Blank  Interrupt Enable  (INT 40h)  (1=Enable)\nBit 1: LCD STAT Interrupt Enable  (INT 48h)  (1=Enable)\nBit 2: Timer    Interrupt Enable  (INT 50h)  (1=Enable)\nBit 3: Serial   Interrupt Enable  (INT 58h)  (1=Enable)\nBit 4: Joypad   Interrupt Enable  (INT 60h)  (1=Enable)\n")])])]),a("h4",{attrs:{id:"ff0f-if-interrupt-flag-r-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff0f-if-interrupt-flag-r-w"}},[e._v("#")]),e._v(" FF0F - IF - Interrupt Flag (R/W)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bit 0: V-Blank  Interrupt Request (INT 40h)  (1=Request)\nBit 1: LCD STAT Interrupt Request (INT 48h)  (1=Request)\nBit 2: Timer    Interrupt Request (INT 50h)  (1=Request)\nBit 3: Serial   Interrupt Request (INT 58h)  (1=Request)\nBit 4: Joypad   Interrupt Request (INT 60h)  (1=Request)\n")])])]),a("p",[e._v("When an interrupt signal changes from low to high, then the\ncorresponding bit in the IF register becomes set. For example, Bit 0\nbecomes set when the LCD controller enters into the V-Blank period.")]),e._v(" "),a("h4",{attrs:{id:"interrupt-requests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-requests"}},[e._v("#")]),e._v(" Interrupt Requests")]),e._v(" "),a("p",[e._v("Any set bits in the IF register are only "),a("strong",[e._v("requesting")]),e._v(" an interrupt to be\nexecuted. The actual "),a("strong",[e._v("execution")]),e._v(" happens only if both the IME flag, and\nthe corresponding bit in the IE register are set, otherwise the\ninterrupt 'waits' until both IME and IE allow its execution.")]),e._v(" "),a("h4",{attrs:{id:"interrupt-execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-execution"}},[e._v("#")]),e._v(" Interrupt Execution")]),e._v(" "),a("p",[e._v("When an interrupt gets executed, the corresponding bit in the IF\nregister becomes automatically reset by the CPU, and the IME flag\nbecomes cleared (disabeling any further interrupts until the program\nre-enables the interrupts, typically by using the RETI instruction), and\nthe corresponding Interrupt Vector (that are the addresses in range\n0040h-0060h, as shown in IE and IF register decriptions above) becomes\ncalled.")]),e._v(" "),a("h4",{attrs:{id:"manually-requesting-discarding-interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manually-requesting-discarding-interrupts"}},[e._v("#")]),e._v(" Manually Requesting/Discarding Interrupts")]),e._v(" "),a("p",[e._v("As the CPU automatically sets and cleares the bits in the IF register it\nis usually not required to write to the IF register. However, the user\nmay still do that in order to manually request (or discard) interrupts.\nAs for real interrupts, a manually requested interrupt isn't executed\nunless/until IME and IE allow its execution.")]),e._v(" "),a("h4",{attrs:{id:"interrupt-priorities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-priorities"}},[e._v("#")]),e._v(" Interrupt Priorities")]),e._v(" "),a("p",[e._v("In the following three situations it might happen that more than 1 bit in the IF register are set, requesting more than one interrupt at once:")]),e._v(" "),a("ol",[a("li",[e._v("More than one interrupt signal changed from Low to High at the same time.")]),e._v(" "),a("li",[e._v("Several interrupts have been requested during a time in which IME/IE didn't allow these interrupts to be executed directly.")]),e._v(" "),a("li",[e._v('The user has written a value with several "1" bits (for example 1Fh) to the IF register.')])]),e._v(" "),a("p",[e._v("Provided that IME and IE allow the execution of more than one of the\nrequested interrupts, then the interrupt with the highest priority\nbecomes executed first. The priorities are ordered as the bits in the IE\nand IF registers, Bit 0 (V-Blank) having the highest priority, and Bit 4\n(Joypad) having the lowest priority.")]),e._v(" "),a("h4",{attrs:{id:"nested-interrupts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nested-interrupts"}},[e._v("#")]),e._v(" Nested Interrupts")]),e._v(" "),a("p",[e._v("The CPU automatically disables all other interrupts by setting IME=0\nwhen it executes an interrupt. Usually IME remains zero until the\ninterrupt procedure returns (and sets IME=1 by the RETI instruction).\nHowever, if you want any other interrupts of lower or higher (or same)\npriority to be allowed to be executed from inside of the interrupt\nprocedure, then you can place an EI instruction into the interrupt\nprocedure.")]),e._v(" "),a("h4",{attrs:{id:"interrupt-service-routine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-service-routine"}},[e._v("#")]),e._v(" Interrupt Service Routine")]),e._v(" "),a("p",[e._v("According to Z80 datasheets, the following occurs when control is being\ntransferred to an interrupt handler:")]),e._v(" "),a("ol",[a("li",[e._v("Two wait states are executed (2 machine cycles pass while nothing\noccurs, presumably the CPU is executing NOPs during this time).")]),e._v(" "),a("li",[e._v("The current PC is pushed onto the stack, this process consumes 2 more\nmachine cycles.")]),e._v(" "),a("li",[e._v("The high byte of the PC is set to 0, the low byte is set to the\naddress of the handler ($40,$48,$50,$58,$60). This consumes one\nlast machine cycle.")])]),e._v(" "),a("p",[e._v("The entire ISR "),a("strong",[e._v("should")]),e._v(" consume a total of 5 machine cycles. This has\nyet to be tested, but is what the Z80 datasheet implies.")]),e._v(" "),a("h1",{attrs:{id:"sgb-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-functions"}},[e._v("#")]),e._v(" SGB Functions")]),e._v(" "),a("h2",{attrs:{id:"sgb-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-description"}},[e._v("#")]),e._v(" SGB Description")]),e._v(" "),a("h4",{attrs:{id:"general-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-description"}},[e._v("#")]),e._v(" General Description")]),e._v(" "),a("p",[e._v("Basically, the SGB (Super Gameboy) is an adapter cartridge that allows\nto play Game Boy games on a SNES (Super Nintendo Entertainment System)\ngaming console. In detail, you plug the Game Boy cartridge into the SGB\ncartridge, then plug the SGB cartridge into the SNES, and then connect\nthe SNES to your TV Set. In result, games can be played and viewed on\nthe TV Set, and are controlled by using the SNES joypad(s).")]),e._v(" "),a("h4",{attrs:{id:"more-technical-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-technical-description"}},[e._v("#")]),e._v(" More Technical Description")]),e._v(" "),a("p",[e._v("The SGB cartridge just contains a normal Game Boy CPU and normal gameboy\nvideo controller. Normally the video signal from this controller would\nbe sent to the LCD screen, however, in this special case the SNES read\nout the video signal and displays it on the TV set by using a special\nSNES BIOS ROM which is located in the SGB cartridge. Also, normal\ngameboy sound output is forwared to the SNES and output to the TV Set,\nvice versa, joypad input is forwared from the SNES controller(s) to the\ngameboy joypad inputs.")]),e._v(" "),a("h4",{attrs:{id:"normal-monochrome-games"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normal-monochrome-games"}},[e._v("#")]),e._v(" Normal Monochrome Games")]),e._v(" "),a("p",[e._v("Any Game Boy games which have been designed for normal monochrome\nhandheld gameboys will work with the SGB hardware as well. The SGB will\napply a four color palette to these games by replacing the normal four\ngrayshades. The 160x144 pixel gamescreen is displayed in the middle of\nthe 256x224 pixel SNES screen (the unused area is filled by a screen\nborder bitmap). The user may access built-in menues, allowing to change\ncolor palette data, to select between several pre-defined borders, etc.")]),e._v(" "),a("p",[e._v("Games that have been designed to support SGB functions may also access\nthe following additional features:")]),e._v(" "),a("h4",{attrs:{id:"colorized-game-screen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#colorized-game-screen"}},[e._v("#")]),e._v(" Colorized Game Screen")]),e._v(" "),a("p",[e._v("There's limited ability to colorize the gamescreen by assigning custom\ncolor palettes to each 20x18 display characters, however, this works\nmainly for static display data such like title screens or status bars,\nthe 20x18 color attribute map is non-scrollable, and it is not possible\nto assign separate colors to moveable foreground sprites (OBJs), so that\nanimated screen regions will be typically restricted to using a single\npalette of four colors only.")]),e._v(" "),a("h4",{attrs:{id:"snes-foreground-sprites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snes-foreground-sprites"}},[e._v("#")]),e._v(" SNES Foreground Sprites")]),e._v(" "),a("p",[e._v("Up to 24 foreground sprites (OBJs) of 8x8 or 16x16 pixels, 16 colors can\nbe displayed. When replacing (or just overlaying) the normal gameboy\nOBJs by SNES OBJs it'd be thus possible to display OBJs with other\ncolors than normal background area. This method doesn't appear to be\nvery popular, even though it appears to be quite easy to implement,\nhowever, the bottommost character line of the gamescreen will be masked\nout because this area is used to transfer OAM data to the SNES.")]),e._v(" "),a("h4",{attrs:{id:"the-sgb-border"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-sgb-border"}},[e._v("#")]),e._v(" The SGB Border")]),e._v(" "),a("p",[e._v("The possibly most popular and most impressive feature is to replace the\ndefault SGB screen border by a custom bitmap which is stored in the game\ncartridge.")]),e._v(" "),a("h4",{attrs:{id:"multiple-joypads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-joypads"}},[e._v("#")]),e._v(" Multiple Joypads")]),e._v(" "),a("p",[e._v("Up to four joypads can be conected to the SNES, and SGB software may\nread-out each of these joypads separately, allowing up to four players\nto play the same game simultaneously. Unlike for multiplayer handheld\ngames, this requires only one game cartridge and only one SGB/SNES, and\nno link cables are required, the downside is that all players must share\nthe same display screen.")]),e._v(" "),a("h4",{attrs:{id:"sound-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-functions"}},[e._v("#")]),e._v(" Sound Functions")]),e._v(" "),a("p",[e._v("Beside for normal Game Boy sound, a number of digital sound effects is\npre-defined in the SNES BIOS, these effects may be accessed quite\neasily. Programmers whom are familiar with SNES sounds may also access\nthe SNES sound chip, or use the SNES MIDI engine directly in order to\nproduce other sound effects or music.")]),e._v(" "),a("h4",{attrs:{id:"taking-control-of-the-snes-cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taking-control-of-the-snes-cpu"}},[e._v("#")]),e._v(" Taking Control of the SNES CPU")]),e._v(" "),a("p",[e._v("Finally, it is possible to write program code or data into SNES memory,\nand to execute such program code by using the SNES CPU.")]),e._v(" "),a("h4",{attrs:{id:"sgb-system-clock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-system-clock"}},[e._v("#")]),e._v(" SGB System Clock")]),e._v(" "),a("p",[e._v("Because the SGB is synchronized to the SNES CPU, the Game Boy system\nclock is directly chained to the SNES system clock. In result, the\ngameboy CPU, video controller, timers, and sound frequencies will be all\noperated approx 2.4% faster as by normal gameboys. Basically, this\nshould be no problem, and the game will just run a little bit faster.\nHowever sensitive musicians may notice that sound frequencies are a bit\ntoo high, programs that support SGB functions may avoid this effect by\nreducing frequencies of Game Boy sounds when having detected SGB\nhardware. Also, I think that I've heard that SNES models which use a\n50Hz display refresh rate (rather than 60Hz) are resulting in\nrespectively slower SGB/gameboy timings ???")]),e._v(" "),a("h2",{attrs:{id:"sgb-unlocking-and-detecting-sgb-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-unlocking-and-detecting-sgb-functions"}},[e._v("#")]),e._v(" SGB Unlocking and Detecting SGB Functions")]),e._v(" "),a("h4",{attrs:{id:"cartridge-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cartridge-header"}},[e._v("#")]),e._v(" Cartridge Header")]),e._v(" "),a("p",[e._v("SGB games are required to have a cartridge header with Nintendo and\nproper checksum just as normal Game Boy games. Also, two special entries\nmust be set in order to unlock SGB functions:")]),e._v(" "),a("p",[a("code",[e._v("146h - SGB Flag - Must be set to 03h for SGB games")]),a("br"),e._v(" "),a("code",[e._v("14Bh - Old Licensee Code - Must be set 33h for SGB games")])]),e._v(" "),a("p",[e._v("When these entries aren't set, the game will still work just like all\n'monochrome' Game Boy games, but it cannot access any of the special\nSGB functions.")]),e._v(" "),a("h4",{attrs:{id:"detecting-sgb-hardware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detecting-sgb-hardware"}},[e._v("#")]),e._v(" Detecting SGB hardware")]),e._v(" "),a("p",[e._v("The recommended detection method is to send a MLT_REQ command which\nenables two (or four) joypads. A normal handheld Game Boy will ignore\nthis command, a SGB will now return incrementing joypad IDs each time\nwhen deselecting keyboard lines (see MLT_REQ description for details).\nNow read-out joypad state/IDs several times, and if the ID-numbers are\nchanging, then it is a SGB (a normal Game Boy would typically always\nreturn 0Fh as ID). Finally, when not intending to use more than one\njoypad, send another MLT_REQ command in order to re-disable the\nmulti-controller mode. Detection works regardless of whether and how\nmany joypads are physically connected to the SNES. However, detection\nworks only when having unlocked SGB functions in the cartridge header,\nas described above.")]),e._v(" "),a("h4",{attrs:{id:"separating-between-sgb-and-sgb2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#separating-between-sgb-and-sgb2"}},[e._v("#")]),e._v(" Separating between SGB and SGB2")]),e._v(" "),a("p",[e._v("It is also possible to separate between SGB and SGB2 models by examining\nthe inital value of the accumulator (A-register) directly after startup.")]),e._v(" "),a("p",[a("code",[e._v("01h  SGB or Normal Gameboy (DMG)")]),a("br"),e._v(" "),a("code",[e._v("FFh  SGB2 or Pocket Gameboy")]),a("br"),e._v(" "),a("code",[e._v("11h  CGB or GBA")])]),e._v(" "),a("p",[e._v("Because values 01h and FFh are shared for both handhelds and SGBs, it is\nstill required to use the above MLT_REQ detection procedure. As far as\nI know the SGB2 doesn't have any extra features which'd require\nseparate SGB2 detection except for curiosity purposes, for example, the\ngame \"Tetris DX\" chooses to display an alternate SGB border on SGB2s.")]),e._v(" "),a("p",[e._v("Reportedly, some SGB models include link ports (just like handheld\ngameboy) (my own SGB does not have such an port), possibly this feature\nis available in SGB2-type models only ???")]),e._v(" "),a("h2",{attrs:{id:"sgb-command-packet-transfers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-packet-transfers"}},[e._v("#")]),e._v(" SGB Command Packet Transfers")]),e._v(" "),a("p",[e._v("Command packets (aka Register Files) are transferred from the Game Boy to\nthe SNES by using P14 and P15 output lines of the JOYPAD register\n(FF00h), these lines are normally used to select the two rows in the\ngameboy keyboard matrix (which still works).")]),e._v(" "),a("h4",{attrs:{id:"transferring-bits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transferring-bits"}},[e._v("#")]),e._v(" Transferring Bits")]),e._v(" "),a("p",[e._v('A command packet transfer must be initiated by setting both P14 and P15\nto LOW, this will reset and start the SNES packet receiving program.\nData is then transferred (LSB first), setting P14=LOW will indicate a\n"0" bit, and setting P15=LOW will indicate a "1" bit. For example:')]),e._v(" "),a("p",[a("code",[e._v("RESET 0   0   1   1   0   1   0")]),a("br"),e._v(" "),a("code",[e._v("P14  --_---_---_-----------_-------_--...")]),a("br"),e._v(" "),a("code",[e._v("P15  --_-----------_---_-------_------...")])]),e._v(" "),a("p",[e._v("Data and reset pulses must be kept LOW for at least 5us. P14 and P15\nmust be kept both HIGH for at least 15us between any pulses. Obviously,\nit'd be no good idea to access the JOYPAD register during the transfer,\nfor example, in case that your VBlank interrupt procedure reads-out\njoypad states each frame, be sure to disable that interrupt during the\ntransfer (or disable only the joypad procedure by using a software\nflag).")]),e._v(" "),a("h4",{attrs:{id:"transferring-packets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transferring-packets"}},[e._v("#")]),e._v(" Transferring Packets")]),e._v(" "),a("p",[e._v('Each packet is invoked by a RESET pulse, then 128 bits of data are\ntransferred (16 bytes, LSB of first byte first), and finally, a\n"0"-bit must be transferred as stop bit. The structure of normal\npackets is:')]),e._v(" "),a("p",[a("code",[e._v("1 PULSE Reset")]),a("br"),e._v(" "),a("code",[e._v("1 BYTE  Command Code*8+Length")]),a("br"),e._v(" "),a("code",[e._v("15 BYTES Parameter Data")]),a("br"),e._v(" "),a("code",[e._v("1 BIT   Stop Bit (0)")])]),e._v(" "),a("p",[e._v("The above 'Length' indicates the total number of packets (1-7,\nincluding the first packet) which will be sent, ie. if more than 15\nparameter bytes are used, then further packet(s) will follow, as such:")]),e._v(" "),a("p",[a("code",[e._v("1 PULSE Reset")]),a("br"),e._v(" "),a("code",[e._v("16 BYTES Parameter Data")]),a("br"),e._v(" "),a("code",[e._v("1 BIT   Stop Bit (0)")])]),e._v(" "),a("p",[e._v("By using all 7 packets, up to 111 data bytes (15+16*6) may be sent.\nUnused bytes at the end of the last packet don't matter. A 60ms (4\nframes) delay should be invoked between each packet transfer.")]),e._v(" "),a("h2",{attrs:{id:"sgb-vram-transfers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-vram-transfers"}},[e._v("#")]),e._v(" SGB VRAM Transfers")]),e._v(" "),a("h4",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("Beside for the packet transfer method, larger data blocks of 4KBytes can\nbe transferred by using the video signal. These transfers are invoked by\nfirst sending one of the commands with the ending _TRN (by using normal\npacket transfer), the 4K data block is then read-out by the SNES from\ngameboy display memory during the next frame.")]),e._v(" "),a("h4",{attrs:{id:"transfer-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-data"}},[e._v("#")]),e._v(" Transfer Data")]),e._v(" "),a("p",[e._v("Normally, transfer data should be stored at 8000h-8FFFh in Game Boy VRAM,\neven though the SNES receives the data in from display scanlines, it\nwill automatically re-produce the same ordering of bits and bytes, as\nbeing originally stored at 8000h-8FFFh in Game Boy memory.")]),e._v(" "),a("h4",{attrs:{id:"preparing-the-display"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preparing-the-display"}},[e._v("#")]),e._v(" Preparing the Display")]),e._v(" "),a("p",[e._v("The above method works only when recursing the following things: BG Map\nmust display unsigned characters 00h-FFh on the screen; 00h..13h in\nfirst line, 14h..27h in next line, etc. The Game Boy display must be\nenabled, the display may not be scrolled, OBJ sprites should not overlap\nthe background tiles, the BGP palette register must be set to E4h.")]),e._v(" "),a("h4",{attrs:{id:"transfer-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-time"}},[e._v("#")]),e._v(" Transfer Time")]),e._v(" "),a("p",[e._v("Note that the transfer data should be prepared in VRAM "),a("strong",[e._v("before")]),e._v(" sending\nthe transfer command packet. The actual transfer starts at the beginning\nof the next frame after the command has been sent, and the transfer ends\nat the end of the 5th frame after the command has been sent (not\ncounting the frame in which the command has been sent). The displayed\ndata must not be modified during the transfer, as the SGB reads it in\nmultiple chunks.")]),e._v(" "),a("h4",{attrs:{id:"avoiding-screen-garbage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoiding-screen-garbage"}},[e._v("#")]),e._v(" Avoiding Screen Garbage")]),e._v(" "),a("p",[e._v("The display will contain 'garbage' during the transfer, this\ndirt-effect can be avoided by freezing the screen (in the state which\nhas been displayed before the transfer) by using the MASK_EN command.\nOf course, this works only when actually executing the game on a SGB\n(and not on normal handheld gameboys), it'd be thus required to detect\nthe presence of SGB hardware before blindly sending VRAM data.")]),e._v(" "),a("h2",{attrs:{id:"sgb-command-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-summary"}},[e._v("#")]),e._v(" SGB Command Summary")]),e._v(" "),a("h4",{attrs:{id:"sgb-system-command-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-system-command-table"}},[e._v("#")]),e._v(" SGB System Command Table")]),e._v(" "),a("p",[a("code",[e._v("Code Name      Expl.")]),a("br"),e._v(" "),a("code",[e._v("00   PAL01     Set SGB Palette 0,1 Data")]),a("br"),e._v(" "),a("code",[e._v("01   PAL23     Set SGB Palette 2,3 Data")]),a("br"),e._v(" "),a("code",[e._v("02   PAL03     Set SGB Palette 0,3 Data")]),a("br"),e._v(" "),a("code",[e._v("03   PAL12     Set SGB Palette 1,2 Data")]),a("br"),e._v(" "),a("code",[e._v('04   ATTR_BLK  "Block" Area Designation Mode')]),a("br"),e._v(" "),a("code",[e._v('05   ATTR_LIN  "Line" Area Designation Mode')]),a("br"),e._v(" "),a("code",[e._v('06   ATTR_DIV  "Divide" Area Designation Mode')]),a("br"),e._v(" "),a("code",[e._v('07   ATTR_CHR  "1CHR" Area Designation Mode')]),a("br"),e._v(" "),a("code",[e._v("08   SOUND     Sound On/Off")]),a("br"),e._v(" "),a("code",[e._v("09   SOU_TRN   Transfer Sound PRG/DATA")]),a("br"),e._v(" "),a("code",[e._v("0A   PAL_SET   Set SGB Palette Indirect")]),a("br"),e._v(" "),a("code",[e._v("0B   PAL_TRN   Set System Color Palette Data")]),a("br"),e._v(" "),a("code",[e._v("0C   ATRC_EN   Enable/disable Attraction Mode")]),a("br"),e._v(" "),a("code",[e._v("0D   TEST_EN   Speed Function")]),a("br"),e._v(" "),a("code",[e._v("0E   ICON_EN   SGB Function")]),a("br"),e._v(" "),a("code",[e._v("0F   DATA_SND  SUPER NES WRAM Transfer 1")]),a("br"),e._v(" "),a("code",[e._v("10   DATA_TRN  SUPER NES WRAM Transfer 2")]),a("br"),e._v(" "),a("code",[e._v("11   MLT_REG   Controller 2 Request")]),a("br"),e._v(" "),a("code",[e._v("12   JUMP      Set SNES Program Counter")]),a("br"),e._v(" "),a("code",[e._v("13   CHR_TRN   Transfer Character Font Data")]),a("br"),e._v(" "),a("code",[e._v("14   PCT_TRN   Set Screen Data Color Data")]),a("br"),e._v(" "),a("code",[e._v("15   ATTR_TRN  Set Attribute from ATF")]),a("br"),e._v(" "),a("code",[e._v("16   ATTR_SET  Set Data to ATF")]),a("br"),e._v(" "),a("code",[e._v("17   MASK_EN   Game Boy Window Mask")]),a("br"),e._v(" "),a("code",[e._v("18   OBJ_TRN   Super NES OBJ Mode")])]),e._v(" "),a("h2",{attrs:{id:"sgb-color-palettes-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-color-palettes-overview"}},[e._v("#")]),e._v(" SGB Color Palettes Overview")]),e._v(" "),a("h4",{attrs:{id:"available-snes-palettes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#available-snes-palettes"}},[e._v("#")]),e._v(" Available SNES Palettes")]),e._v(" "),a("p",[e._v("The SGB/SNES provides 8 palettes of 16 colors each, each color may be\ndefined out of a selection of 34768 colors (15 bit). Palettes 0-3 are\nused to colorize the gamescreen, only the first four colors of each of\nthese palettes are used. Palettes 4-7 are used for the SGB Border, all\n16 colors of each of these palettes may be used.")]),e._v(" "),a("h4",{attrs:{id:"color-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#color-format"}},[e._v("#")]),e._v(" Color format")]),e._v(" "),a("p",[e._v("Colors are encoded as 16-bit RGB numbers, in the following way:")]),e._v(" "),a("p",[a("code",[e._v("FEDC BA98 7654 3210")]),a("br"),e._v(" "),a("code",[e._v("0BBB BBGG GGGR RRRR")])]),e._v(" "),a("p",[e._v("Here's a formula to convert 24-bit RGB into SNES format:\n"),a("code",[e._v("(color & 0xF8) << 7 | (color & 0xF800) >> 6 | (color & 0xF80000) >> 19")])]),e._v(" "),a("p",[e._v("The palettes are encoded "),a("strong",[e._v("little-endian")]),e._v(", thus, the R/G byte comes\nfirst in memory.")]),e._v(" "),a("h4",{attrs:{id:"color-0-restriction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#color-0-restriction"}},[e._v("#")]),e._v(" Color 0 Restriction")]),e._v(" "),a("p",[e._v("Color 0 of each of the eight palettes is transparent, causing the\nbackdrop color to be displayed instead. The backdrop color is typically\ndefined by the most recently color being assigned to Color 0 (regardless\nof the palette number being used for that operation). Effectively,\ngamescreen palettes can have only three custom colors each, and SGB\nborder palettes only 15 colors each, additionally, color 0 can be used\nfor for all palettes, which will then all share the same color though.")]),e._v(" "),a("h4",{attrs:{id:"translation-of-grayshades-into-colors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#translation-of-grayshades-into-colors"}},[e._v("#")]),e._v(" Translation of Grayshades into Colors")]),e._v(" "),a("p",[e._v("Because the SGB/SNES reads out the Game Boy video controllers display\nsignal, it translates the different grayshades from the signal into SNES\ncolors as such:")]),e._v(" "),a("p",[a("code",[e._v("White       --\x3e  Color 0")]),a("br"),e._v(" "),a("code",[e._v("Light Gray  --\x3e  Color 1")]),a("br"),e._v(" "),a("code",[e._v("Dark Gray   --\x3e  Color 2")]),a("br"),e._v(" "),a("code",[e._v("Black       --\x3e  Color 3")])]),e._v(" "),a("p",[e._v("Note that Game Boy colors 0-3 are assigned to user-selectable grayshades\nby the gameboys BGP, OBP1, and OBP2 registers. There is thus no fixed\nrelationship between Game Boy colors 0-3 and SNES colors 0-3.")]),e._v(" "),a("h5",{attrs:{id:"using-game-boy-bgp-obp-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-game-boy-bgp-obp-registers"}},[e._v("#")]),e._v(" Using Game Boy BGP/OBP Registers")]),e._v(" "),a("p",[e._v('A direct translation of GB color 0-3 into SNES color 0-3 may be produced\nby setting BGP/OBP registers to a value of 0E4h each. However, in case\nthat your program uses black background for example, then you may\ninternally assign background as "White" at the Game Boy side by BGP/OBP\nregisters (which is then interpreted as SNES color 0, which is shared\nfor all SNES palettes). The advantage is that you may define Color 0 as\nBlack at the SNES side, and may assign custom colors for Colors 1-3 of\neach SNES palette.')]),e._v(" "),a("h4",{attrs:{id:"system-color-palette-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-color-palette-memory"}},[e._v("#")]),e._v(" System Color Palette Memory")]),e._v(" "),a("p",[e._v("Beside for the actually visible palettes, up to 512 palettes of 4 colors\neach may be defined in SNES RAM. The palettes are just stored in RAM\nwithout any relationship to the displayed picture; however, these\npre-defined colors may be transferred to actually visible palettes\nslightly faster than when transferring palette data by separate command\npackets.")]),e._v(" "),a("h2",{attrs:{id:"sgb-palette-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-palette-commands"}},[e._v("#")]),e._v(" SGB Palette Commands")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-00h-pal01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-00h-pal01"}},[e._v("#")]),e._v(" SGB Command 00h - PAL01")]),e._v(" "),a("p",[e._v("Transmit color data for SGB palette 0, color 0-3, and for SGB palette 1,\ncolor 1-3 (without separate color 0).")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=01h)")]),a("br"),e._v(" "),a("code",[e._v("1-E   Color Data for 7 colors of 2 bytes (16bit) each:")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-4   - Red Intensity   (0-31)")]),a("br"),e._v(" "),a("code",[e._v("Bit 5-9   - Green Intensity (0-31)")]),a("br"),e._v(" "),a("code",[e._v("Bit 10-14 - Blue Intensity  (0-31)")]),a("br"),e._v(" "),a("code",[e._v("Bit 15    - Not used (zero)")]),a("br"),e._v(" "),a("code",[e._v("F     Not used (00h)")])]),e._v(" "),a("p",[e._v("This is the same RGB5 format as "),a("a",{attrs:{href:"Video_Display#LCD_Color_Palettes_(CGB_only)",title:"wikilink"}},[e._v("Game Boy Color palette\nentry")]),e._v(", though\nwithout the LCD correction. The value transferred as color 0 will be\napplied for all four palettes.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-01h-pal23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-01h-pal23"}},[e._v("#")]),e._v(" SGB Command 01h - PAL23")]),e._v(" "),a("p",[e._v("Same as above PAL01, but for Palettes 2 and 3 respectively.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-02h-pal03"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-02h-pal03"}},[e._v("#")]),e._v(" SGB Command 02h - PAL03")]),e._v(" "),a("p",[e._v("Same as above PAL01, but for Palettes 0 and 3 respectively.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-03h-pal12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-03h-pal12"}},[e._v("#")]),e._v(" SGB Command 03h - PAL12")]),e._v(" "),a("p",[e._v("Same as above PAL01, but for Palettes 1 and 2 respectively.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-0ah-pal-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0ah-pal-set"}},[e._v("#")]),e._v(" SGB Command 0Ah - PAL_SET")]),e._v(" "),a("p",[e._v("Used to copy pre-defined palette data from SGB system color palettes to\nactual SNES palettes.")]),e._v(" "),a("p",[e._v("Note: all palette numbers are little-endian.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1-2   System Palette number for SGB Color Palette 0 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("3-4   System Palette number for SGB Color Palette 1 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("5-6   System Palette number for SGB Color Palette 2 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("7-8   System Palette number for SGB Color Palette 3 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("9     Attribute File")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-5 - Attribute File Number (00h-2Ch) (Used only if Bit7=1)")]),a("br"),e._v(" "),a("code",[e._v("Bit 6   - Cancel Mask           (0=No change, 1=Yes)")]),a("br"),e._v(" "),a("code",[e._v("Bit 7   - Use Attribute File    (0=No, 1=Apply above ATF Number)")]),a("br"),e._v(" "),a("code",[e._v("A-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("Before using this function, System Palette data should be initialized by\nPAL_TRN command, and (when used) Attribute File data should be\ninitialized by ATTR_TRN.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-0bh-pal-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0bh-pal-trn"}},[e._v("#")]),e._v(" SGB Command 0Bh - PAL_TRN")]),e._v(" "),a("p",[e._v("Used to initialize SGB system color palettes in SNES RAM. System color\npalette memory contains 512 pre-defined palettes, these palettes do not\ndirectly affect the display, however, the PAL_SET command may be later\nused to transfer four of these 'logical' palettes to actual visible\n'physical' SGB palettes. Also, the OBJ_TRN function will use groups\nof 4 System Color Palettes (4*4 colors) for SNES OBJ palettes (16\ncolors).")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("The palette data is sent by VRAM-Transfer (4 KBytes).")]),e._v(" "),a("p",[a("code",[e._v("000-FFF  Data for System Color Palette 0-511")])]),e._v(" "),a("p",[e._v("Each Palette consists of four 16bit-color definitions (8 bytes). Note:\nThe data is stored at 3000h-3FFFh in SNES memory.")]),e._v(" "),a("h2",{attrs:{id:"sgb-color-attribute-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-color-attribute-commands"}},[e._v("#")]),e._v(" SGB Color Attribute Commands")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-04h-attr-blk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-04h-attr-blk"}},[e._v("#")]),e._v(" SGB Command 04h - ATTR_BLK")]),e._v(" "),a("p",[e._v("Used to specify color attributes for the inside or outside of one or\nmore rectangular screen regions.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (length=1..7)")]),a("br"),e._v(" "),a("code",[e._v("1     Number of Data Sets (01h..12h)")]),a("br"),e._v(" "),a("code",[e._v("2-7   Data Set #1")]),a("br"),e._v(" "),a("code",[e._v("Byte 0 - Control Code (0-7)")]),a("br"),e._v(" "),a("code",[e._v("Bit 0 - Change Colors inside of surrounded area     (1=Yes)")]),a("br"),e._v(" "),a("code",[e._v("Bit 1 - Change Colors of surrounding character line (1=Yes)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2 - Change Colors outside of surrounded area    (1=Yes)")]),a("br"),e._v(" "),a("code",[e._v("Bit 3-7 - Not used (zero)")]),a("br"),e._v(" "),a("code",[e._v("Exception: When changing only the Inside or Outside, then the")]),a("br"),e._v(" "),a("code",[e._v("Surrounding line becomes automatically changed to same color.")]),a("br"),e._v(" "),a("code",[e._v("Byte 1 - Color Palette Designation")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-1 - Palette Number for inside of surrounded area")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-3 - Palette Number for surrounding character line")]),a("br"),e._v(" "),a("code",[e._v("Bit 4-5 - Palette Number for outside of surrounded area")]),a("br"),e._v(" "),a("code",[e._v("Bit 6-7 - Not used (zero)")]),a("br"),e._v(" "),a("code",[e._v("Data Set Byte 2 - Coordinate X1 (left)")]),a("br"),e._v(" "),a("code",[e._v("Data Set Byte 3 - Coordinate Y1 (upper)")]),a("br"),e._v(" "),a("code",[e._v("Data Set Byte 4 - Coordinate X2 (right)")]),a("br"),e._v(" "),a("code",[e._v("Data Set Byte 5 - Coordinate Y2 (lower)")]),a("br"),e._v(" "),a("code",[e._v("Specifies the coordinates of the surrounding rectangle.")]),a("br"),e._v(" "),a("code",[e._v("8-D   Data Set #2 (if any)")]),a("br"),e._v(" "),a("code",[e._v("E-F   Data Set #3 (continued at 0-3 in next packet) (if any)")])]),e._v(" "),a("p",[e._v("When sending three or more data sets, data is continued in further\npacket(s). Unused bytes at the end of the last packet should be set to\nzero. The format of the separate Data Sets is described below.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-05h-attr-lin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-05h-attr-lin"}},[e._v("#")]),e._v(" SGB Command 05h - ATTR_LIN")]),e._v(" "),a("p",[e._v("Used to specify color attributes of one or more horizontal or vertical\ncharacter lines.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (length=1..7)")]),a("br"),e._v(" "),a("code",[e._v("1     Number of Data Sets (01h..6Eh) (one byte each)")]),a("br"),e._v(" "),a("code",[e._v("2     Data Set #1")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-4 - Line Number    (X- or Y-coordinate, depending on bit 7)")]),a("br"),e._v(" "),a("code",[e._v("Bit 5-6 - Palette Number (0-3)")]),a("br"),e._v(" "),a("code",[e._v("Bit 7   - H/V Mode Bit   (0=Vertical line, 1=Horizontal Line)")]),a("br"),e._v(" "),a("code",[e._v("3     Data Set #2 (if any)")]),a("br"),e._v(" "),a("code",[e._v("4     Data Set #3 (if any)")]),a("br"),e._v(" "),a("code",[e._v("etc.")])]),e._v(" "),a("p",[e._v("When sending 15 or more data sets, data is continued in further\npacket(s). Unused bytes at the end of the last packet should be set to\nzero. The format of the separate Data Sets (one byte each) is described\nbelow. The length of each line reaches from one end of the screen to the\nother end. In case that some lines overlap each other, then lines from\nlastmost data sets will overwrite lines from previous data sets.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-06h-attr-div"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-06h-attr-div"}},[e._v("#")]),e._v(" SGB Command 06h - ATTR_DIV")]),e._v(" "),a("p",[e._v("Used to split the screen into two halfes, and to assign separate color\nattributes to each half, and to the division line between them.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length   (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Color Palette Numbers and H/V Mode Bit")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-1  Palette Number below/right of division line")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-3  Palette Number above/left of division line")]),a("br"),e._v(" "),a("code",[e._v("Bit 4-5  Palette Number for division line")]),a("br"),e._v(" "),a("code",[e._v("Bit 6    H/V Mode Bit  (0=split left/right, 1=split above/below)")]),a("br"),e._v(" "),a("code",[e._v("2     X- or Y-Coordinate (depending on H/V bit)")]),a("br"),e._v(" "),a("code",[e._v("3-F   Not used (zero)")])]),e._v(" "),a("h4",{attrs:{id:"sgb-command-07h-attr-chr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-07h-attr-chr"}},[e._v("#")]),e._v(" SGB Command 07h - ATTR_CHR")]),e._v(" "),a("p",[e._v("Used to specify color attributes for separate characters.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (length=1..6)")]),a("br"),e._v(" "),a("code",[e._v("1     Beginning X-Coordinate")]),a("br"),e._v(" "),a("code",[e._v("2     Beginning Y-Coordinate")]),a("br"),e._v(" "),a("code",[e._v("3-4   Number of Data Sets (1-360)")]),a("br"),e._v(" "),a("code",[e._v("5     Writing Style   (0=Left to Right, 1=Top to Bottom)")]),a("br"),e._v(" "),a("code",[e._v("6     Data Sets 1-4   (Set 1 in MSBs, Set 4 in LSBs)")]),a("br"),e._v(" "),a("code",[e._v("7     Data Sets 5-8   (if any)")]),a("br"),e._v(" "),a("code",[e._v("8     Data Sets 9-12  (if any)")]),a("br"),e._v(" "),a("code",[e._v("etc.")])]),e._v(" "),a("p",[e._v("When sending 41 or more data sets, data is continued in further\npacket(s). Unused bytes at the end of the last packet should be set to\nzero. Each data set consists of two bits, indicating the palette number\nfor one character. Depending on the writing style, data sets are written\nfrom left to right, or from top to bottom. In either case the function\nwraps to the next row/column when reaching the end of the screen.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-15h-attr-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-15h-attr-trn"}},[e._v("#")]),e._v(" SGB Command 15h - ATTR_TRN")]),e._v(" "),a("p",[e._v("Used to initialize Attribute Files (ATFs) in SNES RAM. Each ATF consists\nof 20x18 color attributes for the Game Boy screen. This function does not\ndirectly affect display attributes. Instead, one of the defined ATFs may\nbe copied to actual display memory at a later time by using ATTR_SET or\nPAL_SET functions.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("The ATF data is sent by VRAM-Transfer (4 KBytes).")]),e._v(" "),a("p",[a("code",[e._v("000-FD1  Data for ATF0 through ATF44 (4050 bytes)")]),a("br"),e._v(" "),a("code",[e._v("FD2-FFF  Not used")])]),e._v(" "),a("p",[e._v("Each ATF consists of 90 bytes, that are 5 bytes (20x2bits) for each of\nthe 18 character lines of the Game Boy window. The two most significant\nbits of the first byte define the color attribute (0-3) for the first\ncharacter of the first line, the next two bits the next character, and\nso on.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-16h-attr-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-16h-attr-set"}},[e._v("#")]),e._v(" SGB Command 16h - ATTR_SET")]),e._v(" "),a("p",[e._v("Used to transfer attributes from Attribute File (ATF) to Game Boy window.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Attribute File Number (00-2Ch), Bit 6=Cancel Mask")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("When above Bit 6 is set, the Game Boy screen becomes re-enabled after the\ntransfer (in case it has been disabled/frozen by MASK_EN command).\nNote: The same functions may be (optionally) also included in PAL_SET\ncommands, as described in the chapter about Color Palette Commands.")]),e._v(" "),a("h2",{attrs:{id:"sgb-sound-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-sound-functions"}},[e._v("#")]),e._v(" SGB Sound Functions")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-08h-sound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-08h-sound"}},[e._v("#")]),e._v(" SGB Command 08h - SOUND")]),e._v(" "),a("p",[e._v("Used to start/stop internal sound effect, start/stop sound using\ninternal tone data.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Sound Effect A (Port 1) Decrescendo 8bit Sound Code")]),a("br"),e._v(" "),a("code",[e._v("2     Sound Effect B (Port 2) Sustain     8bit Sound Code")]),a("br"),e._v(" "),a("code",[e._v("3     Sound Effect Attributes")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-1 - Sound Effect A Pitch  (0..3=Low..High)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-3 - Sound Effect A Volume (0..2=High..Low, 3=Mute on)")]),a("br"),e._v(" "),a("code",[e._v("Bit 4-5 - Sound Effect B Pitch  (0..3=Low..High)")]),a("br"),e._v(" "),a("code",[e._v("Bit 6-7 - Sound Effect B Volume (0..2=High..Low, 3=Not used)")]),a("br"),e._v(" "),a("code",[e._v("4     Music Score Code (must be zero if not used)")]),a("br"),e._v(" "),a("code",[e._v("5-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("See Sound Effect Tables below for a list of available pre-defined\neffects.")]),e._v(" "),a("p",[e._v("Notes:")]),e._v(" "),a("ol",[a("li",[e._v("Mute is only active when both bits D2 and D3 are 1.")]),e._v(" "),a("li",[e._v("When the volume is set for either Sound Effect A or Sound Effect B,\nmute is turned off.")]),e._v(" "),a("li",[e._v("When Mute on/off has been executed, the sound fades out/fades in.")]),e._v(" "),a("li",[e._v('Mute on/off operates on the (BGM) which is reproduced by Sound\nEffect A, Sound Effect B, and the Super NES APU. A "mute off" flag\ndoes not exist by itself. When mute flag is set, volume and pitch of\nSound Effect A (port 1) and Sound Effect B (port 2) must be set.')])]),e._v(" "),a("h4",{attrs:{id:"sgb-command-09h-sou-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-09h-sou-trn"}},[e._v("#")]),e._v(" SGB Command 09h - SOU_TRN")]),e._v(" "),a("p",[e._v("Used to transfer sound code or data to SNES Audio Processing Unit memory\n(APU-RAM).")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("The sound code/data is sent by VRAM-Transfer (4 KBytes).")]),e._v(" "),a("p",[a("code",[e._v("000      One (or two ???) 16bit expression(s ???) indicating the")]),a("br"),e._v(" "),a("code",[e._v("transfer destination address and transfer length.")]),a("br"),e._v(" "),a("code",[e._v("...-...  Transfer Data")]),a("br"),e._v(" "),a("code",[e._v("...-FFF  Remaining bytes not used")])]),e._v(" "),a("p",[e._v("Possible destinations in APU-RAM are:")]),e._v(" "),a("p",[a("code",[e._v("0400h-2AFFh  APU-RAM Program Area (9.75KBytes)")]),a("br"),e._v(" "),a("code",[e._v("2B00h-4AFFh  APU-RAM Sound Score Area (8Kbytes)")]),a("br"),e._v(" "),a("code",[e._v("4DB0h-EEFFh  APU-RAM Sampling Data Area (40.25 Kbytes)")])]),e._v(" "),a("p",[e._v("This function may be used to take control of the SNES sound chip, and/or\nto access the SNES MIDI engine. In either case it requires deeper\nknowledge of SNES sound programming.")]),e._v(" "),a("h4",{attrs:{id:"sgb-sound-effect-a-b-tables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-sound-effect-a-b-tables"}},[e._v("#")]),e._v(" SGB Sound Effect A/B Tables")]),e._v(" "),a("p",[e._v('Below lists the digital sound effects that are pre-defined in the\nSGB/SNES BIOS, and which can be used with the SGB "SOUND" Command.\nEffect A and B may be simultaneously reproduced. The P-column indicates\nthe recommended Pitch value, the V-column indicates the numbers of\nVoices used. Sound Effect A uses voices 6,7. Sound Effect B uses voices\n0,1,4,5. Effects that use less voices will use only the upper voices\n(eg. 4,5 for Effect B with only two voices).')]),e._v(" "),a("h4",{attrs:{id:"sound-effect-a-flag-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-effect-a-flag-table"}},[e._v("#")]),e._v(" Sound Effect A Flag Table")]),e._v(" "),a("p",[a("code",[e._v("Code Description             P V     Code Description             P V")]),a("br"),e._v(" "),a("code",[e._v("00  Dummy flag, re-trigger   - 2     18  Fast Jump                3 1")]),a("br"),e._v(" "),a("code",[e._v("80  Effect A, stop/silent    - 2     19  Jet (rocket) takeoff     0 1")]),a("br"),e._v(" "),a("code",[e._v("01  Nintendo                 3 1     1A  Jet (rocket) landing     0 1")]),a("br"),e._v(" "),a("code",[e._v("02  Game Over                3 2     1B  Cup breaking             2 2")]),a("br"),e._v(" "),a("code",[e._v("03  Drop                     3 1     1C  Glass breaking           1 2")]),a("br"),e._v(" "),a("code",[e._v("04  OK ... A                 3 2     1D  Level UP                 2 2")]),a("br"),e._v(" "),a("code",[e._v("05  OK ... B                 3 2     1E  Insert air               1 1")]),a("br"),e._v(" "),a("code",[e._v("06  Select...A               3 2     1F  Sword swing              1 1")]),a("br"),e._v(" "),a("code",[e._v("07  Select...B               3 1     20  Water falling            2 1")]),a("br"),e._v(" "),a("code",[e._v("08  Select...C               2 2     21  Fire                     1 1")]),a("br"),e._v(" "),a("code",[e._v("09  Mistake...Buzzer         2 1     22  Wall collapsing          1 2")]),a("br"),e._v(" "),a("code",[e._v("0A  Catch Item               2 2     23  Cancel                   1 2")]),a("br"),e._v(" "),a("code",[e._v("0B  Gate squeaks 1 time      2 2     24  Walking                  1 2")]),a("br"),e._v(" "),a("code",[e._v("0C  Explosion...small        1 2     25  Blocking strike          1 2")]),a("br"),e._v(" "),a("code",[e._v("0D  Explosion...medium       1 2     26  Picture floats on & off  3 2")]),a("br"),e._v(" "),a("code",[e._v("0E  Explosion...large        1 2     27  Fade in                  0 2")]),a("br"),e._v(" "),a("code",[e._v("0F  Attacked...A             3 1     28  Fade out                 0 2")]),a("br"),e._v(" "),a("code",[e._v("10  Attacked...B             3 2     29  Window being opened      1 2")]),a("br"),e._v(" "),a("code",[e._v("11  Hit (punch)...A          0 2     2A  Window being closed      0 2")]),a("br"),e._v(" "),a("code",[e._v("12  Hit (punch)...B          0 2     2B  Big Laser                3 2")]),a("br"),e._v(" "),a("code",[e._v("13  Breath in air            3 2     2C  Stone gate closes/opens  0 2")]),a("br"),e._v(" "),a("code",[e._v("14  Rocket Projectile...A    3 2     2D  Teleportation            3 1")]),a("br"),e._v(" "),a("code",[e._v("15  Rocket Projectile...B    3 2     2E  Lightning                0 2")]),a("br"),e._v(" "),a("code",[e._v("16  Escaping Bubble          2 1     2F  Earthquake               0 2")]),a("br"),e._v(" "),a("code",[e._v("17  Jump                     3 1     30  Small Laser              2 2")])]),e._v(" "),a("p",[e._v("Sound effect A is used for formanto sounds (percussion sounds).")]),e._v(" "),a("h4",{attrs:{id:"sound-effect-b-flag-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sound-effect-b-flag-table"}},[e._v("#")]),e._v(" Sound Effect B Flag Table")]),e._v(" "),a("p",[a("code",[e._v("Code Description             P V     Code Description             P V")]),a("br"),e._v(" "),a("code",[e._v("00  Dummy flag, re-trigger   - 4     0D  Waterfall                2 2")]),a("br"),e._v(" "),a("code",[e._v("80  Effect B, stop/silent    - 4     0E  Small character running  3 1")]),a("br"),e._v(" "),a("code",[e._v("01  Applause...small group   2 1     0F  Horse running            3 1")]),a("br"),e._v(" "),a("code",[e._v("02  Applause...medium group  2 2     10  Warning sound            1 1")]),a("br"),e._v(" "),a("code",[e._v("03  Applause...large group   2 4     11  Approaching car          0 1")]),a("br"),e._v(" "),a("code",[e._v("04  Wind                     1 2     12  Jet flying               1 1")]),a("br"),e._v(" "),a("code",[e._v("05  Rain                     1 1     13  UFO flying               2 1")]),a("br"),e._v(" "),a("code",[e._v("06  Storm                    1 3     14  Electromagnetic waves    0 1")]),a("br"),e._v(" "),a("code",[e._v("07  Storm with wind/thunder  2 4     15  Score UP                 3 1")]),a("br"),e._v(" "),a("code",[e._v("08  Lightning                0 2     16  Fire                     2 1")]),a("br"),e._v(" "),a("code",[e._v("09  Earthquake               0 2     17  Camera shutter, formanto 3 4")]),a("br"),e._v(" "),a("code",[e._v("0A  Avalanche                0 2     18  Write, formanto          0 1")]),a("br"),e._v(" "),a("code",[e._v("0B  Wave                     0 1     19  Show up title, formanto  0 1")]),a("br"),e._v(" "),a("code",[e._v("0C  River                    3 2")])]),e._v(" "),a("p",[e._v("Sound effect B is mainly used for looping sounds (sustained sounds).")]),e._v(" "),a("h2",{attrs:{id:"sgb-system-control-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-system-control-commands"}},[e._v("#")]),e._v(" SGB System Control Commands")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-17h-mask-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-17h-mask-en"}},[e._v("#")]),e._v(" SGB Command 17h - MASK_EN")]),e._v(" "),a("p",[e._v("Used to mask the Game Boy window, among others this can be used to freeze\nthe Game Boy screen before transferring data through VRAM (the SNES then\nkeeps displaying the Game Boy screen, even though VRAM doesn't contain\nmeaningful display information during the transfer).")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Gameboy Screen Mask (0-3)")]),a("br"),e._v(" "),a("code",[e._v("0  Cancel Mask   (Display activated)")]),a("br"),e._v(" "),a("code",[e._v("1  Freeze Screen (Keep displaying current picture)")]),a("br"),e._v(" "),a("code",[e._v("2  Blank Screen  (Black)")]),a("br"),e._v(" "),a("code",[e._v("3  Blank Screen  (Color 0)")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("Freezing works only if the SNES has stored a picture, ie. if necessary\nwait one or two frames before freezing (rather than freezing directly\nafter having displayed the picture). The Cancel Mask function may be\nalso invoked (optionally) by completion of PAL_SET and ATTR_SET\ncommands.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-0ch-atrc-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0ch-atrc-en"}},[e._v("#")]),e._v(" SGB Command 0Ch - ATRC_EN")]),e._v(" "),a("p",[e._v("Used to enable/disable Attraction mode, which is enabled by default.")]),e._v(" "),a("p",[e._v('Built-in borders other than the Game Boy frame and the plain black\nborder have a "screen saver" activated by pressing R, L, L, L, L, R or\nby leaving the controller alone for roughly 7 minutes (tested with 144p\nTest Suite). It is speculated that the animation may have interfered\nwith rarely-used SGB features, such as OBJ_TRN or JUMP, and that\nAttraction Disable disables this animation.')]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Attraction Disable  (0=Enable, 1=Disable)")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("h4",{attrs:{id:"sgb-command-0dh-test-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0dh-test-en"}},[e._v("#")]),e._v(" SGB Command 0Dh - TEST_EN")]),e._v(" "),a("p",[e._v('Used to enable/disable test mode for "SGB-CPU variable clock speed\nfunction". This function is disabled by default.')]),e._v(" "),a("p",[e._v("This command does nothing on some SGB revisions. (SGBv2 confirmed,\nunknown on others)")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Test Mode Enable    (0=Disable, 1=Enable)")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("Maybe intended to determine whether SNES operates at 50Hz or 60Hz\ndisplay refresh rate ??? Possibly result can be read-out from joypad\nregister ???")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-0eh-icon-en"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0eh-icon-en"}},[e._v("#")]),e._v(" SGB Command 0Eh - ICON_EN")]),e._v(" "),a("p",[e._v("Used to enable/disable ICON function. Possibly meant to enable/disable\nSGB/SNES popup menues which might otherwise activated during gameboy\ngame play. By default all functions are enabled (0).")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Disable Bits")]),a("br"),e._v(" "),a("code",[e._v("Bit 0 - Use of SGB-Built-in Color Palettes    (1=Disable)")]),a("br"),e._v(" "),a("code",[e._v("Bit 1 - Controller Set-up Screen    (0=Enable, 1=Disable)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2 - SGB Register File Transfer (0=Receive, 1=Disable)")]),a("br"),e._v(" "),a("code",[e._v("Bit 3-6 - Not used (zero)")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("Above Bit 2 will suppress all further packets/commands when set, this\nmight be useful when starting a monochrome game from inside of the\nSGB-menu of a multi-gamepak which contains a collection of different\ngames.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-0fh-data-snd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-0fh-data-snd"}},[e._v("#")]),e._v(" SGB Command 0Fh - DATA_SND")]),e._v(" "),a("p",[e._v("Used to write one or more bytes directly into SNES Work RAM.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     SNES Destination Address, low")]),a("br"),e._v(" "),a("code",[e._v("2     SNES Destination Address, high")]),a("br"),e._v(" "),a("code",[e._v("3     SNES Destination Address, bank number")]),a("br"),e._v(" "),a("code",[e._v("4     Number of bytes to write (01h-0Bh)")]),a("br"),e._v(" "),a("code",[e._v("5     Data Byte #1")]),a("br"),e._v(" "),a("code",[e._v("6     Data Byte #2 (if any)")]),a("br"),e._v(" "),a("code",[e._v("7     Data Byte #3 (if any)")]),a("br"),e._v(" "),a("code",[e._v("etc.")])]),e._v(" "),a("p",[e._v("Unused bytes at the end of the packet should be set to zero, this\nfunction is restricted to a single packet, so that not more than 11\nbytes can be defined at once. Free Addresses in SNES memory are Bank 0\n1800h-1FFFh, Bank 7Fh 0000h-FFFFh.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-10h-data-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-10h-data-trn"}},[e._v("#")]),e._v(" SGB Command 10h - DATA_TRN")]),e._v(" "),a("p",[e._v("Used to transfer binary code or data directly into SNES RAM.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     SNES Destination Address, low")]),a("br"),e._v(" "),a("code",[e._v("2     SNES Destination Address, high")]),a("br"),e._v(" "),a("code",[e._v("3     SNES Destination Address, bank number")]),a("br"),e._v(" "),a("code",[e._v("4-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("The data is sent by VRAM-Transfer (4 KBytes).")]),e._v(" "),a("p",[a("code",[e._v("000-FFF  Data")])]),e._v(" "),a("p",[e._v("Free Addresses in SNES memory are Bank 0 1800h-1FFFh, Bank 7Fh\n0000h-FFFFh. The transfer length is fixed at 4KBytes ???, so that\ndirectly writing to the free 2KBytes at 0:1800h would be a not so good\nidea ???")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-12h-jump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-12h-jump"}},[e._v("#")]),e._v(" SGB Command 12h - JUMP")]),e._v(" "),a("p",[e._v("Used to set the SNES program counter and NMI (vblank interrupt) handler\nto specific addresses.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     SNES Program Counter, low")]),a("br"),e._v(" "),a("code",[e._v("2     SNES Program Counter, high")]),a("br"),e._v(" "),a("code",[e._v("3     SNES Program Counter, bank number")]),a("br"),e._v(" "),a("code",[e._v("4     SNES NMI Handler, low")]),a("br"),e._v(" "),a("code",[e._v("5     SNES NMI Handler, high")]),a("br"),e._v(" "),a("code",[e._v("6     SNES NMI Handler, bank number")]),a("br"),e._v(" "),a("code",[e._v("7-F   Not used, zero")])]),e._v(" "),a("p",[e._v("The game "),a("em",[e._v("Space Invaders")]),e._v(' uses this function when selecting "Arcade\nmode" to execute SNES program code which has been previously\ntransferred from the SGB to the SNES. The SNES CPU is a Ricoh 5A22,\nwhich combines a 65C816 core licensed from WDC with a custom memory\ncontroller. For more information, see '),a("a",{attrs:{href:"https://problemkaputt.de/fullsnes.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v('"fullsnes" by\nnocash'),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Some notes for intrepid Super NES programmers seeking to use a flash\ncartridge in a Super Game Boy as a storage server:")]),e._v(" "),a("ul",[a("li",[e._v("JUMP overwrites the NMI handler even if it is $000000.")]),e._v(" "),a("li",[e._v("The SGB system software does not appear to use NMIs.")]),e._v(" "),a("li",[e._v("JUMP can return to SGB system software via a 16-bit RTS. To do this,\nJML to a location in bank $00 containing byte value $60, such as\nany of the "),a("a",{attrs:{href:"#Stubbed_commands",title:"wikilink"}},[e._v("stubbed commands")]),e._v(".")]),e._v(" "),a("li",[e._v("IRQs and COP and BRK instructions are not useful because their\nhandlers still point into SGB ROM. Use SEI WAI.")]),e._v(" "),a("li",[e._v("If a program called through JUMP does not intend to return to SGB\nsystem software, it can overwrite all Super NES RAM except $0000BB\nthrough $0000BD, the NMI vector.")]),e._v(" "),a("li",[e._v("To enter APU boot ROM, write $FE to $2140. Echo will still be on\nthough.")])]),e._v(" "),a("h2",{attrs:{id:"sgb-multiplayer-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-multiplayer-command"}},[e._v("#")]),e._v(" SGB Multiplayer Command")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-11h-mlt-req"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-11h-mlt-req"}},[e._v("#")]),e._v(" SGB Command 11h - MLT_REQ")]),e._v(" "),a("p",[e._v("Used to request multiplayer mode (ie. input from more than one joypad).\nBecause this function provides feedback from the SGB/SNES to the Game\nBoy program, it is also used to detect SGB hardware.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Multiplayer Control (0-3) (Bit0=Enable, Bit1=Two/Four Players)")]),a("br"),e._v(" "),a("code",[e._v("0 = One player")]),a("br"),e._v(" "),a("code",[e._v("1 = Two players")]),a("br"),e._v(" "),a("code",[e._v("3 = Four players")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("p",[e._v('In one player mode, the second joypad (if any) is used for the SGB\nsystem program. In two player mode, both joypads are used for the game.\nBecause SNES have only two joypad sockets, four player mode requires an\nexternal "Multiplayer 5" adapter.')]),e._v(" "),a("p",[e._v("Changing the number of active players ANDs the currently selected player\nminus one with the number of players in that mode minus one. For example\nif you go from four players to two players and player 4 was active\nplayer 2 will then be active because 3 AND 1 is 1. However, sending the\nMLT_REQ command will increment the counter several times so results may\nnot be exactly as expected. The most frequent case is going from one\nplayer to two-or-four player which will always start with player 1\nactive.")]),e._v(" "),a("h4",{attrs:{id:"reading-multiple-controllers-joypads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-multiple-controllers-joypads"}},[e._v("#")]),e._v(" Reading Multiple Controllers (Joypads)")]),e._v(" "),a("p",[e._v("When having enabled multiple controllers by MLT_REQ, data for each\njoypad can be read out through JOYPAD register (FF00) as follows: First\nset P14 and P15 both HIGH (deselect both Buttons and Cursor keys), you\ncan now read the lower 4bits of FF00 which indicate the joypad ID for\nthe following joypad input:")]),e._v(" "),a("p",[a("code",[e._v("0Fh  Joypad 1")]),a("br"),e._v(" "),a("code",[e._v("0Eh  Joypad 2")]),a("br"),e._v(" "),a("code",[e._v("0Dh  Joypad 3")]),a("br"),e._v(" "),a("code",[e._v("0Ch  Joypad 4")])]),e._v(" "),a("p",[e._v("Next, read joypad state as normally. When completed, set P14 and P15\nback HIGH, this automatically increments the joypad number (or restarts\ncounting once reached the lastmost joypad). Repeat the procedure until\nyou have read-out states for all two (or four) joypads.")]),e._v(" "),a("p",[e._v("If for whatever reason you want to increment the joypad number without\nreading the joypad state you only need to set P15 to LOW before setting\nit back to HIGH. Adjusting P14 does not affect whether or not the joypad\nnumber will advance, However, if you set P15 to LOW then HIGH then LOW\nagain without bringing both P14 and P15 HIGH at any point, it cancels\nthe increment until P15 is lowered again. There are games, such as\nPokémon Yellow, which rely on this cancelling when detecting the SGB.")]),e._v(" "),a("h2",{attrs:{id:"sgb-border-and-obj-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-border-and-obj-commands"}},[e._v("#")]),e._v(" SGB Border and OBJ Commands")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-13h-chr-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-13h-chr-trn"}},[e._v("#")]),e._v(" SGB Command 13h - CHR_TRN")]),e._v(" "),a("p",[e._v("Used to transfer tile data (characters) to SNES Tile memory in VRAM.\nThis normally used to define BG tiles for the SGB Border (see PCT_TRN),\nbut might be also used to define moveable SNES foreground sprites (see\nOBJ_TRN).")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Tile Transfer Destination")]),a("br"),e._v(" "),a("code",[e._v("Bit 0   - Tile Numbers   (0=Tiles 00h-7Fh, 1=Tiles 80h-FFh)")]),a("br"),e._v(" "),a("code",[e._v("Bit 1   - Tile Type      (0=BG Tiles, 1=OBJ Tiles)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-7 - Not used (zero)")]),a("br"),e._v(" "),a("code",[e._v("2-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("The tile data is sent by VRAM-Transfer (4 KBytes).")]),e._v(" "),a("p",[a("code",[e._v("000-FFF  Bitmap data for 128 Tiles")])]),e._v(" "),a("p",[e._v("Each tile occupies 32 bytes (8x8 pixels, 16 colors each). When intending\nto transfer more than 128 tiles, call this function twice (once for\ntiles 00h-7Fh, and once for tiles 80h-FFh). Note: The BG/OBJ Bit seems\nto have no effect and writes to the same VRAM addresses for both BG and\nOBJ ???")]),e._v(" "),a("p",[e._v("TODO: explain tile format")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-14h-pct-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-14h-pct-trn"}},[e._v("#")]),e._v(" SGB Command 14h - PCT_TRN")]),e._v(" "),a("p",[e._v("Used to transfer tile map data and palette data to SNES BG Map memory in\nVRAM to be used for the SGB border. The actual tiles must be separately\ntransferred by using the CHR_TRN function.")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length    (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1-F   Not used (zero)")])]),e._v(" "),a("p",[e._v("The map data is sent by VRAM-Transfer (4 KBytes).")]),e._v(" "),a("p",[a("code",[e._v("000-6FF  BG Map 32x28 Entries of 16bit each (1792 bytes)")]),a("br"),e._v(" "),a("code",[e._v("700-7FF  Not used, don't care")]),a("br"),e._v(" "),a("code",[e._v("800-87F  BG Palette Data (Palettes 4-7, each 16 colors of 16bits each)")]),a("br"),e._v(" "),a("code",[e._v("880-FFF  Not used, don't care")])]),e._v(" "),a("p",[e._v("Each BG Map Entry consists of a 16bit value as such:\n"),a("code",[e._v("VH01 PP00 NNNN NNNN")])]),e._v(" "),a("p",[a("code",[e._v("Bit 0-9   - Character Number (use only 00h-FFh, upper 2 bits zero)")]),a("br"),e._v(" "),a("code",[e._v("Bit 10-12 - Palette Number   (use only 4-7, officially use only 4-6)")]),a("br"),e._v(" "),a("code",[e._v("Bit 13    - BG Priority      (use only 0)")]),a("br"),e._v(" "),a("code",[e._v("Bit 14    - X-Flip           (0=Normal, 1=Mirror horizontally)")]),a("br"),e._v(" "),a("code",[e._v("Bit 15    - Y-Flip           (0=Normal, 1=Mirror vertically)")])]),e._v(" "),a("p",[e._v("The 32x28 map entries correspond to 256x224 pixels of the Super NES\nscreen. The 20x18 entries in the center of the 32x28 area should be set\nto a blank (solid color 0) tile as transparent space for the Game Boy\nwindow to be displayed inside. Non-transparent border data will cover\nthe Game Boy window (for example, "),a("em",[e._v("Mario's Picross")]),e._v(" does this, as does\n"),a("em",[e._v("WildSnake")]),e._v(" to a lesser extent).")]),e._v(" "),a("p",[e._v("All borders repeat tiles. Assuming that the blank space for the GB\nscreen is a single tile, as is the letterbox in a widescreen border, a\nborder defining all unique tiles would have to define this many tiles:")]),e._v(" "),a("ul",[a("li",[e._v("(256*224-160*144)/64+1 = 537 tiles in fullscreen border")]),e._v(" "),a("li",[e._v("(256*176-160*144)/64+2 = 346 tiles in widescreen border")])]),e._v(" "),a("p",[e._v("But the CHR RAM allocated by SGB for border holds only 256 tiles. This\nmeans a fullscreen border must repeat at least 281 tiles and a\nwidescreen border at least 90.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-18h-obj-trn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-18h-obj-trn"}},[e._v("#")]),e._v(" SGB Command 18h - OBJ_TRN")]),e._v(" "),a("p",[e._v('Used to transfer OBJ attributes to SNES OAM memory. Unlike all other\nfunctions with the ending _TRN, this function does not use the usual\none-shot 4KBytes VRAM transfer method. Instead, when enabled (below\nexecute bit set), data is permanently (each frame) read out from the\nlower character line of the Game Boy screen. To suppress garbage on the\ndisplay, the lower line is masked, and only the upper 20x17 characters\nof the Game Boy window are used - the masking method is unknwon - frozen,\nblack, or recommended to be covered by the SGB border, or else ??? Also,\nwhen the function is enabled, "system attract mode is not performed" -\nwhatever that means ???')]),e._v(" "),a("p",[e._v("This command does nothing on some SGB revisions. (SGBv2, SGB2?)")]),e._v(" "),a("p",[a("code",[e._v("Byte  Content")]),a("br"),e._v(" "),a("code",[e._v("0     Command*8+Length (fixed length=1)")]),a("br"),e._v(" "),a("code",[e._v("1     Control Bits")]),a("br"),e._v(" "),a("code",[e._v("Bit 0   - SNES OBJ Mode enable (0=Cancel, 1=Enable)")]),a("br"),e._v(" "),a("code",[e._v("Bit 1   - Change OBJ Color     (0=No, 1=Use definitions below)")]),a("br"),e._v(" "),a("code",[e._v("Bit 2-7 - Not used (zero)")]),a("br"),e._v(" "),a("code",[e._v("2-3   System Color Palette Number for OBJ Palette 4 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("4-5   System Color Palette Number for OBJ Palette 5 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("6-7   System Color Palette Number for OBJ Palette 6 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("8-9   System Color Palette Number for OBJ Palette 7 (0-511)")]),a("br"),e._v(" "),a("code",[e._v("These color entries are ignored if above Control Bit 1 is zero.")]),a("br"),e._v(" "),a("code",[e._v("Because each OBJ palette consists of 16 colors, four system")]),a("br"),e._v(" "),a("code",[e._v("palette entries (of 4 colors each) are transferred into each")]),a("br"),e._v(" "),a("code",[e._v("OBJ palette. The system palette numbers are not required to be")]),a("br"),e._v(" "),a("code",[e._v("aligned to a multiple of four, and will wrap to palette number")]),a("br"),e._v(" "),a("code",[e._v("0 when exceeding 511. For example, a value of 511 would copy")]),a("br"),e._v(" "),a("code",[e._v("system palettes 511, 0, 1, 2 to the SNES OBJ palette.")]),a("br"),e._v(" "),a("code",[e._v("A-F   Not used (zero)")])]),e._v(" "),a("p",[e._v('The recommended method is to "display" Game Boy BG tiles F9h..FFh from\nleft to right as first 7 characters of the bottom-most character line of\nthe Game Boy screen. As for normal 4KByte VRAM transfers, this area\nshould not be scrolled, should not be overlapped by Game Boy OBJs, and\nthe Game Boy BGP palette register should be set up properly. By following\nthat method, SNES OAM data can be defined in the 70h bytes of the\ngameboy BG tile memory at following addresses:')]),e._v(" "),a("p",[a("code",[e._v("8F90-8FEF  SNES OAM, 24 Entries of 4 bytes each (96 bytes)")]),a("br"),e._v(" "),a("code",[e._v("8FF0-8FF5  SNES OAM MSBs, 24 Entries of 2 bits each (6 bytes)")]),a("br"),e._v(" "),a("code",[e._v("8FF6-8FFF  Not used, don't care (10 bytes)")])]),e._v(" "),a("p",[e._v("The format of SNES OAM Entries is:")]),e._v(" "),a("p",[a("code",[e._v("Byte 0  OBJ X-Position (0-511, MSB is separately stored, see below)")]),a("br"),e._v(" "),a("code",[e._v("Byte 1  OBJ Y-Position (0-255)")]),a("br"),e._v(" "),a("code",[e._v("Byte 2-3  Attributes (16bit)")]),a("br"),e._v(" "),a("code",[e._v("Bit 0-8    Tile Number     (use only 00h-FFh, upper bit zero)")]),a("br"),e._v(" "),a("code",[e._v("Bit 9-11   Palette Number  (use only 4-7)")]),a("br"),e._v(" "),a("code",[e._v("Bit 12-13  OBJ Priority    (use only 3)")]),a("br"),e._v(" "),a("code",[e._v("Bit 14     X-Flip          (0=Normal, 1=Mirror horizontally)")]),a("br"),e._v(" "),a("code",[e._v("Bit 15     Y-Flip          (0=Normal, 1=Mirror vertically)")])]),e._v(" "),a("p",[e._v("The format of SNES OAM MSB Entries is:")]),e._v(" "),a("p",[a("code",[e._v("Actually, the format is unknown ??? However, 2 bits are used per entry:")]),a("br"),e._v(" "),a("code",[e._v("One bit is the most significant bit of the OBJ X-Position.")]),a("br"),e._v(" "),a("code",[e._v("The other bit specifies the OBJ size (8x8 or 16x16 pixels).")])]),e._v(" "),a("h2",{attrs:{id:"undocumented-sgb-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undocumented-sgb-commands"}},[e._v("#")]),e._v(" Undocumented SGB commands")]),e._v(" "),a("p",[e._v("The following information has been extracted from disassembling a SGBv2\nfirmware; it should be verified on other SGB revisions.")]),e._v(" "),a("p",[e._v("The SGB firmware explicitly ignores all commands with ID >= $1E. This\nleaves undocumented commands $19 to $1D inclusive.")]),e._v(" "),a("h4",{attrs:{id:"stubbed-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stubbed-commands"}},[e._v("#")]),e._v(" Stubbed commands")]),e._v(" "),a("p",[e._v("Commands $1A to $1F (inclusive)'s handlers are stubs (only contain a\n"),a("code",[e._v("RTS")]),e._v("). This is interesting, since the command-processing function\nexplicitly ignores commands $1E and $1F.")]),e._v(" "),a("h4",{attrs:{id:"sgb-command-19h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sgb-command-19h"}},[e._v("#")]),e._v(" SGB command 19h")]),e._v(" "),a("p",[e._v("The game Donkey Kong '94 appears to send this command, and it appears\nto set a flag in the SGB's memory. It's not known yet what it does,\nthough.")]),e._v(" "),a("h1",{attrs:{id:"comparison-with-z80"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-z80"}},[e._v("#")]),e._v(" Comparison with Z80")]),e._v(" "),a("h4",{attrs:{id:"comparison-with-8080"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-8080"}},[e._v("#")]),e._v(" Comparison with 8080")]),e._v(" "),a("p",[e._v("The Game Boy CPU has a bit more in common with an older Intel 8080 CPU\nthan the more powerful Zilog Z80 CPU. It is missing a handful of 8080\ninstructions but does support JR and almost all CB-prefixed\ninstructions. Also, all known Game Boy assemblers use the more obvious\nZ80-style syntax, rather than the chaotic 8080-style syntax.")]),e._v(" "),a("p",[e._v("Unlike the 8080 and Z80, the Game Boy has no dedicated I/O bus and no\nIN/OUT opcodes. Instead, I/O ports are accessed directly by normal LD\ninstructions, or by new LD (FF00+n) opcodes.")]),e._v(" "),a("p",[e._v("The sign and parity/overflow flags have been removed, as have the 12\nRET, CALL, and JP instructions conditioned on them. So have EX (SP),HL\n(XTHL) and EX DE,HL (XCHG).")]),e._v(" "),a("h4",{attrs:{id:"comparison-with-z80-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-z80-2"}},[e._v("#")]),e._v(" Comparison with Z80")]),e._v(" "),a("p",[e._v("In addition to the removed 8080 instructions, the other exchange\ninstructions have been removed (including total absence of second\nregister set).")]),e._v(" "),a("p",[e._v("All DD- and FD-prefixed instructions are missing. That means no IX- or\nIY-registers.")]),e._v(" "),a("p",[e._v("All ED-prefixed instructions are missing. That means 16bit memory\naccesses are mostly missing, 16bit arithmetic functions are heavily\ncut-down, and some other missing commands. IN/OUT (C) are replaced with\nnew LD ($FF00+C) opcodes. Block commands are gone, but autoincrementing\nHL accesses are added.")]),e._v(" "),a("p",[e._v("The Game Boy operates approximately as fast as a 4 MHz Z80 (8 MHz in CGB\ndouble speed mode), with execution time of all instructions having been\nrounded up to a multiple of 4 cycles.")]),e._v(" "),a("h4",{attrs:{id:"moved-removed-and-added-opcodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#moved-removed-and-added-opcodes"}},[e._v("#")]),e._v(" Moved, Removed, and Added Opcodes")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Opcode")]),e._v(" "),a("th",[e._v("Z80")]),e._v(" "),a("th",[e._v("GMB")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("08")]),e._v(" "),a("td",[e._v("EX   AF,AF")]),e._v(" "),a("td",[e._v("LD   (nn),SP")])]),e._v(" "),a("tr",[a("td",[e._v("10")]),e._v(" "),a("td",[e._v("DJNZ PC+dd")]),e._v(" "),a("td",[e._v("STOP")])]),e._v(" "),a("tr",[a("td",[e._v("22")]),e._v(" "),a("td",[e._v("LD   (nn),HL")]),e._v(" "),a("td",[e._v("LDI  (HL),A")])]),e._v(" "),a("tr",[a("td",[e._v("2A")]),e._v(" "),a("td",[e._v("LD   HL,(nn)")]),e._v(" "),a("td",[e._v("LDI  A,(HL)")])]),e._v(" "),a("tr",[a("td",[e._v("32")]),e._v(" "),a("td",[e._v("LD   (nn),A")]),e._v(" "),a("td",[e._v("LDD  (HL),A")])]),e._v(" "),a("tr",[a("td",[e._v("3A")]),e._v(" "),a("td",[e._v("LD   A,(nn)")]),e._v(" "),a("td",[e._v("LDD  A,(HL)")])]),e._v(" "),a("tr",[a("td",[e._v("D3")]),e._v(" "),a("td",[e._v("OUT  (n),A")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("D9")]),e._v(" "),a("td",[e._v("EXX")]),e._v(" "),a("td",[e._v("RETI")])]),e._v(" "),a("tr",[a("td",[e._v("DB")]),e._v(" "),a("td",[e._v("IN   A,(n)")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("DD")]),e._v(" "),a("td",[e._v("<IX>")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("E0")]),e._v(" "),a("td",[e._v("RET  PO")]),e._v(" "),a("td",[e._v("LD   (FF00+n),A")])]),e._v(" "),a("tr",[a("td",[e._v("E2")]),e._v(" "),a("td",[e._v("JP   PO,nn")]),e._v(" "),a("td",[e._v("LD   (FF00+C),A")])]),e._v(" "),a("tr",[a("td",[e._v("E3")]),e._v(" "),a("td",[e._v("EX   (SP),HL")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("E4")]),e._v(" "),a("td",[e._v("CALL P0,nn")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("E8")]),e._v(" "),a("td",[e._v("RET  PE")]),e._v(" "),a("td",[e._v("ADD  SP,dd")])]),e._v(" "),a("tr",[a("td",[e._v("EA")]),e._v(" "),a("td",[e._v("JP   PE,nn")]),e._v(" "),a("td",[e._v("LD   (nn),A")])]),e._v(" "),a("tr",[a("td",[e._v("EB")]),e._v(" "),a("td",[e._v("EX   DE,HL")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("EC")]),e._v(" "),a("td",[e._v("CALL PE,nn")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("ED")]),e._v(" "),a("td",[e._v("<pref>")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("F0")]),e._v(" "),a("td",[e._v("RET  P")]),e._v(" "),a("td",[e._v("LD   A,(FF00+n)")])]),e._v(" "),a("tr",[a("td",[e._v("F2")]),e._v(" "),a("td",[e._v("JP   P,nn")]),e._v(" "),a("td",[e._v("LD   A,(FF00+C)")])]),e._v(" "),a("tr",[a("td",[e._v("F4")]),e._v(" "),a("td",[e._v("CALL P,nn")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("F8")]),e._v(" "),a("td",[e._v("RET  M")]),e._v(" "),a("td",[e._v("LD   HL,SP+dd")])]),e._v(" "),a("tr",[a("td",[e._v("FA")]),e._v(" "),a("td",[e._v("JP   M,nn")]),e._v(" "),a("td",[e._v("LD   A,(nn)")])]),e._v(" "),a("tr",[a("td",[e._v("FC")]),e._v(" "),a("td",[e._v("CALL M,nn")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("FD")]),e._v(" "),a("td",[e._v("<IY>")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("CB3X")]),e._v(" "),a("td",[e._v("SLL  r/(HL)")]),e._v(" "),a("td",[e._v("SWAP r/(HL)")])])])]),e._v(" "),a("p",[e._v("Note: The unused (-) opcodes will lock up the Game Boy CPU when used.")]),e._v(" "),a("h1",{attrs:{id:"mbc1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc1"}},[e._v("#")]),e._v(" MBC1")]),e._v(" "),a("p",[e._v("(max 2MByte ROM and/or 32KByte RAM)")]),e._v(" "),a("p",[e._v("This is the first MBC chip for the Game Boy. Any newer MBC chips are\nworking similiar, so that is relative easy to upgrade a program from one\nMBC chip to another - or even to make it compatible to several different\ntypes of MBCs.")]),e._v(" "),a("p",[e._v("Note that the memory in range 0000-7FFF is used for both reading from\nROM, and for writing to the MBCs Control Registers.")]),e._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only"}},[e._v("#")]),e._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),e._v(" "),a("p",[e._v("This area always contains the first 16KBytes of the cartridge ROM.")]),e._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-01-7f-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-7f-read-only"}},[e._v("#")]),e._v(" 4000-7FFF - ROM Bank 01-7F (Read Only)")]),e._v(" "),a("p",[e._v("This area may contain any of the further 16KByte banks of the ROM,\nallowing to address up to 125 ROM Banks (almost 2MByte). As described\nbelow, bank numbers 20h, 40h, and 60h cannot be used, resulting in the\nodd amount of 125 banks.")]),e._v(" "),a("h4",{attrs:{id:"a000-bfff-ram-bank-00-03-if-any-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-ram-bank-00-03-if-any-read-write"}},[e._v("#")]),e._v(" A000-BFFF - RAM Bank 00-03, if any (Read/Write)")]),e._v(" "),a("p",[e._v("This area is used to address external RAM in the cartridge (if any).\nExternal RAM is often battery buffered, allowing to store game positions\nor high score tables, even if the Game Boy is turned off, or if the\ncartridge is removed from the Game Boy. Available RAM sizes are: 2KByte\n(at A000-A7FF), 8KByte (at A000-BFFF), and 32KByte (in form of four 8K\nbanks at A000-BFFF).")]),e._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-write-only"}},[e._v("#")]),e._v(" 0000-1FFF - RAM Enable (Write Only)")]),e._v(" "),a("p",[e._v("Before external RAM can be read or written, it must be enabled by\nwriting to this address space. It is recommended to disable external RAM\nafter accessing it, in order to protect its contents from damage during\npower down of the Game Boy. Usually the following values are used:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("00h  Disable RAM (default)\n0Ah  Enable RAM`\n")])])]),a("p",[e._v("Practically any value with 0Ah in the lower 4 bits enables RAM, and any\nother value disables RAM.")]),e._v(" "),a("h4",{attrs:{id:"_2000-3fff-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only"}},[e._v("#")]),e._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("Writing to this address space selects the lower 5 bits of the ROM Bank\nNumber (in range 01-1Fh). When 00h is written, the MBC translates that\nto bank 01h also. That doesn't harm so far, because ROM Bank 00h can be\nalways directly accessed by reading from 0000-3FFF. But (when using the\nregister below to specify the upper ROM Bank bits), the same happens for\nBank 20h, 40h, and 60h. Any attempt to address these ROM Banks will\nselect Bank 21h, 41h, and 61h instead.")]),e._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-bank-number-or-upper-bits-of-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-or-upper-bits-of-rom-bank-number-write-only"}},[e._v("#")]),e._v(" 4000-5FFF - RAM Bank Number - or - Upper Bits of ROM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("This 2bit register can be used to select a RAM Bank in range from\n00-03h, or to specify the upper two bits (Bit 5-6) of the ROM Bank\nnumber, depending on the current ROM/RAM Mode. (See below.)")]),e._v(" "),a("h4",{attrs:{id:"_6000-7fff-rom-ram-mode-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6000-7fff-rom-ram-mode-select-write-only"}},[e._v("#")]),e._v(" 6000-7FFF - ROM/RAM Mode Select (Write Only)")]),e._v(" "),a("p",[e._v("This 1bit Register selects whether the two bits of the above register\nshould be used as upper two bits of the ROM Bank, or as RAM Bank Number.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("00h = ROM Banking Mode (up to 8KByte RAM, 2MByte ROM) (default)\n01h = RAM Banking Mode (up to 32KByte RAM, 512KByte ROM)\n")])])]),a("p",[e._v("The program may freely switch between both modes, the only limitiation\nis that only RAM Bank 00h can be used during Mode 0, and only ROM Banks\n00-1Fh can be used during Mode 1.")]),e._v(" "),a("h1",{attrs:{id:"mbc2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc2"}},[e._v("#")]),e._v(" MBC2")]),e._v(" "),a("p",[e._v("(max 256KByte ROM and 512x4 bits RAM)")]),e._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-2"}},[e._v("#")]),e._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1.")]),e._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-01-0f-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-0f-read-only"}},[e._v("#")]),e._v(" 4000-7FFF - ROM Bank 01-0F (Read Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1, but only a total of 16 ROM banks is supported.")]),e._v(" "),a("h4",{attrs:{id:"a000-a1ff-512x4bits-ram-built-in-into-the-mbc2-chip-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-a1ff-512x4bits-ram-built-in-into-the-mbc2-chip-read-write"}},[e._v("#")]),e._v(" A000-A1FF - 512x4bits RAM, built-in into the MBC2 chip (Read/Write)")]),e._v(" "),a("p",[e._v('The MBC2 doesn\'t support external RAM, instead it includes 512x4 bits\nof built-in RAM (in the MBC2 chip itself). It still requires an external\nbattery to save data during power-off though. As the data consists of\n4bit values, only the lower 4 bits of the "bytes" in this memory area\nare used.')]),e._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-enable-write-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-write-only-2"}},[e._v("#")]),e._v(" 0000-1FFF - RAM Enable (Write Only)")]),e._v(" "),a("p",[e._v("The least significant bit of the upper address byte must be zero to\nenable/disable cart RAM. For example the following addresses can be used\nto enable/disable cart RAM: 0000-00FF, 0200-02FF, 0400-04FF, ...,\n1E00-1EFF. The suggested address range to use for MBC2 ram\nenable/disable is 0000-00FF.")]),e._v(" "),a("h4",{attrs:{id:"_2000-3fff-rom-bank-number-write-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only-2"}},[e._v("#")]),e._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("Writing a value (XXXXBBBB - X = Don't cares, B = bank select bits) into\n2000-3FFF area will select an appropriate ROM bank at 4000-7FFF.")]),e._v(" "),a("p",[e._v("The least significant bit of the upper address byte must be one to\nselect a ROM bank. For example the following addresses can be used to\nselect a ROM bank: 2100-21FF, 2300-23FF, 2500-25FF, ..., 3F00-3FFF. The\nsuggested address range to use for MBC2 rom bank selection is 2100-21FF.")]),e._v(" "),a("h1",{attrs:{id:"mbc3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc3"}},[e._v("#")]),e._v(" MBC3")]),e._v(" "),a("p",[e._v("(max 2MByte ROM and/or 32KByte RAM and Timer)")]),e._v(" "),a("p",[e._v("Beside for the ability to access up to 2MB ROM (128 banks), and 32KB RAM\n(4 banks), the MBC3 also includes a built-in Real Time Clock (RTC). The\nRTC requires an external 32.768 kHz Quartz Oscillator, and an external\nbattery (if it should continue to tick when the Game Boy is turned off).")]),e._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-3"}},[e._v("#")]),e._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1.")]),e._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-01-7f-read-only-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-01-7f-read-only-2"}},[e._v("#")]),e._v(" 4000-7FFF - ROM Bank 01-7F (Read Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1, except that accessing banks 20h, 40h, and 60h is\nsupported now.")]),e._v(" "),a("h4",{attrs:{id:"a000-bfff-ram-bank-00-03-if-any-read-write-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-ram-bank-00-03-if-any-read-write-2"}},[e._v("#")]),e._v(" A000-BFFF - RAM Bank 00-03, if any (Read/Write)")]),e._v(" "),a("h4",{attrs:{id:"a000-bfff-rtc-register-08-0c-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-rtc-register-08-0c-read-write"}},[e._v("#")]),e._v(" A000-BFFF - RTC Register 08-0C (Read/Write)")]),e._v(" "),a("p",[e._v("Depending on the current Bank Number/RTC Register selection (see below),\nthis memory space is used to access an 8KByte external RAM Bank, or a\nsingle RTC Register.")]),e._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-and-timer-enable-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-and-timer-enable-write-only"}},[e._v("#")]),e._v(" 0000-1FFF - RAM and Timer Enable (Write Only)")]),e._v(" "),a("p",[e._v("Mostly the same as for MBC1, a value of 0Ah will enable reading and\nwriting to external RAM - and to the RTC Registers! A value of 00h will\ndisable either.")]),e._v(" "),a("h4",{attrs:{id:"_2000-3fff-rom-bank-number-write-only-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-3fff-rom-bank-number-write-only-3"}},[e._v("#")]),e._v(" 2000-3FFF - ROM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1, except that the whole 7 bits of the RAM Bank Number\nare written directly to this address. As for the MBC1, writing a value\nof 00h, will select Bank 01h instead. All other values 01-7Fh select the\ncorresponding ROM Banks.")]),e._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-bank-number-or-rtc-register-select-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-or-rtc-register-select-write-only"}},[e._v("#")]),e._v(" 4000-5FFF - RAM Bank Number - or - RTC Register Select (Write Only)")]),e._v(" "),a("p",[e._v("As for the MBC1s RAM Banking Mode, writing a value in range for 00h-03h\nmaps the corresponding external RAM Bank (if any) into memory at\nA000-BFFF. When writing a value of 08h-0Ch, this will map the\ncorresponding RTC register into memory at A000-BFFF. That register could\nthen be read/written by accessing any address in that area, typically\nthat is done by using address A000.")]),e._v(" "),a("h4",{attrs:{id:"_6000-7fff-latch-clock-data-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6000-7fff-latch-clock-data-write-only"}},[e._v("#")]),e._v(" 6000-7FFF - Latch Clock Data (Write Only)")]),e._v(" "),a("p",[e._v("When writing 00h, and then 01h to this register, the current time\nbecomes latched into the RTC registers. The latched data will not change\nuntil it becomes latched again, by repeating the write 00h->01h\nprocedure. This is supposed for "),a("strong",[e._v("reading")]),e._v(" from the RTC registers. This\ncan be proven by reading the latched (frozen) time from the RTC\nregisters, and then unlatch the registers to show the clock itself\ncontinues to tick in background.")]),e._v(" "),a("h4",{attrs:{id:"the-clock-counter-registers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-clock-counter-registers"}},[e._v("#")]),e._v(" The Clock Counter Registers")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("08h  RTC S   Seconds   0-59 (0-3Bh)\n09h  RTC M   Minutes   0-59 (0-3Bh)\n0Ah  RTC H   Hours     0-23 (0-17h)\n0Bh  RTC DL  Lower 8 bits of Day Counter (0-FFh)\n0Ch  RTC DH  Upper 1 bit of Day Counter, Carry Bit, Halt Flag\n      Bit 0  Most significant bit of Day Counter (Bit 8)\n      Bit 6  Halt (0=Active, 1=Stop Timer)\n      Bit 7  Day Counter Carry Bit (1=Counter Overflow)\n")])])]),a("p",[e._v("The Halt Flag is supposed to be set before "),a("strong",[e._v("writing")]),e._v(" to the RTC\nRegisters.")]),e._v(" "),a("h4",{attrs:{id:"the-day-counter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-day-counter"}},[e._v("#")]),e._v(" The Day Counter")]),e._v(" "),a("p",[e._v("The total 9 bits of the Day Counter allow to count days in range from\n0-511 (0-1FFh). The Day Counter Carry Bit becomes set when this value\noverflows. In that case the Carry Bit remains set until the program does\nreset it. Note that you can store an offset to the Day Counter in\nbattery RAM. For example, every time you read a non-zero Day Counter,\nadd this Counter to the offset in RAM, and reset the Counter to zero.\nThis method allows to count any number of days, making your program\nYear-10000-Proof, provided that the cartridge gets used at least every\n511 days.")]),e._v(" "),a("h4",{attrs:{id:"delays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delays"}},[e._v("#")]),e._v(" Delays")]),e._v(" "),a("p",[e._v("When accessing the RTC Registers it is recommended to execute a 4ms\ndelay (4 Cycles in Normal Speed Mode) between the separate accesses.")]),e._v(" "),a("h1",{attrs:{id:"mbc5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mbc5"}},[e._v("#")]),e._v(" MBC5")]),e._v(" "),a("p",[e._v("It can map up to 64 Mbits (8 MBytes) of ROM.")]),e._v(" "),a("p",[e._v("MBC5 (Memory Bank Controller 5) is the 4th generation MBC. There\napparently was no MBC4, presumably because of the superstition about the\nnumber 4 in Japanese culture. It is the first MBC that is guranteed to\nwork properly with GBC double speed mode.")]),e._v(" "),a("h4",{attrs:{id:"_0000-3fff-rom-bank-00-read-only-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-3fff-rom-bank-00-read-only-4"}},[e._v("#")]),e._v(" 0000-3FFF - ROM Bank 00 (Read Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1.")]),e._v(" "),a("h4",{attrs:{id:"_4000-7fff-rom-bank-00-1ff-read-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-7fff-rom-bank-00-1ff-read-only"}},[e._v("#")]),e._v(" 4000-7FFF - ROM Bank 00-1FF (Read Only)")]),e._v(" "),a("p",[e._v("Same as for MBC1, except that accessing up to bank 1E0h is supported\nnow. Also, bank 0 is actually bank 0.")]),e._v(" "),a("h4",{attrs:{id:"a000-bfff-ram-bank-00-0f-if-any-read-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a000-bfff-ram-bank-00-0f-if-any-read-write"}},[e._v("#")]),e._v(" A000-BFFF - RAM Bank 00-0F, if any (Read/Write)")]),e._v(" "),a("p",[e._v("Same as for MBC1, except RAM sizes are 64kbit, 256kbit and 1mbit.")]),e._v(" "),a("h4",{attrs:{id:"_0000-1fff-ram-enable-write-only-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0000-1fff-ram-enable-write-only-3"}},[e._v("#")]),e._v(" 0000-1FFF - RAM Enable (Write Only)")]),e._v(" "),a("p",[e._v("Mostly the same as for MBC1, a value of 0Ah will enable reading and\nwriting to external RAM. A value of 00h will disable it.")]),e._v(" "),a("h4",{attrs:{id:"_2000-2fff-low-8-bits-of-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2000-2fff-low-8-bits-of-rom-bank-number-write-only"}},[e._v("#")]),e._v(" 2000-2FFF - Low 8 bits of ROM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("The lower 8 bits of the ROM bank number goes here. Writing 0 will indeed\ngive bank 0 on MBC5, unlike other MBCs.")]),e._v(" "),a("h4",{attrs:{id:"_3000-3fff-high-bit-of-rom-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3000-3fff-high-bit-of-rom-bank-number-write-only"}},[e._v("#")]),e._v(" 3000-3FFF - High bit of ROM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("The 9th bit of the ROM bank number goes here.")]),e._v(" "),a("h4",{attrs:{id:"_4000-5fff-ram-bank-number-write-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4000-5fff-ram-bank-number-write-only"}},[e._v("#")]),e._v(" 4000-5FFF - RAM Bank Number (Write Only)")]),e._v(" "),a("p",[e._v("As for the MBC1s RAM Banking Mode, writing a value in range for 00h-0Fh\nmaps the corresponding external RAM Bank (if any) into memory at\nA000-BFFF.")]),e._v(" "),a("p",[a("img",{attrs:{src:"%22imgs/MBC5.png%22",alt:""}})]),e._v(" "),a("h1",{attrs:{id:"power-up-sequence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#power-up-sequence"}},[e._v("#")]),e._v(" Power Up Sequence")]),e._v(" "),a("p",[e._v("When the Game Boy is powered up, a 256 byte program starting at memory location 0 is executed. This program is located in a ROM inside the GameBoy. The first thing the program does is read the cartridge locations from $104 to $133 and place this graphic of a Nintendo logo on the screen at the top.")]),e._v(" "),a("p",[e._v("This image is then scrolled until it is in the middle of the screen. Two musical notes are then played on the internal speaker. Again, the cartridge locations $104 to $133 are read but this time they are compared with a table in the internal rom.")]),e._v(" "),a("p",[e._v("If any byte fails to compare, then the Game Boy stops comparing bytes and simply halts all operations.")]),e._v(" "),a("p",[e._v("If all locations compare the same, then the GameBoy starts adding all of the bytes in the cartridge from $134 to $14d. A value of 25 decimal is added to this total.")]),e._v(" "),a("p",[e._v("If the least significant byte of the result is a not a zero, then the Game Boy will stop doing anything.")]),e._v(" "),a("p",[e._v("If it is a zero, then the internal ROM is disabled and cartridge program execution begins at location $100 with the following register values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  AF=$01B0\n  BC=$0013\n  DE=$00D8\n  HL=$014D\n  Stack Pointer=$FFFE\n  [$FF05] = $00   ; TIMA\n  [$FF06] = $00   ; TMA\n  [$FF07] = $00   ; TAC\n  [$FF10] = $80   ; NR10\n  [$FF11] = $BF   ; NR11\n  [$FF12] = $F3   ; NR12\n  [$FF14] = $BF   ; NR14\n  [$FF16] = $3F   ; NR21\n  [$FF17] = $00   ; NR22\n  [$FF19] = $BF   ; NR24\n  [$FF1A] = $7F   ; NR30\n  [$FF1B] = $FF   ; NR31\n  [$FF1C] = $9F   ; NR32\n  [$FF1E] = $BF   ; NR33\n  [$FF20] = $FF   ; NR41\n  [$FF21] = $00   ; NR42\n  [$FF22] = $00   ; NR43\n  [$FF23] = $BF   ; NR44\n  [$FF24] = $77   ; NR50\n  [$FF25] = $F3   ; NR51\n  [$FF26] = $F1-GB, $F0-SGB ; NR52\n  [$FF40] = $91   ; LCDC\n  [$FF42] = $00   ; SCY\n  [$FF43] = $00   ; SCX\n  [$FF45] = $00   ; LYC\n  [$FF47] = $FC   ; BGP\n  [$FF48] = $FF   ; OBP0\n  [$FF49] = $FF   ; OBP1\n  [$FF4A] = $00   ; WY\n  [$FF4B] = $00   ; WX\n  [$FFFF] = $00   ; IE\n")])])]),a("p",[e._v("It is not a good idea to assume the above values will always exist. A later version Game Boy could contain different values than these at reset. Always set these registers on reset rather than assume they are as above.")]),e._v(" "),a("p",[e._v("Please note that Game Boy internal RAM on power up contains random data.")]),e._v(" "),a("p",[e._v("All of the Game Boy emulators tend to set all RAM to value $00 on entry.")]),e._v(" "),a("p",[e._v("Cart RAM the first time it is accessed on a real Game Boy contains random data.\nIt will only contain known data if the Game Boy code initializes it to some value.")]),e._v(" "),a("h3",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/AntonioND/giibiiadvance/tree/master/docs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Antonio Niño Díaz (AntonioND). The Cycle-Accurate Game Boy Docs"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.its.caltech.edu/~costis/sgb_hack/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Costis Sideris. The quest for dumping GameBoy Boot ROMs!"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.tauwasser.eu/view/MBC1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tauwasser. MBC1 - Tauwasser’s Wiki"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.tauwasser.eu/view/MBC2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tauwasser. MBC2 - Tauwasser’s Wiki"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Gekkio/gb-ctr",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gekkio. Game Boy: Complete Technical Reference"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://gbdev.github.io/gb-opcodes/optables/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Game Boy CPU (SM83) instruction set"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://gekkio.fi/blog/2015/dumping-the-super-game-boy-2-boot-rom/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gekkio. Dumping the Super Game Boy 2 boot ROM"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://exez.in/gameboy-dma",target:"_blank",rel:"noopener noreferrer"}},[e._v("exezin. OAM DMA tutorial"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.semis.demon.co.uk/Gameboy/Gbmain.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("MBC5 schematic"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);